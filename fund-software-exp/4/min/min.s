** 最小値を探索する
** min.s
**

.section .text
**--------------------------------------
** メインルーチン
**--------------------------------------
start:
    move.l  #0x12345678, %d1 /* レジスタ退避を学ぶため、わざとレジスタd1に値を入れている */
    lea.l   DATA, %a1        /* サブルーチンに移る前の準備としてa1にDATAのアドレスを格納 */
    jsr     MINIMUM          /* MINIMUMサブルーチンに処理を移す */
    stop #0x2700

**---------------------------------------
** サブルーチン（最小値探索）
** 入力（引き数） %a1:探索対象データの先頭アドレス
** 出力（戻り値） %d0:結果(最小値)
**---------------------------------------
MINIMUM:
    movem.l %a1/%d1, -(%a7) /* レジスタの退避（push）（a1,d1の値をスタックに格納する） */
    moveq.l #LENGTH, %d1    /* d1 = LENGTH - 1 */
    subq.w  #1, %d1
    move.w  (%a1), %d0
LOOP1:
    adda.w  #2, %a1         /* a1 = a1 + 2 */
    cmp.w   (%a1), %d0
    bcs     LABEL1
    move.w  (%a1), %d0
LABEL1:
    subq.w  #1, %d1
    bne     LOOP1
    movem.l (%a7)+,%a1/%d1  /* レジスタの復帰（pop） */
    rts                     /* サブルーチン呼び出し元に戻る */

**---------------------------------------
** データエリア
**---------------------------------------
.section .data
    .equ LENGTH, 7              /* データの個数 */
    DATA: dc.w 9,5,3,7,6,4,8
