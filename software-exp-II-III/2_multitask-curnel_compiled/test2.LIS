

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	** EECS-Exp II/III software-exp-I
   2               	** v1.0 / 2023-11-15
   3               	** Group 4
   4               	** 1TE21022R Seo Ichika, 	1TE21143S Miyata Yusaku, 	1TE21940P Saitoh Koshi
   5               	** 1TE21913T Takeishi Kota,	1TE21033K Goto Aoto,		1TE21057R Morokuma Haruto
   6               	
   7               	** INDEX
   8               	** STEP 1: 初期化ルーチン
   9               	** STEP 4-2: INTERUT INTERFACE
  10               	** STEP 6-3: INTERGET INTERFACE
  11               	** STEP 0-1: キューの初期化ルーチン(1/2)
  12               	** STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチン 
  13               	** STEP 4-1: INTERPUT
  14               	** STEP 5-1: PUTSTRING
  15               	** STEP 6-1: GETSTRING
  16               	** STEP 6-2: INTERGET
  17               	** STEP 7: タイマ制御部
  18               	** STEP 8: システムコールインタフェース
  19               	** STEP 0-1: キューの初期化ルーチン(2/2)
  20               	
  21               	/* STEP 1: 初期化ルーチンの作成 */
  22               	***************************************************************
  23               	**各種レジスタ定義
  24               	***************************************************************
  25               	***************
  26               	**レジスタ群の先頭
  27               	***************
  28               	.equ REGBASE,   0xFFF000          | DMAPを使用．
  29               	.equ IOBASE,    0x00d00000
  30               	***************
  31               	**割り込み関係のレジスタ
  32               	***************
  33               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  34               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  35               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  36               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  37               	***************
  38               	**タイマ関係のレジスタ
  39               	***************
  40               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  41               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  42               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  43               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  44               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  45               	***************
  46               	** UART1（送受信）関係のレジスタ
  47               	***************
  48               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  49               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  50               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  51               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  52               	***************
  53               	** LED
  54               	***************
  55               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  56               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  57               	.equ LED5,      IOBASE+0x000002b


  58               	.equ LED4,      IOBASE+0x0000029
  59               	.equ LED3,      IOBASE+0x000003f
  60               	.equ LED2,      IOBASE+0x000003d
  61               	.equ LED1,      IOBASE+0x000003b
  62               	.equ LED0,      IOBASE+0x0000039
  63               	
  64               	
  65               	***************
  66               	**システムコール番号
  67               	***************
  68               	.equ SYSCALL_NUM_GETSTRING,     1
  69               	.equ SYSCALL_NUM_PUTSTRING,     2
  70               	.equ SYSCALL_NUM_RESET_TIMER,   3
  71               	.equ SYSCALL_NUM_SET_TIMER,     4
  72               	
  73               	
  74               	***************************************************************
  75               	**スタック領域の確保
  76               	***************************************************************
  77               	.section .bss
  78               	.even
  79               	SYS_STK:
  80 0000 0000 0000 		.ds.b   0x4000  |システムスタック領域
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  81               		.even
  82               	SYS_STK_TOP:        |システムスタック領域の最後尾
  83               	task_p:
  84 4000 0000 0000 		.ds.l 1         |タイマ用
  85               	
  86               	***************************************************************
  87               	**初期化**内部デバイスレジスタには特定の値が設定されている．
  88               	**その理由を知るには，付録Bにある各レジスタの仕様を参照すること．
  89               	***************************************************************
  90               	.section .text
  91               	.even
  92               	.extern start
  93               	.global monitor_begin
  94               	monitor_begin:
  95               	boot:
  96               		*スーパーバイザ&各種設定を行っている最中の割込禁止
  97 0000 46FC 2700 		move.w #0x2700,%SR
  98 0004 4FF9 0000 		lea.l  SYS_STK_TOP, %SP | Set SSP
  98      0000 
  99               	
 100               	
 101               		****************
 102               		**割り込みコントローラの初期化
 103               		****************
 104 000a 13FC 0040 		move.b #0x40, IVR       |ユーザ割り込みベクタ番号を
 104      00FF F300 
 105               					| 0x40+levelに設定.
 106 0012 23FC 00FF 		move.l #0x00ffffff, IMR  |全割xm り込みマスク|**割り込みを許可
 106      FFFF 00FF 
 106      F304 


 107               	
 108               		****************
 109               		**送受信(UART1)関係の初期化(割り込みレベルは4に固定されている)
 110               		****************
 111 001c 33FC 0000 		move.w #0x0000, USTCNT1 |リセット
 111      00FF F900 
 112 0024 33FC E10C 		move.w #0xE10C, USTCNT1 |送受信可能,パリティなし, 1 stop, 8 bit,
 112      00FF F900 
 113               					|送受信割り込み禁止
 114 002c 33FC 0038 		move.w #0x0038, UBAUD1  | baud rate = 230400 bps
 114      00FF F902 
 115               	
 116               		****************
 117               		**タイマ関係の初期化(割り込みレベルは6に固定されている)
 118               		*****************
 119 0034 33FC 0004 		move.w #0x0004, TCTL1   | restart,割り込み不可,|システムクロックの1/16を単位と
 119      00FF F600 
 120               		|タイマ使用停止
 121               	
 122               	    *****************
 123               	    ** キューの初期化
 124               	    *****************
 125 003c 4EBA 00E6 		jsr INIT_Q
 126               	
 127               		****************
 128               		**割り込み処理ルーチンの初期化
 129               		****************
 130 0040 21FC 0000 		move.l #INTERFACE, 0x110			/* level 4, (64+4)*4 */ 
 130      0000 0110 
 131 0048 21FC 0000 		move.l #timer_interface, 0x118		/* level 6, (64+6)*4 */
 131      0000 0118 
 132 0050 21FC 0000 		move.l #SYSCALL_INTERFACE, 0x080	/* trap #0 割り込みベクタ設定 */
 132      0000 0080 
 133 0058 23FC 00FF 		move.l #0x00ff3ff9, IMR				/* 割り込み許可*/
 133      3FF9 00FF 
 133      F304 
 134 0062 46FC 2000 		move.w #0x2000,%SR					/* 走行レベルを0にする */
 135               		
 136 0066 4EF9 0000 		jmp start
 136      0000 
 137 006c 6000 0002 		bra MAIN
 138               	
 139               		
 140               	****************************************************************
 141               	***プログラム領域
 142               	****************************************************************
 143               	.section .text
 144               	.even
 145               	MAIN:
 146               		**走行モードとレベルの設定(「ユーザモード」への移行処理)
 147 0070 46FC 0000 		move.w #0x0000, %SR  | USER MODE, LEVEL 0
 148 0074 4FF9 0000 		lea.l USR_STK_TOP,%SP  | user stackの設定
 148      0000 
 149               		**システムコールによるRESET_TIMERの起動
 150 007a 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 151 007c 4E40      		trap   #0
 152               		**システムコールによるSET_TIMERの起動


 153 007e 7004      		move.l #SYSCALL_NUM_SET_TIMER, %D0
 154 0080 323C C350 		move.w #50000, %D1
 155 0084 243C 0000 		move.l #TT,    %D2
 155      0000 
 156 008a 4E40      		trap #0
 157               		
 158               	******************************
 159               	* sys_GETSTRING, sys_PUTSTRINGのテスト
 160               	*ターミナルの入力をエコーバックする
 161               	******************************
 162               	LOOP:
 163 008c 7001      		move.l #SYSCALL_NUM_GETSTRING, %D0
 164 008e 7200      		move.l #0,   %D1        | ch    = 0
 165 0090 243C 0000 		move.l #BUF, %D2        | p    = #BUF
 165      0000 
 166 0096 263C 0000 		move.l #256, %D3        | size = 256
 166      0100 
 167 009c 4E40      		trap #0
 168 009e 2600      		move.l %D0, %D3         | size = %D0 (length of given string)
 169 00a0 7002      		move.l #SYSCALL_NUM_PUTSTRING, %D0
 170 00a2 7200      		move.l #0,  %D1         | ch = 0
 171 00a4 243C 0000 		move.l #BUF,%D2         | p  = #BUF
 171      0000 
 172 00aa 4E40      		trap #0
 173 00ac 6000 FFDE 		bra LOOP
 174               	
 175               	******************************
 176               	*タイマのテスト
 177               	* ’******’を表示し改行する．
 178               	*５回実行すると，RESET_TIMERをする．
 179               	******************************
 180               	TT:
 181 00b0 48E7 FFFE 		movem.l %D0-%D7/%A0-%A6,-(%SP)
 182 00b4 0C79 0005 		cmpi.w #5,TTC            | TTCカウンタで5回実行したかどうか数える
 182      0000 0000 
 183 00bc 6700 001C 		beq TTKILL               | 5回実行したら，タイマを止める
 184 00c0 7002      		move.l #SYSCALL_NUM_PUTSTRING,%D0
 185 00c2 7200      		move.l #0,    %D1        | ch = 0
 186 00c4 243C 0000 		move.l #TMSG, %D2        | p  = #TMSG
 186      0000 
 187 00ca 7608      		move.l #8,    %D3        | size = 8
 188 00cc 4E40      		trap #0
 189 00ce 0679 0001 		addi.w #1,TTC            | TTCカウンタを1つ増やして
 189      0000 0000 
 190 00d6 6000 0006 		bra TTEND                |そのまま戻る
 191               	TTKILL:
 192 00da 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 193 00dc 4E40      		trap #0
 194               	TTEND:
 195 00de 4CDF 7FFF 		movem.l (%SP)+,%D0-%D7/%A0-%A6
 196 00e2 4E75      		rts
 197               	
 198               	
 199               	****************************************************************
 200               	***初期値のあるデータ領域
 201               	****************************************************************
 202               	.section .data


 203               	TMSG:
 204 0000 2A2A 2A2A 		.ascii  "******\r\n"      | \r:行頭へ(キャリッジリターン)
 204      2A2A 0D0A 
 205               		.even                     | \n:次の行へ(ラインフィード)
 206               	TTC:
 207 0008 0000      		.dc.w  0
 208               		.even
 209               	
 210               	****************************************************************
 211               	***初期値の無いデータ領域
 212               	****************************************************************
 213               	.section .bss
 214               	BUF:
 215 4004 0000 0000 		.ds.b 256           | BUF[256]
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 216               		.even
 217               	USR_STK:
 218 4104 0000 0000 		.ds.b 0x4000        |ユーザスタック領域
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 219               		.even
 220               	USR_STK_TOP:            |ユーザスタック領域の最後尾
 221               	
 222               	
 223               	.section .text
 224               	.even
 225               	
 226               	/* STEP 4-2: INTERUT INTERFACE, STEP 6-3: INTERGET INTERFACE */
 227               	** ここから送受信割り込みインタフェース
 228               	** 担当：齊藤
 229               	
 230               	********************************
 231               	**送受信割り込みインターフェース
 232               	********************************　
 233               	
 234               	***************************************************************************************************
 235               	**【手順説明】
 236               	** 受信レジスタ URX1 を %D3.W にコピー
 237               	** %D3.W の下位 8bit(データ部分) を %D2.B にコピー
 238               	** 今起こっている割り込みが，受信割り込みであるかを，%D3.W の 第 13 ビ
 239               	** 受信割り込みであった場合，チャンネル ch = %D1.L =0, データ data = %D2.B と
 240               	** 今起こっている 割り込みが，送信割り込みであるかを，送信レジスタ U
 241               	** 送信割り込みであった場合，ch=%D1.L=0 として INTERPUT を呼び出す
 242               	***************************************************************************************************
 243               	
 244               	***************************************************************************************************
 245               	**【受信＆送信レジスタの説明】
 246               	** UTX1 15bit 0:送信FIFOが空でない（INTERPUTで送信キューからOUTQ） 1:送信FIFOが
 247               	** URX1 13bit 0:受信FIFOが空              				 1:受信FIFOにデータがある（INTERGETで
 248               	***************************************************************************************************
 249               	
 250               	INTERFACE:


 251 00e4 48E7 7080 		movem.l %d1-%d3/%a0, -(%sp)
 252               	INTERGET_INTERFACE:
 253 00e8 3639 00FF 		move.w  URX1, %d3	|URX1をd3にコピー
 253      F904 
 254 00ee 1403      		move.b  %d3, %d2    |d3の下位8bitをコピー 　data = %d2.b
 255 00f0 0243 2000 		andi.w  #0x2000,%d3	|13ビット目をチェック（bit13=1なら%d3が0x2000となる）
 256 00f4 0C43 2000 		cmpi.w  #0x2000,%d3	|%d3が0x2000であるかチェック
 257 00f8 6600 000C 		bne     INTERPUT_INTERFACE |13ビット目が１だったら受信割込
 258 00fc 7200      		move.l  #0, %d1 	|受信割り込みだったので、ch=%d1.l=0としてINTERGETを呼び出す
 259 00fe 4EBA 0228 		jsr     INTERGET        
 260 0102 6000 001A 		bra	INTERFACE_FINISH
 261               	INTERPUT_INTERFACE:
 262 0106 3639 00FF 		move.w  UTX1, %d3
 262      F906 
 263 010c 0243 8000 		andi.w  #0x8000, %d3
 264 0110 0C43 0000 		cmpi.w  #0x0000, %d3 
 265 0114 6700 0008 		beq    INTERFACE_FINISH |UTX1 15bit = 0（送信FIFOが空でない）INTERPUT_FINISHへ
 266 0118 7200      		move.l #0, %d1        	|送信割り込みだったので、ch=%d1.l=0としてINTERPUTを呼び
 267 011a 4EBA 0126 		jsr    INTERPUT 
 268               	INTERFACE_FINISH:
 269 011e 4CDF 010E 		movem.l (%sp)+, %d1-%d3/%a0
 270 0122 4E73      		rte
 271               		
 272               	
 273               	/* STEP 0-1: キューの初期化ルーチン */
 274               	** (2) 送信キュー・受信キューの両方について，キューのデータ用および
 275               	INIT_Q:	
 276 0124 48E7 00C0 		movem.l %a0-%a1 ,-(%sp)
 277               	
 278               	/* キュー0の初期化 */
 279 0128 207C 0000 		movea.l	#Que0, %a0		/*構造体Que0の先頭アドレス*/
 279      0000 
 280 012e 227C 0000 		move.l  #top, %a1	
 280      000A 
 281 0134 D3C8      		add.l	%a0, %a1 		/*a1でキュー０の先頭番地を指定*/
 282 0136 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 283 013a 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 284 013e 117C 0000 		move.b	#0, s(%a0) 		/*カウンタの初期化*/
 284      0008 
 285               	
 286               	    /* キュー1の初期化 */
 287 0144 207C 0000 		movea.l #Que1, %a0 		/*構造体Que１の先頭アドレス*/
 287      0000 
 288 014a 227C 0000 		move.l  #top, %a1
 288      000A 
 289 0150 D3C8      		add.l   %a0, %a1 		/*a1でキュー1の先頭番地を指定*/
 290 0152 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 291 0156 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 292 015a 117C 0000 		move.b  #0, s(%a0) 		/*カウンタの初期化*/	
 292      0008 
 293               	
 294 0160 4CDF 0300 		movem.l (%sp)+, %a0-%a1
 295 0164 4E75      		rts
 296               	
 297               	
 298               	/* STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチンの作成 */
 299               	** INQ(no, data)


 300               	** argument:    (1) cue number no = %d0
 301               	**              (2) 8-bit data to write = %d1
 302               	** return:      result flag = %d0 (0: failure, 1: success)
 303               	
 304               	/* (1) */
 305               	INQ:						/* キューへの入力 */
 306 0166 40E7      		move.w	%sr, -(%sp)		/* (1) 現走行レベルの退避 */
 307 0168 46FC 2700 		move.w	#0x2700, %sr	/* (2) 割り込み禁止 */
 308 016c 48E7 00F0 		movem.l	%a0-%a3, -(%sp)	/* レジスタの退避 */
 309 0170 207C 0000 		movea.l	#Que0, %a0		/* キュー0参照用アドレス */
 309      0000 
 310 0176 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 310      0000 
 311 017c 6700 0008 		beq	INQ_CHECK       	/*キュー1を使用*/
 312 0180 207C 0000 		movea.l	#Que1, %a0		/* キュー1参照用アドレス */
 312      0000 
 313               	/* (3) */
 314               	INQ_CHECK:
 315 0186 0C68 0100 		cmpi.w	#256 ,s(%a0)	/* s == 256 ?：キュー内のデータの個数を確認 */
 315      0008 
 316 018c 6600 0008 		bne	INQ_START			/* true:  キューが一杯でなければ書き込み可能 */
 317 0190 7000      		moveq.l	#0, %d0			/* false: (3-1) %D0 を0（失敗：queue full）に設定：書き込み失敗 
 318 0192 6000 0038 		bra	INQ_END             /* false: (3-2) (7)へ */
 319               	/* (4), (5-2) */
 320               	INQ_START:
 321               	/* (4) m[in] = data */
 322 0196 2268 0004 		movea.l	in(%a0), %a1	/* 書き込み先アドレスを格納 */
 323 019a 1281      		move.b	%d1, (%a1)		/* 書き込み処理 */
 324 019c 2448      		movea.l	%a0, %a2
 325 019e D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 325      010A 
 326               	
 327               	    /* (5) if (in == bottom) */
 328 01a4 B5E8 0004 		cmpa.l	in(%a0), %a2	/* 書き込んだ位置がキューの末尾か確認 */
 329 01a8 6700 000E 		beq	INQ_TOP
 330               	
 331               		/* (5-2) else in++  */
 332 01ac 06A8 0000 		addi.l	#1, in(%a0)		/* 書き込み位置のアドレスを1加算 */
 332      0001 0004 
 333 01b4 6000 000E 		bra	INQ_SUCCESS
 334               	
 335               	/* (5-1) */
 336               	INQ_TOP:
 337               	/*  (5-1) in=top */
 338 01b8 267C 0000 		move.l	#top, %a3
 338      000A 
 339 01be D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 340 01c0 214B 0004 		move.l	%a3, in(%a0)	/* 書き込み位置をキューの先頭に移動 */
 341               	/* (6) */
 342               	INQ_SUCCESS:
 343               	/* s++, %D0 を1（成功）に設定 */
 344 01c4 0668 0001 		addi.w	#1, s(%a0)		/* 個数を1加算 */
 344      0008 
 345 01ca 7001      		moveq.l	#1, %d0			/* 書き込み成功 */
 346               	
 347               	/* (7) */
 348               	INQ_END:	


 349 01cc 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 350 01d0 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 351 01d2 4E75      		rts
 352               	
 353               	**************************************************
 354               	***a0:選択された構造体の先頭アドレス（変更不可）
 355               	***a1:構造体の先頭アドレスのコピー（変更可
 356               	***************************************************
 357               	
 358               	** OUTQ(no, data)
 359               	** argument:    cue number no = %d0
 360               	** return:      (1) result flag = %d0 (0: failure, 1: success)
 361               	**              (2) 8-bit data to read = %d1
 362               		
 363               	/* (1), (2) */	
 364               	OUTQ:
 365 01d4 40E7      		move.w	%sr, -(%sp) 	/* (1) 現走行レベルの退避 */
 366 01d6 46FC 2700 		move.w	#0x2700, %sr 	/* (2) 割り込み禁止 */
 367 01da 48E7 00F0 		movem.l %a0-%a3, -(%sp) /* レジスタ退避 */
 368 01de 207C 0000 		movea.l #Que0, %a0		/* キュー0参照用アドレス */
 368      0000 
 369               	
 370               	    /* Que0 or Que1 */
 371 01e4 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 371      0000 
 372 01ea 6700 0008 		beq	OUTQ_CHECK      	/* キュー0を使用 */
 373               		              			/* キュー1を使用 */
 374 01ee 207C 0000 		movea.l #Que1, %a0		/* キュー1参照用アドレス */
 374      0000 
 375               	/* (3) */	
 376               	OUTQ_CHECK:
 377               	/* (3) s == 0 ならば%D0 を0（失敗：queue empty）に設定し，(7) へ */
 378 01f4 0C68 0000 		cmpi.w	#0, s(%a0)      /* キュー内のデータの個数を確認 */
 378      0008 
 379 01fa 6600 0008 		bne	OUTQ_START      	/* キューが一杯でなければ読み出し可能 */
 380 01fe 7000      		moveq.l	 #0, %d0 		/*失敗*/
 381 0200 6000 0038 		bra	OUTQ_END
 382               	/* (4), (5-2) */
 383               	OUTQ_START:
 384 0204 2268 0000 		movea.l out(%a0), %a1   /* 読み出し先アドレスを格納*/
 385 0208 1211      		move.b  (%a1), %d1      /* (4) data = m[out]；読み出し処理*/
 386 020a 2448      		movea.l	%a0, %a2
 387 020c D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 387      010A 
 388               	
 389               	    /* (5) if (out == bottom) */
 390 0212 B5E8 0000 		cmpa.l	out(%a0), %a2	/* 読み込んだ位置がキューの末尾か確認 */
 391 0216 6700 000E 		beq	OUTQ_TOP
 392               	
 393               		/* (5-2) else out++  */
 394 021a 06A8 0000 		addi.l	#1, out(%a0)	/* 読み出し位置のアドレスを1加算 */
 394      0001 0000 
 395 0222 6000 000E 		bra OUTQ_SUCCESS
 396               	
 397               	/* (5-1) */
 398               	OUTQ_TOP:	
 399               	/*  (5-1) out=top */


 400 0226 267C 0000 		move.l	#top, %a3
 400      000A 
 401 022c D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 402 022e 214B 0000 		move.l	%a3, out(%a0)	/* 読み出し位置をキューの先頭に移動 */
 403               	
 404               	/* (6) */
 405               	OUTQ_SUCCESS:
 406               	/* s––, %D0 を1（成功）に設定 */
 407 0232 0468 0001 		subi.w	#1, s(%a0)		/* 個数を1減算 */
 407      0008 
 408 0238 7001      		moveq.l	#1, %d0			/* 読み出し成功 */
 409               	
 410               	/* (7)  */
 411               	OUTQ_END:	
 412 023a 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 413 023e 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 414 0240 4E75      		rts
 415               	
 416               	
 417               	**************************************************
 418               	***a0:選択された構造体の先頭アドレス（変更不可）
 419               	***a1:構造体の先頭アドレスのコピー（変更可）
 420               	***************************************************
 421               	
 422               	**ここからINTERPUT・PUTSTRING
 423               	**担当：諸隈・宮田・瀬尾
 424               	
 425               	INTERPUT:
 426               	    **(1) 割り込み禁止（走行レベルを7に設定）
 427 0242 46FC 2700 	    move.w  #0x2700, %SR
 428 0246 48E7 8000 	    movem.l %d0, -(%sp)
 429               		
 430               	    **(2) ch ≠ 0 ならば、何もせずに復帰
 431 024a 0C81 0000 	    cmp.l   #0, %d1
 431      0000 
 432 0250 6600 001C 	    bne     INTERPUT_Exit
 433               	
 434               	    **(3) OUTQ(1, data) を実行する (= 送信キューから8bitデータを1つ取り出しdat
 435 0254 7001      	    move.l  #1, %d0     | キュー番号を指定 (1は送信キュー)
 436 0256 4EBA FF7C 	    jsr     OUTQ
 437               	
 438               	    **(4) OUTQの戻り値が0 (失敗) ならば、送信割り込みをマスク (USTCNT1を操
 439 025a 0C80 0000 	    cmp.l  #0, %d0           | %D0にOUTQの戻り値が格納されている
 439      0000 
 440 0260 6700 0012 	    beq     INTERPUT_MUSK | OUTQが失敗した場合は何も送信せずに復帰
 441               	
 442               	    **(5) dataを送信レジスタUTX1に代入して送信 (上位8ビット分のヘッダを忘
 443               	    **上位8ビットのヘッダを付与しておく
 444 0264 0641 0800 	    add.w  #0x0800, %d1
 445 0268 33C1 00FF 	    move.w  %d1, UTX1
 445      F906 
 446               	    
 447               	INTERPUT_Exit:
 448               	    **(6) 旧走行レベルの回復
 449 026e 4CDF 0001 	    movem.l (%sp)+, %d0
 450 0272 4E75      	    rts
 451               	


 452               	INTERPUT_MUSK:
 453 0274 33FC E108 	    move.w #0xE108, USTCNT1
 453      00FF F900 
 454 027c 6000 FFF0 	    bra INTERPUT_Exit
 455               	
 456               	/* STEP 5: 送信制御部の完成（PUTSTRING）*/
 457               	
 458               	*****************************************
 459               	*** a0=i
 460               	*** d0=sz(実際に送信したデータ数)
 461               	*** d1=ch
 462               	*** d2=p(データ読み込み先の先頭アドレス)
 463               	*** d3=size(送信するデータ数)
 464               	*****************************************
 465               	
 466               	PUTSTRING:
 467 0280 48E7 00F0 	    movem.l	%a0-%a3, -(%sp)  /* レジスタ退避 */
 468               	
 469               	    ** (1) ch != 0 ならば，(11) へ．(=なにもせず復帰)
 470 0284 0C81 0000 	    cmp.l   #0, %d1          /* ch≠0ならば何もせず復帰 */
 470      0000 
 471 028a 6600 004C 	    bne     PUTSTRING_END
 472               		
 473               		** (2) sz <- 0, i <- p
 474 028e 41F9 0000 		lea.l	sz, %a0         /* sz <- 0 */
 474      0000 
 475 0294 43F9 0000 		lea.l	i, %a1          /*  i <- p */
 475      0000 
 476 029a 20BC 0000 	    move.l	#0, (%a0)
 476      0000 
 477 02a0 2282      		move.l	%d2, (%a1)
 478               	
 479               	    ** (3) size = 0 ならば，(10)へ
 480 02a2 0C83 0000 		cmp.l	#0, %d3
 480      0000 
 481 02a8 6700 002C 		beq	PUTSTRING_RETURN
 482               	
 483               	PUTSTRING_LOOP:
 484               	    ** (4) sz = size ならば，(9)へ
 485 02ac B690      		cmp.l	(%a0), %d3      /* sz = sizeならばUnmusk */
 486 02ae 6700 001E 	    beq	PUTSTRING_UNMUSK
 487               		
 488               	    ** (5) INQ(1, i) を実行し，送信キューへi番地のデータを書き込む．
 489 02b2 7001      	    move.l	#1, %d0         /* 送信キューを選択 */
 490 02b4 2651      	    movea.l	(%a1), %a3      /* 送信するデータを入力 */
 491 02b6 1213      	    move.b	(%a3), %d1      
 492 02b8 4EBA FEAC 		jsr	INQ	/*INQ(1, i)*/
 493               	    
 494               	    ** (6) INQ の復帰値が0 (失敗/ queue full) なら(9) へ
 495 02bc 0C80 0000 	    cmp.l	#0, %d0         /* INQの復帰値が0ならばUnmusk */
 495      0000 
 496 02c2 6700 000A 	    beq	PUTSTRING_UNMUSK
 497               	
 498               	    ** (7) sz++, i++, (10) sz -> %d0
 499 02c6 5290      	    add.l	#1, (%a0)       /* sz++ */
 500 02c8 5291      	    add.l	#1, (%a1)       /* i++ */
 501               	


 502               	    ** (8) (4)へ
 503 02ca 6000 FFE0 	    bra	PUTSTRING_LOOP
 504               		
 505               	
 506               	PUTSTRING_UNMUSK:
 507               	    ** (9) USTCNT1 を操作して送信割り込み許可(アンマスク)
 508 02ce 33FC E10C 	    move.w  #0xe10C, USTCNT1 /*送信割り込みをアンマスク*/
 508      00FF F900 
 509               	
 510               	PUTSTRING_RETURN:	
 511 02d6 2010      		move.l	(%a0), %d0	
 512               	
 513               	PUTSTRING_END:
 514 02d8 4CDF 0F00 	    movem.l	(%sp)+, %a0-%a3
 515 02dc 4E75      	    rts
 516               	
 517               		
 518               	/* STEP 6: 受信制御部の完成（GETSTRING, INTERGET）*/
 519               	/* STEP 6-1: GETSTRING */
 520               	GETSTRING:
 521 02de 48E7 7880 	    movem.l %d1-%d4/%a0, -(%sp)
 522               	
 523               	** (1) ch!=0ならば，なにも実行せず復帰
 524 02e2 0C81 0000 	    cmpi.l #0x0, %d1
 524      0000 
 525 02e8 6600 002E 	    bne GETSTRING_Exit /* d1 != 0ならば，走行レベルを回復させ処理を終了 */
 526               	
 527               	** (2) sz <- 0, i <- p
 528 02ec 7800      	    move.l #0, %d4
 529 02ee 2042      	    movea.l %d2, %a0
 530               	
 531               	GETSTRING_LOOP:
 532               	** (3) sz = sizeならば，(9)へ
 533 02f0 B684      	    cmp.l %d4, %d3
 534 02f2 6700 0024 	    beq GETSTRING_Exit
 535               	
 536               	** (4) OUTQ(0, data)により，受信キューから8bitデータ読み込み
 537 02f6 7000      	    move.l #0, %d0
 538 02f8 4EBA FEDA 	    jsr OUTQ
 539               	
 540               	** (5) OUTQの復帰値（%0の値）が0（＝失敗）なら(9)へ
 541 02fc 0C80 0000 	    cmp.l #0, %d0
 541      0000 
 542 0302 6700 0014 	    beq GETSTRING_Exit
 543               	
 544               	** (6) i番地にdataをコピー
 545 0306 1081      	    move.b %d1, (%a0)
 546               	
 547               	** (7) sz++, i++
 548 0308 0684 0000 	    addi.l #1, %d4
 548      0001 
 549 030e D1FC 0000 	    adda.l #1, %a0
 549      0001 
 550               	
 551               	** (8) (3)へ
 552 0314 6000 FFDA 	    bra GETSTRING_LOOP
 553               	


 554               	GETSTRING_Exit:
 555               	** (9) sz -> %d0
 556 0318 13FC 0038 	    move.b #'8',LED0
 556      00D0 0039 
 557 0320 2004      	    move.l %d4, %d0
 558 0322 4CDF 011E 	    movem.l (%sp)+, %d1-%d4/%a0
 559 0326 4E75      	    rts
 560               	
 561               	/* STEP 6-2: INTERGET */
 562               	***********************************************
 563               	*** INTERGET(ch, data)
 564               	*** 【機能】
 565               	*** - 受信データを受信キューに格納する
 566               	*** - チャネルchが0以外の場合は，なにも実行しない
 567               	*** 【入力】
 568               	*** - チャネル：ch -> %d1.l
 569               	*** - 受信データ：data -> %d2.b
 570               	*** 【戻り値】
 571               	*** なし
 572               	*** 【処理内容】
 573               	*** (1) ch!=0ならば，なにも実行せず復帰
 574               	*** (2) INQ(0, data)
 575               	***********************************************
 576               	
 577               	INTERGET:
 578 0328 48E7 E000 	    movem.l %d0-%d2, -(%sp)
 579               	
 580               	* (1) ch!=0ならば，なにも実行せず復帰
 581 032c 0C81 0000 	    cmpi.l #0x0, %d1
 581      0000 
 582 0332 6600 001A 	    bne INTERGET_Finish  /* 走行レベルを回復させ処理を終了 */
 583               	
 584               	* (2) INQ(0, data)
 585 0336 7000      	    move.l #0, %d0
 586 0338 1202      	    move.b %d2, %d1
 587 033a 13FC 0031 	    move.b #'1', LED2   /* 文字'1'をLEDの8桁目に表示 */
 587      00D0 003D 
 588 0342 4EBA FE22 	    jsr INQ
 589 0346 13FC 0033 	    move.b #'3', LED3   /* 文字'3'をLEDの6桁目に表示 */
 589      00D0 003F 
 590               	
 591               	INTERGET_Finish:
 592 034e 4CDF 0007 	    movem.l (%sp)+, %d0-%d2
 593 0352 4E75      	    rts
 594               	
 595               	/* STEP 7: タイマ制御部の完成（RESET_TIMER, SET_TIMER, CALL_RP, TIMER INTERFACE）*/
 596               	/* STEP 7-3: TIMER INTERFACE */
 597               	** こっからTIMER関係
 598               	** 担当：武石
 599               	timer_interface:
 600 0354 48E7 8000 	    movem.l %d0, -(%sp)         | レジスタ退避
 601 0358 3039 00FF 	    move.w TSTAT1, %d0          | とりあえずd0 = TSTAT1 にコピー
 601      F60A 
 602 035e 0240 0001 	    andi.w #0x0001, %d0         | d0 = d0 & 0x0001
 603 0362 6600 0004 	    bne timer_interface_label   | d0 = TSATA1 の第 0 ビットが 0 ならば timer_interface_lab
 604 0366 4E73      	    rte                         | 1 ならば rte で復帰
 605               	


 606               	timer_interface_label:
 607 0368 33FC 0000 	    move.w #0x0000, TSTAT1      | TSTAT1 = 0 (TSTAT1 のリセット)
 607      00FF F60A 
 608 0370 4EBA 0038 	    jsr CALL_RP                 | CALL RP を呼び出す
 609 0374 4CDF 0001 	    movem.l (%sp)+, %d0         | レジスタ回復
 610 0378 4E73      	    rte
 611               	
 612               	/* STEP 7-1: RESET TIMER */
 613               	RESET_TIMER:
 614 037a 33FC 0004 	    move.w #0x0004, TCTL1
 614      00FF F600 
 615 0382 4E75      	    rts
 616               	
 617               	/* STEP 7-2: SET TIMER */
 618               	SET_TIMER:
 619 0384 48E7 6000 	    movem.l	%d1-%d2, -(%sp)     | レジスタ退避
 620 0388 23C2 0000 	    move.l %d2, task_p          | 先頭アドレス p → %D2.L を，大域変数 task p に代
 620      0000 
 621 038e 33FC 00CE 	    move.w #0x00CE, TPRER1      | TPRER1の値は, 計算すると 206.2576 になった. 推奨値
 621      00FF F602 
 622 0396 33C1 00FF 	    move.w %d1, TCMP1           | タイマ割り込み発生周期 t を，タイマ 1 コンペ
 622      F604 
 623 039c 33FC 0015 	    move.w #0x0015, TCTL1       | TCTL1 = 0000 0000 0001 0101
 623      00FF F600 
 624 03a4 4CDF 0006 	    movem.l	(%sp)+, %d1-%d2     | レジスタ復帰
 625 03a8 4E75      	    rts
 626               	
 627               	/* STEP 7-3: CALL_RP */
 628               	CALL_RP:
 629 03aa 48E7 0080 	    movem.l	%a0, -(%sp)
 630 03ae 2079 0000 		movea.l task_p, %a0 
 630      0000 
 631 03b4 4E90      		jsr (%a0)
 632 03b6 4CDF 0100 		movem.l (%sp)+, %a0
 633 03ba 4E75      		rts
 634               	
 635               	
 636               	/* STEP 8: システムコールインタフェースの完成 */
 637               	** ここからシステムコールインタフェース
 638               	** 担当：後藤
 639               	
 640               	SYSCALL_INTERFACE:
 641               	** (1) システムコール番号 %D0 を 実行先アドレスに変換する．
 642               	** (2) システムコールを呼び出す
 643               	
 644 03bc 48E7 0080 	    movem.l %a0, -(%sp) |レジスタ退避
 645 03c0 0C80 0000 	    cmp.l #SYSCALL_NUM_GETSTRING, %d0
 645      0001 
 646 03c6 6700 0020 	    beq SYSCALL_1
 647 03ca 0C80 0000 	    cmp.l #SYSCALL_NUM_PUTSTRING, %d0
 647      0002 
 648 03d0 6700 0020 	    beq SYSCALL_2
 649 03d4 0C80 0000 	    cmp.l #SYSCALL_NUM_RESET_TIMER, %d0
 649      0003 
 650 03da 6700 0020 	    beq SYSCALL_3
 651 03de 0C80 0000 	    cmp.l #SYSCALL_NUM_SET_TIMER, %d0
 651      0004 


 652 03e4 6700 0020 	    beq SYSCALL_4
 653               	SYSCALL_1:
 654 03e8 203C 0000 	    move.l #GETSTRING, %d0
 654      0000 
 655 03ee 6000 0020 	    bra JUMP_SYSCALL
 656               	SYSCALL_2:
 657 03f2 203C 0000 	    move.l #PUTSTRING, %d0
 657      0000 
 658 03f8 6000 0016 	    bra JUMP_SYSCALL
 659               	SYSCALL_3:
 660 03fc 203C 0000 	    move.l #RESET_TIMER, %d0
 660      0000 
 661 0402 6000 000C 	    bra JUMP_SYSCALL
 662               	SYSCALL_4:
 663 0406 203C 0000 	    move.l #SET_TIMER, %d0
 663      0000 
 664 040c 6000 0002 	    bra JUMP_SYSCALL
 665               	JUMP_SYSCALL:
 666 0410 2040      	    movea.l %d0, %a0
 667 0412 4E90      	    jsr (%a0)
 668               	SYSCALL_INTERFACE_FINISH:
 669 0414 4CDF 0100 	    movem.l (%sp)+,%a0  |レジスタ復帰
 670 0418 4E73      	    rte
 671               	
 672               	    
 673               	.section .data
 674               	
 675               	/* STEP 0-1: キューの初期化ルーチン */
 676               	** (2) データ領域のアドレス（先頭・末尾）を代入，データ数の初期化
 677 000a 0000 0000 	Que_START:	.ds.b	536
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 678               	
 679               		/*キューの各先頭アドレス*/
 680               	    .equ    Que0, Que_START
 681               	    .equ    Que1, Que0 + 0x0000010c
 682               		
 683               		/*キューの各要素のオフセット*/
 684               		.equ	out, 0
 685               		.equ	in, 4
 686               		.equ	s, 8  /*2byte分確保*/
 687               		.equ	top, 10
 688               		.equ	bottom, 266
 689               	
 690 0222 0000 0000 	sz:		.ds.l 1
 691 0226 0000 0000 	i: 		.ds.l 1
 692               	.end




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** extern void outbyte(unsigned char c);
   2:csys68k.c     **** extern char inbyte();
   3:csys68k.c     **** 
   4:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   5:csys68k.c     **** {
  13               		.loc 1 5 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 5 1 is_stmt 0 view .LVU1
  16 0000 48E7 3838 		movem.l #14392,-(%sp)
  17               		.cfi_def_cfa_offset 28
  18               		.cfi_offset 2, -28
  19               		.cfi_offset 3, -24
  20               		.cfi_offset 4, -20
  21               		.cfi_offset 10, -16
  22               		.cfi_offset 11, -12
  23               		.cfi_offset 12, -8
  24 0004 286F 0020 		move.l 32(%sp),%a4
  25 0008 282F 0024 		move.l 36(%sp),%d4
   6:csys68k.c     ****   char c;
  26               		.loc 1 6 3 is_stmt 1 view .LVU2
   7:csys68k.c     ****   int  i;
  27               		.loc 1 7 3 view .LVU3
   8:csys68k.c     **** 
   9:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  28               		.loc 1 9 3 view .LVU4
  29               	.LVL1:
  30               		.loc 1 9 17 view .LVU5
  31               		.loc 1 9 10 is_stmt 0 view .LVU6
  32 000c 7600      		moveq #0,%d3
  33               		.loc 1 9 17 view .LVU7
  34 000e 4A84      		tst.l %d4
  35 0010 6F36      		jle .L1
  36 0012 47F9 0000 		lea inbyte,%a3
  36      0000 
  37 0018 45F9 0000 		lea outbyte,%a2
  37      0000 
  38               	.LVL2:
  39               	.L8:
  10:csys68k.c     ****     c = inbyte();
  40               		.loc 1 10 5 is_stmt 1 view .LVU8
  41               		.loc 1 10 9 is_stmt 0 view .LVU9
  42 001e 4E93      		jsr (%a3)
  43               	.LVL3:
  44 0020 1400      		move.b %d0,%d2
  45               	.LVL4:


  11:csys68k.c     **** 
  12:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  46               		.loc 1 12 5 is_stmt 1 view .LVU10
  47               		.loc 1 12 8 is_stmt 0 view .LVU11
  48 0022 0C00 000D 		cmp.b #13,%d0
  49 0026 6728      		jeq .L3
  50               		.loc 1 12 19 discriminator 1 view .LVU12
  51 0028 0C00 000A 		cmp.b #10,%d0
  52 002c 6722      		jeq .L3
  13:csys68k.c     ****       outbyte('\r');
  14:csys68k.c     ****       outbyte('\n');
  15:csys68k.c     ****       *(buf + i) = '\n';
  16:csys68k.c     **** 
  17:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  18:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  53               		.loc 1 18 12 is_stmt 1 view .LVU13
  54               		.loc 1 18 15 is_stmt 0 view .LVU14
  55 002e 0C00 007F 		cmp.b #127,%d0
  56 0032 673A      		jeq .L18
  19:csys68k.c     ****       if (i > 0){
  20:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  21:csys68k.c     **** 	outbyte(' ');   /* spc */
  22:csys68k.c     **** 	outbyte('\x8'); /* bs  */
  23:csys68k.c     **** 	i--;
  24:csys68k.c     ****       }
  25:csys68k.c     ****       i--;
  26:csys68k.c     ****       continue;
  27:csys68k.c     **** 
  28:csys68k.c     ****     } else {
  29:csys68k.c     ****       outbyte(c);
  57               		.loc 1 29 7 is_stmt 1 view .LVU15
  58 0034 7000      		moveq #0,%d0
  59               	.LVL5:
  60               		.loc 1 29 7 is_stmt 0 view .LVU16
  61 0036 1002      		move.b %d2,%d0
  62 0038 2F00      		move.l %d0,-(%sp)
  63               		.cfi_def_cfa_offset 32
  64 003a 4E92      		jsr (%a2)
  65               	.LVL6:
  30:csys68k.c     ****       *(buf + i) = c;
  66               		.loc 1 30 7 is_stmt 1 view .LVU17
  67               		.loc 1 30 18 is_stmt 0 view .LVU18
  68 003c 1982 3800 		move.b %d2,(%a4,%d3.l)
  31:csys68k.c     ****     }
  32:csys68k.c     **** 
  33:csys68k.c     ****     if (*(buf + i) == '\n'){
  69               		.loc 1 33 5 is_stmt 1 view .LVU19
  34:csys68k.c     ****       return (i + 1);
  70               		.loc 1 34 17 is_stmt 0 view .LVU20
  71 0040 5283      		addq.l #1,%d3
  72               	.LVL7:
  73               		.loc 1 34 17 view .LVU21
  74 0042 588F      		addq.l #4,%sp
  75               		.cfi_def_cfa_offset 28
  76               	.LVL8:
   9:csys68k.c     ****     c = inbyte();
  77               		.loc 1 9 28 is_stmt 1 view .LVU22


   9:csys68k.c     ****     c = inbyte();
  78               		.loc 1 9 17 view .LVU23
  79 0044 B684      		cmp.l %d4,%d3
  80 0046 6DD6      		jlt .L8
  81               	.LVL9:
  82               	.L1:
  35:csys68k.c     ****     }
  36:csys68k.c     ****   }
  37:csys68k.c     ****   return (i);
  38:csys68k.c     **** }
  83               		.loc 1 38 1 is_stmt 0 view .LVU24
  84 0048 2003      		move.l %d3,%d0
  85 004a 4CDF 1C1C 		movem.l (%sp)+,#7196
  86 004e 4E75      		rts
  87               	.LVL10:
  88               	.L3:
  13:csys68k.c     ****       outbyte('\n');
  89               		.loc 1 13 7 is_stmt 1 view .LVU25
  90 0050 4878 000D 		pea 13.w
  91               		.cfi_def_cfa_offset 32
  92 0054 4E92      		jsr (%a2)
  93               	.LVL11:
  14:csys68k.c     ****       *(buf + i) = '\n';
  94               		.loc 1 14 7 view .LVU26
  95 0056 4878 000A 		pea 10.w
  96               		.cfi_def_cfa_offset 36
  97 005a 4E92      		jsr (%a2)
  98               	.LVL12:
  15:csys68k.c     **** 
  99               		.loc 1 15 7 view .LVU27
  15:csys68k.c     **** 
 100               		.loc 1 15 18 is_stmt 0 view .LVU28
 101 005c 19BC 000A 		move.b #10,(%a4,%d3.l)
 101      3800 
  33:csys68k.c     ****       return (i + 1);
 102               		.loc 1 33 5 is_stmt 1 view .LVU29
  34:csys68k.c     ****     }
 103               		.loc 1 34 7 view .LVU30
  34:csys68k.c     ****     }
 104               		.loc 1 34 17 is_stmt 0 view .LVU31
 105 0062 5283      		addq.l #1,%d3
 106               	.LVL13:
  34:csys68k.c     ****     }
 107               		.loc 1 34 17 view .LVU32
 108 0064 508F      		addq.l #8,%sp
 109               		.cfi_def_cfa_offset 28
 110               		.loc 1 38 1 view .LVU33
 111 0066 2003      		move.l %d3,%d0
 112 0068 4CDF 1C1C 		movem.l (%sp)+,#7196
 113               	.LVL14:
 114               		.loc 1 38 1 view .LVU34
 115 006c 4E75      		rts
 116               	.LVL15:
 117               	.L18:
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 118               		.loc 1 19 7 is_stmt 1 view .LVU35
  19:csys68k.c     **** 	outbyte('\x8'); /* bs  */


 119               		.loc 1 19 10 is_stmt 0 view .LVU36
 120 006e 4A83      		tst.l %d3
 121 0070 67AC      		jeq .L8
  23:csys68k.c     ****       }
 122               		.loc 1 23 3 view .LVU37
 123 0072 5383      		subq.l #1,%d3
 124               	.LVL16:
  20:csys68k.c     **** 	outbyte(' ');   /* spc */
 125               		.loc 1 20 2 is_stmt 1 view .LVU38
 126 0074 4878 0008 		pea 8.w
 127               		.cfi_def_cfa_offset 32
 128 0078 4E92      		jsr (%a2)
 129               	.LVL17:
  21:csys68k.c     **** 	outbyte('\x8'); /* bs  */
 130               		.loc 1 21 2 view .LVU39
 131 007a 4878 0020 		pea 32.w
 132               		.cfi_def_cfa_offset 36
 133 007e 4E92      		jsr (%a2)
 134               	.LVL18:
  22:csys68k.c     **** 	i--;
 135               		.loc 1 22 2 view .LVU40
 136 0080 4878 0008 		pea 8.w
 137               		.cfi_def_cfa_offset 40
 138 0084 4E92      		jsr (%a2)
 139               	.LVL19:
  23:csys68k.c     ****       }
 140               		.loc 1 23 2 view .LVU41
  25:csys68k.c     ****       continue;
 141               		.loc 1 25 7 view .LVU42
  26:csys68k.c     **** 
 142               		.loc 1 26 7 view .LVU43
 143 0086 4FEF 000C 		lea (12,%sp),%sp
 144               		.cfi_def_cfa_offset 28
 145               	.LVL20:
   9:csys68k.c     ****     c = inbyte();
 146               		.loc 1 9 28 view .LVU44
   9:csys68k.c     ****     c = inbyte();
 147               		.loc 1 9 17 view .LVU45
 148 008a B684      		cmp.l %d4,%d3
 149 008c 6D90      		jlt .L8
 150 008e 60B8      		jra .L1
 151               		.cfi_endproc
 152               	.LFE0:
 153               		.size	read, .-read
 154               		.align	2
 155               		.globl	write
 156               		.type	write, @function
 157               	write:
 158               	.LVL21:
 159               	.LFB1:
  39:csys68k.c     **** 
  40:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  41:csys68k.c     **** {
 160               		.loc 1 41 1 view -0
 161               		.cfi_startproc
 162               		.loc 1 41 1 is_stmt 0 view .LVU47
 163 0090 48E7 3030 		movem.l #12336,-(%sp)


 164               		.cfi_def_cfa_offset 20
 165               		.cfi_offset 2, -20
 166               		.cfi_offset 3, -16
 167               		.cfi_offset 10, -12
 168               		.cfi_offset 11, -8
 169 0094 262F 001C 		move.l 28(%sp),%d3
  42:csys68k.c     ****   int i, j;
 170               		.loc 1 42 3 is_stmt 1 view .LVU48
  43:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 171               		.loc 1 43 3 view .LVU49
 172               	.LVL22:
 173               		.loc 1 43 17 view .LVU50
 174 0098 6F26      		jle .L25
 175 009a 246F 0018 		move.l 24(%sp),%a2
 176 009e 240A      		move.l %a2,%d2
 177 00a0 D483      		add.l %d3,%d2
 178 00a2 47F9 0000 		lea outbyte,%a3
 178      0000 
 179               	.LVL23:
 180               	.L22:
  44:csys68k.c     ****     if (*(buf + i) == '\n') {
 181               		.loc 1 44 5 view .LVU51
 182               		.loc 1 44 9 is_stmt 0 view .LVU52
 183 00a8 101A      		move.b (%a2)+,%d0
 184               	.LVL24:
 185               		.loc 1 44 8 view .LVU53
 186 00aa 0C00 000A 		cmp.b #10,%d0
 187 00ae 6718      		jeq .L28
  45:csys68k.c     ****       outbyte ('\r');          /* LF -> CRLF */
  46:csys68k.c     ****     }
  47:csys68k.c     ****     outbyte (*(buf + i));
 188               		.loc 1 47 5 is_stmt 1 view .LVU54
 189 00b0 0280 0000 		and.l #255,%d0
 189      00FF 
 190 00b6 2F00      		move.l %d0,-(%sp)
 191               		.cfi_def_cfa_offset 24
 192 00b8 4E93      		jsr (%a3)
 193               	.LVL25:
  48:csys68k.c     ****     for (j = 0; j < 300; j++);
 194               		.loc 1 48 5 view .LVU55
 195               		.loc 1 48 19 view .LVU56
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 196               		.loc 1 43 28 view .LVU57
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 197               		.loc 1 43 17 view .LVU58
 198 00ba 588F      		addq.l #4,%sp
 199               		.cfi_def_cfa_offset 20
 200 00bc B48A      		cmp.l %a2,%d2
 201 00be 66E8      		jne .L22
 202               	.LVL26:
 203               	.L25:
  49:csys68k.c     ****   }
  50:csys68k.c     ****   return (nbytes);
  51:csys68k.c     **** }
 204               		.loc 1 51 1 is_stmt 0 view .LVU59
 205 00c0 2003      		move.l %d3,%d0
 206 00c2 4CDF 0C0C 		movem.l (%sp)+,#3084


 207 00c6 4E75      		rts
 208               	.LVL27:
 209               	.L28:
  45:csys68k.c     ****     }
 210               		.loc 1 45 7 is_stmt 1 view .LVU60
 211 00c8 4878 000D 		pea 13.w
 212               		.cfi_def_cfa_offset 24
 213 00cc 4E93      		jsr (%a3)
 214               	.LVL28:
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 215               		.loc 1 47 14 is_stmt 0 view .LVU61
 216 00ce 102A FFFF 		move.b -1(%a2),%d0
 217 00d2 588F      		addq.l #4,%sp
 218               		.cfi_def_cfa_offset 20
  47:csys68k.c     ****     for (j = 0; j < 300; j++);
 219               		.loc 1 47 5 is_stmt 1 view .LVU62
 220 00d4 0280 0000 		and.l #255,%d0
 220      00FF 
 221 00da 2F00      		move.l %d0,-(%sp)
 222               		.cfi_def_cfa_offset 24
 223 00dc 4E93      		jsr (%a3)
 224               	.LVL29:
  48:csys68k.c     ****   }
 225               		.loc 1 48 5 view .LVU63
  48:csys68k.c     ****   }
 226               		.loc 1 48 19 view .LVU64
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 227               		.loc 1 43 28 view .LVU65
  43:csys68k.c     ****     if (*(buf + i) == '\n') {
 228               		.loc 1 43 17 view .LVU66
 229 00de 588F      		addq.l #4,%sp
 230               		.cfi_def_cfa_offset 20
 231 00e0 B48A      		cmp.l %a2,%d2
 232 00e2 66C4      		jne .L22
 233 00e4 60DA      		jra .L25
 234               		.cfi_endproc
 235               	.LFE1:
 236               		.size	write, .-write
 237               	.Letext0:
 238               		.section	.debug_info,"",@progbits
 239               	.Ldebug_info0:
 240 0000 0000 017B 		.long	0x17b
 241 0004 0005      		.word	0x5
 242 0006 01        		.byte	0x1
 243 0007 04        		.byte	0x4
 244 0008 0000 0000 		.long	.Ldebug_abbrev0
 245 000c 06        		.uleb128 0x6
 246 000d 0000 0000 		.long	.LASF5
 247 0011 1D        		.byte	0x1d
 248 0012 0000 0000 		.long	.LASF6
 249 0016 0000 0000 		.long	.LASF7
 250 001a 0000 0000 		.long	.Ltext0
 251 001e 0000 00E6 		.long	.Letext0-.Ltext0
 252 0022 0000 0000 		.long	.Ldebug_line0
 253 0026 07        		.uleb128 0x7
 254 0027 0000 0000 		.long	.LASF0
 255 002b 01        		.byte	0x1


 256 002c 01        		.byte	0x1
 257 002d 0D        		.byte	0xd
 258 002e 0000 0038 		.long	0x38
 259 0032 08        		.uleb128 0x8
 260 0033 0000 0038 		.long	0x38
 261 0037 00        		.byte	0
 262 0038 04        		.uleb128 0x4
 263 0039 08        		.byte	0x8
 264 003a 0000 0000 		.long	.LASF2
 265 003e 09        		.uleb128 0x9
 266 003f 0000 0000 		.long	.LASF1
 267 0043 01        		.byte	0x1
 268 0044 02        		.byte	0x2
 269 0045 0D        		.byte	0xd
 270 0046 0000 0050 		.long	0x50
 271 004a 0000 0050 		.long	0x50
 272 004e 0A        		.uleb128 0xa
 273 004f 00        		.byte	0
 274 0050 04        		.uleb128 0x4
 275 0051 06        		.byte	0x6
 276 0052 0000 0000 		.long	.LASF3
 277 0056 0B        		.uleb128 0xb
 278 0057 0000 0000 		.long	.LASF8
 279 005b 01        		.byte	0x1
 280 005c 28        		.byte	0x28
 281 005d 05        		.byte	0x5
 282 005e 0000 00D0 		.long	0xd0
 283 0062 0000 0000 		.long	.LFB1
 284 0066 0000 0056 		.long	.LFE1-.LFB1
 285 006a 01        		.uleb128 0x1
 286 006b 9C        		.byte	0x9c
 287 006c 0000 00D0 		.long	0xd0
 288 0070 02        		.uleb128 0x2
 289 0071 6664 00   		.string	"fd"
 290 0074 28        		.byte	0x28
 291 0075 10        		.byte	0x10
 292 0076 0000 00D0 		.long	0xd0
 293 007a 02        		.uleb128 0x2
 294 007b 91        		.byte	0x91
 295 007c 00        		.sleb128 0
 296 007d 02        		.uleb128 0x2
 297 007e 6275 6600 		.string	"buf"
 298 0082 28        		.byte	0x28
 299 0083 1A        		.byte	0x1a
 300 0084 0000 00D7 		.long	0xd7
 301 0088 02        		.uleb128 0x2
 302 0089 91        		.byte	0x91
 303 008a 04        		.sleb128 4
 304 008b 05        		.uleb128 0x5
 305 008c 0000 0000 		.long	.LASF4
 306 0090 28        		.byte	0x28
 307 0091 23        		.byte	0x23
 308 0092 0000 00D0 		.long	0xd0
 309 0096 02        		.uleb128 0x2
 310 0097 91        		.byte	0x91
 311 0098 08        		.sleb128 8
 312 0099 03        		.uleb128 0x3


 313 009a 6900      		.string	"i"
 314 009c 2A        		.byte	0x2a
 315 009d 07        		.byte	0x7
 316 009e 0000 00D0 		.long	0xd0
 317 00a2 0000 0000 		.long	.LLST2
 318 00a6 0000 0000 		.long	.LVUS2
 319 00aa 0C        		.uleb128 0xc
 320 00ab 6A00      		.string	"j"
 321 00ad 01        		.byte	0x1
 322 00ae 2A        		.byte	0x2a
 323 00af 0A        		.byte	0xa
 324 00b0 0000 00D0 		.long	0xd0
 325 00b4 01        		.uleb128 0x1
 326 00b5 0000 0000 		.long	.LVL25
 327 00b9 0000 0026 		.long	0x26
 328 00bd 01        		.uleb128 0x1
 329 00be 0000 0000 		.long	.LVL28
 330 00c2 0000 0026 		.long	0x26
 331 00c6 01        		.uleb128 0x1
 332 00c7 0000 0000 		.long	.LVL29
 333 00cb 0000 0026 		.long	0x26
 334 00cf 00        		.byte	0
 335 00d0 0D        		.uleb128 0xd
 336 00d1 04        		.byte	0x4
 337 00d2 05        		.byte	0x5
 338 00d3 696E 7400 		.string	"int"
 339 00d7 0E        		.uleb128 0xe
 340 00d8 04        		.byte	0x4
 341 00d9 0000 0050 		.long	0x50
 342 00dd 0F        		.uleb128 0xf
 343 00de 0000 0000 		.long	.LASF9
 344 00e2 01        		.byte	0x1
 345 00e3 04        		.byte	0x4
 346 00e4 05        		.byte	0x5
 347 00e5 0000 00D0 		.long	0xd0
 348 00e9 0000 0000 		.long	.LFB0
 349 00ed 0000 0090 		.long	.LFE0-.LFB0
 350 00f1 01        		.uleb128 0x1
 351 00f2 9C        		.byte	0x9c
 352 00f3 02        		.uleb128 0x2
 353 00f4 6664 00   		.string	"fd"
 354 00f7 04        		.byte	0x4
 355 00f8 0E        		.byte	0xe
 356 00f9 0000 00D0 		.long	0xd0
 357 00fd 02        		.uleb128 0x2
 358 00fe 91        		.byte	0x91
 359 00ff 00        		.sleb128 0
 360 0100 02        		.uleb128 0x2
 361 0101 6275 6600 		.string	"buf"
 362 0105 04        		.byte	0x4
 363 0106 18        		.byte	0x18
 364 0107 0000 00D7 		.long	0xd7
 365 010b 02        		.uleb128 0x2
 366 010c 91        		.byte	0x91
 367 010d 04        		.sleb128 4
 368 010e 05        		.uleb128 0x5
 369 010f 0000 0000 		.long	.LASF4


 370 0113 04        		.byte	0x4
 371 0114 21        		.byte	0x21
 372 0115 0000 00D0 		.long	0xd0
 373 0119 02        		.uleb128 0x2
 374 011a 91        		.byte	0x91
 375 011b 08        		.sleb128 8
 376 011c 03        		.uleb128 0x3
 377 011d 6300      		.string	"c"
 378 011f 06        		.byte	0x6
 379 0120 08        		.byte	0x8
 380 0121 0000 0050 		.long	0x50
 381 0125 0000 0000 		.long	.LLST0
 382 0129 0000 0000 		.long	.LVUS0
 383 012d 03        		.uleb128 0x3
 384 012e 6900      		.string	"i"
 385 0130 07        		.byte	0x7
 386 0131 08        		.byte	0x8
 387 0132 0000 00D0 		.long	0xd0
 388 0136 0000 0000 		.long	.LLST1
 389 013a 0000 0000 		.long	.LVUS1
 390 013e 01        		.uleb128 0x1
 391 013f 0000 0000 		.long	.LVL3
 392 0143 0000 003E 		.long	0x3e
 393 0147 01        		.uleb128 0x1
 394 0148 0000 0000 		.long	.LVL6
 395 014c 0000 0026 		.long	0x26
 396 0150 01        		.uleb128 0x1
 397 0151 0000 0000 		.long	.LVL11
 398 0155 0000 0026 		.long	0x26
 399 0159 01        		.uleb128 0x1
 400 015a 0000 0000 		.long	.LVL12
 401 015e 0000 0026 		.long	0x26
 402 0162 01        		.uleb128 0x1
 403 0163 0000 0000 		.long	.LVL17
 404 0167 0000 0026 		.long	0x26
 405 016b 01        		.uleb128 0x1
 406 016c 0000 0000 		.long	.LVL18
 407 0170 0000 0026 		.long	0x26
 408 0174 01        		.uleb128 0x1
 409 0175 0000 0000 		.long	.LVL19
 410 0179 0000 0026 		.long	0x26
 411 017d 00        		.byte	0
 412 017e 00        		.byte	0
 413               		.section	.debug_abbrev,"",@progbits
 414               	.Ldebug_abbrev0:
 415 0000 01        		.uleb128 0x1
 416 0001 48        		.uleb128 0x48
 417 0002 00        		.byte	0
 418 0003 7D        		.uleb128 0x7d
 419 0004 01        		.uleb128 0x1
 420 0005 7F        		.uleb128 0x7f
 421 0006 13        		.uleb128 0x13
 422 0007 00        		.byte	0
 423 0008 00        		.byte	0
 424 0009 02        		.uleb128 0x2
 425 000a 05        		.uleb128 0x5
 426 000b 00        		.byte	0


 427 000c 03        		.uleb128 0x3
 428 000d 08        		.uleb128 0x8
 429 000e 3A        		.uleb128 0x3a
 430 000f 21        		.uleb128 0x21
 431 0010 01        		.sleb128 1
 432 0011 3B        		.uleb128 0x3b
 433 0012 0B        		.uleb128 0xb
 434 0013 39        		.uleb128 0x39
 435 0014 0B        		.uleb128 0xb
 436 0015 49        		.uleb128 0x49
 437 0016 13        		.uleb128 0x13
 438 0017 02        		.uleb128 0x2
 439 0018 18        		.uleb128 0x18
 440 0019 00        		.byte	0
 441 001a 00        		.byte	0
 442 001b 03        		.uleb128 0x3
 443 001c 34        		.uleb128 0x34
 444 001d 00        		.byte	0
 445 001e 03        		.uleb128 0x3
 446 001f 08        		.uleb128 0x8
 447 0020 3A        		.uleb128 0x3a
 448 0021 21        		.uleb128 0x21
 449 0022 01        		.sleb128 1
 450 0023 3B        		.uleb128 0x3b
 451 0024 0B        		.uleb128 0xb
 452 0025 39        		.uleb128 0x39
 453 0026 0B        		.uleb128 0xb
 454 0027 49        		.uleb128 0x49
 455 0028 13        		.uleb128 0x13
 456 0029 02        		.uleb128 0x2
 457 002a 17        		.uleb128 0x17
 458 002b B742      		.uleb128 0x2137
 459 002d 17        		.uleb128 0x17
 460 002e 00        		.byte	0
 461 002f 00        		.byte	0
 462 0030 04        		.uleb128 0x4
 463 0031 24        		.uleb128 0x24
 464 0032 00        		.byte	0
 465 0033 0B        		.uleb128 0xb
 466 0034 21        		.uleb128 0x21
 467 0035 01        		.sleb128 1
 468 0036 3E        		.uleb128 0x3e
 469 0037 0B        		.uleb128 0xb
 470 0038 03        		.uleb128 0x3
 471 0039 0E        		.uleb128 0xe
 472 003a 00        		.byte	0
 473 003b 00        		.byte	0
 474 003c 05        		.uleb128 0x5
 475 003d 05        		.uleb128 0x5
 476 003e 00        		.byte	0
 477 003f 03        		.uleb128 0x3
 478 0040 0E        		.uleb128 0xe
 479 0041 3A        		.uleb128 0x3a
 480 0042 21        		.uleb128 0x21
 481 0043 01        		.sleb128 1
 482 0044 3B        		.uleb128 0x3b
 483 0045 0B        		.uleb128 0xb


 484 0046 39        		.uleb128 0x39
 485 0047 0B        		.uleb128 0xb
 486 0048 49        		.uleb128 0x49
 487 0049 13        		.uleb128 0x13
 488 004a 02        		.uleb128 0x2
 489 004b 18        		.uleb128 0x18
 490 004c 00        		.byte	0
 491 004d 00        		.byte	0
 492 004e 06        		.uleb128 0x6
 493 004f 11        		.uleb128 0x11
 494 0050 01        		.byte	0x1
 495 0051 25        		.uleb128 0x25
 496 0052 0E        		.uleb128 0xe
 497 0053 13        		.uleb128 0x13
 498 0054 0B        		.uleb128 0xb
 499 0055 03        		.uleb128 0x3
 500 0056 0E        		.uleb128 0xe
 501 0057 1B        		.uleb128 0x1b
 502 0058 0E        		.uleb128 0xe
 503 0059 11        		.uleb128 0x11
 504 005a 01        		.uleb128 0x1
 505 005b 12        		.uleb128 0x12
 506 005c 06        		.uleb128 0x6
 507 005d 10        		.uleb128 0x10
 508 005e 17        		.uleb128 0x17
 509 005f 00        		.byte	0
 510 0060 00        		.byte	0
 511 0061 07        		.uleb128 0x7
 512 0062 2E        		.uleb128 0x2e
 513 0063 01        		.byte	0x1
 514 0064 3F        		.uleb128 0x3f
 515 0065 19        		.uleb128 0x19
 516 0066 03        		.uleb128 0x3
 517 0067 0E        		.uleb128 0xe
 518 0068 3A        		.uleb128 0x3a
 519 0069 0B        		.uleb128 0xb
 520 006a 3B        		.uleb128 0x3b
 521 006b 0B        		.uleb128 0xb
 522 006c 39        		.uleb128 0x39
 523 006d 0B        		.uleb128 0xb
 524 006e 27        		.uleb128 0x27
 525 006f 19        		.uleb128 0x19
 526 0070 3C        		.uleb128 0x3c
 527 0071 19        		.uleb128 0x19
 528 0072 01        		.uleb128 0x1
 529 0073 13        		.uleb128 0x13
 530 0074 00        		.byte	0
 531 0075 00        		.byte	0
 532 0076 08        		.uleb128 0x8
 533 0077 05        		.uleb128 0x5
 534 0078 00        		.byte	0
 535 0079 49        		.uleb128 0x49
 536 007a 13        		.uleb128 0x13
 537 007b 00        		.byte	0
 538 007c 00        		.byte	0
 539 007d 09        		.uleb128 0x9
 540 007e 2E        		.uleb128 0x2e


 541 007f 01        		.byte	0x1
 542 0080 3F        		.uleb128 0x3f
 543 0081 19        		.uleb128 0x19
 544 0082 03        		.uleb128 0x3
 545 0083 0E        		.uleb128 0xe
 546 0084 3A        		.uleb128 0x3a
 547 0085 0B        		.uleb128 0xb
 548 0086 3B        		.uleb128 0x3b
 549 0087 0B        		.uleb128 0xb
 550 0088 39        		.uleb128 0x39
 551 0089 0B        		.uleb128 0xb
 552 008a 49        		.uleb128 0x49
 553 008b 13        		.uleb128 0x13
 554 008c 3C        		.uleb128 0x3c
 555 008d 19        		.uleb128 0x19
 556 008e 01        		.uleb128 0x1
 557 008f 13        		.uleb128 0x13
 558 0090 00        		.byte	0
 559 0091 00        		.byte	0
 560 0092 0A        		.uleb128 0xa
 561 0093 18        		.uleb128 0x18
 562 0094 00        		.byte	0
 563 0095 00        		.byte	0
 564 0096 00        		.byte	0
 565 0097 0B        		.uleb128 0xb
 566 0098 2E        		.uleb128 0x2e
 567 0099 01        		.byte	0x1
 568 009a 3F        		.uleb128 0x3f
 569 009b 19        		.uleb128 0x19
 570 009c 03        		.uleb128 0x3
 571 009d 0E        		.uleb128 0xe
 572 009e 3A        		.uleb128 0x3a
 573 009f 0B        		.uleb128 0xb
 574 00a0 3B        		.uleb128 0x3b
 575 00a1 0B        		.uleb128 0xb
 576 00a2 39        		.uleb128 0x39
 577 00a3 0B        		.uleb128 0xb
 578 00a4 27        		.uleb128 0x27
 579 00a5 19        		.uleb128 0x19
 580 00a6 49        		.uleb128 0x49
 581 00a7 13        		.uleb128 0x13
 582 00a8 11        		.uleb128 0x11
 583 00a9 01        		.uleb128 0x1
 584 00aa 12        		.uleb128 0x12
 585 00ab 06        		.uleb128 0x6
 586 00ac 40        		.uleb128 0x40
 587 00ad 18        		.uleb128 0x18
 588 00ae 7A        		.uleb128 0x7a
 589 00af 19        		.uleb128 0x19
 590 00b0 01        		.uleb128 0x1
 591 00b1 13        		.uleb128 0x13
 592 00b2 00        		.byte	0
 593 00b3 00        		.byte	0
 594 00b4 0C        		.uleb128 0xc
 595 00b5 34        		.uleb128 0x34
 596 00b6 00        		.byte	0
 597 00b7 03        		.uleb128 0x3


 598 00b8 08        		.uleb128 0x8
 599 00b9 3A        		.uleb128 0x3a
 600 00ba 0B        		.uleb128 0xb
 601 00bb 3B        		.uleb128 0x3b
 602 00bc 0B        		.uleb128 0xb
 603 00bd 39        		.uleb128 0x39
 604 00be 0B        		.uleb128 0xb
 605 00bf 49        		.uleb128 0x49
 606 00c0 13        		.uleb128 0x13
 607 00c1 00        		.byte	0
 608 00c2 00        		.byte	0
 609 00c3 0D        		.uleb128 0xd
 610 00c4 24        		.uleb128 0x24
 611 00c5 00        		.byte	0
 612 00c6 0B        		.uleb128 0xb
 613 00c7 0B        		.uleb128 0xb
 614 00c8 3E        		.uleb128 0x3e
 615 00c9 0B        		.uleb128 0xb
 616 00ca 03        		.uleb128 0x3
 617 00cb 08        		.uleb128 0x8
 618 00cc 00        		.byte	0
 619 00cd 00        		.byte	0
 620 00ce 0E        		.uleb128 0xe
 621 00cf 0F        		.uleb128 0xf
 622 00d0 00        		.byte	0
 623 00d1 0B        		.uleb128 0xb
 624 00d2 0B        		.uleb128 0xb
 625 00d3 49        		.uleb128 0x49
 626 00d4 13        		.uleb128 0x13
 627 00d5 00        		.byte	0
 628 00d6 00        		.byte	0
 629 00d7 0F        		.uleb128 0xf
 630 00d8 2E        		.uleb128 0x2e
 631 00d9 01        		.byte	0x1
 632 00da 3F        		.uleb128 0x3f
 633 00db 19        		.uleb128 0x19
 634 00dc 03        		.uleb128 0x3
 635 00dd 0E        		.uleb128 0xe
 636 00de 3A        		.uleb128 0x3a
 637 00df 0B        		.uleb128 0xb
 638 00e0 3B        		.uleb128 0x3b
 639 00e1 0B        		.uleb128 0xb
 640 00e2 39        		.uleb128 0x39
 641 00e3 0B        		.uleb128 0xb
 642 00e4 27        		.uleb128 0x27
 643 00e5 19        		.uleb128 0x19
 644 00e6 49        		.uleb128 0x49
 645 00e7 13        		.uleb128 0x13
 646 00e8 11        		.uleb128 0x11
 647 00e9 01        		.uleb128 0x1
 648 00ea 12        		.uleb128 0x12
 649 00eb 06        		.uleb128 0x6
 650 00ec 40        		.uleb128 0x40
 651 00ed 18        		.uleb128 0x18
 652 00ee 7A        		.uleb128 0x7a
 653 00ef 19        		.uleb128 0x19
 654 00f0 00        		.byte	0


 655 00f1 00        		.byte	0
 656 00f2 00        		.byte	0
 657               		.section	.debug_loclists,"",@progbits
 658 0000 0000 00E3 		.long	.Ldebug_loc3-.Ldebug_loc2
 659               	.Ldebug_loc2:
 660 0004 0005      		.word	0x5
 661 0006 04        		.byte	0x4
 662 0007 00        		.byte	0
 663 0008 0000 0000 		.long	0
 664               	.Ldebug_loc0:
 665               	.LVUS2:
 666 000c 02        		.uleb128 .LVU50
 667 000d 00        		.uleb128 .LVU51
 668 000e 00        		.uleb128 .LVU51
 669 000f 00        		.uleb128 .LVU53
 670 0010 00        		.uleb128 .LVU53
 671 0011 03        		.uleb128 .LVU58
 672 0012 03        		.uleb128 .LVU58
 673 0013 00        		.uleb128 .LVU59
 674 0014 00        		.uleb128 .LVU60
 675 0015 03        		.uleb128 .LVU66
 676 0016 03        		.uleb128 .LVU66
 677 0017 00        		.uleb128 0
 678               	.LLST2:
 679 0018 04        		.byte	0x4
 680 0019 9801      		.uleb128 .LVL22-.Ltext0
 681 001b A801      		.uleb128 .LVL23-.Ltext0
 682 001d 02        		.uleb128 0x2
 683 001e 30        		.byte	0x30
 684 001f 9F        		.byte	0x9f
 685 0020 04        		.byte	0x4
 686 0021 A801      		.uleb128 .LVL23-.Ltext0
 687 0023 AA01      		.uleb128 .LVL24-.Ltext0
 688 0025 07        		.uleb128 0x7
 689 0026 7A        		.byte	0x7a
 690 0027 00        		.sleb128 0
 691 0028 91        		.byte	0x91
 692 0029 74        		.sleb128 -12
 693 002a 06        		.byte	0x6
 694 002b 1C        		.byte	0x1c
 695 002c 9F        		.byte	0x9f
 696 002d 04        		.byte	0x4
 697 002e AA01      		.uleb128 .LVL24-.Ltext0
 698 0030 BA01      		.uleb128 .LVL25-.Ltext0
 699 0032 08        		.uleb128 0x8
 700 0033 91        		.byte	0x91
 701 0034 74        		.sleb128 -12
 702 0035 06        		.byte	0x6
 703 0036 20        		.byte	0x20
 704 0037 7A        		.byte	0x7a
 705 0038 00        		.sleb128 0
 706 0039 22        		.byte	0x22
 707 003a 9F        		.byte	0x9f
 708 003b 04        		.byte	0x4
 709 003c BA01      		.uleb128 .LVL25-.Ltext0
 710 003e C001      		.uleb128 .LVL26-.Ltext0
 711 0040 07        		.uleb128 0x7


 712 0041 7A        		.byte	0x7a
 713 0042 00        		.sleb128 0
 714 0043 91        		.byte	0x91
 715 0044 74        		.sleb128 -12
 716 0045 06        		.byte	0x6
 717 0046 1C        		.byte	0x1c
 718 0047 9F        		.byte	0x9f
 719 0048 04        		.byte	0x4
 720 0049 C801      		.uleb128 .LVL27-.Ltext0
 721 004b DE01      		.uleb128 .LVL29-.Ltext0
 722 004d 08        		.uleb128 0x8
 723 004e 91        		.byte	0x91
 724 004f 74        		.sleb128 -12
 725 0050 06        		.byte	0x6
 726 0051 20        		.byte	0x20
 727 0052 7A        		.byte	0x7a
 728 0053 00        		.sleb128 0
 729 0054 22        		.byte	0x22
 730 0055 9F        		.byte	0x9f
 731 0056 04        		.byte	0x4
 732 0057 DE01      		.uleb128 .LVL29-.Ltext0
 733 0059 E601      		.uleb128 .LFE1-.Ltext0
 734 005b 07        		.uleb128 0x7
 735 005c 7A        		.byte	0x7a
 736 005d 00        		.sleb128 0
 737 005e 91        		.byte	0x91
 738 005f 74        		.sleb128 -12
 739 0060 06        		.byte	0x6
 740 0061 1C        		.byte	0x1c
 741 0062 9F        		.byte	0x9f
 742 0063 00        		.byte	0
 743               	.LVUS0:
 744 0064 00        		.uleb128 .LVU10
 745 0065 00        		.uleb128 .LVU16
 746 0066 00        		.uleb128 .LVU16
 747 0067 00        		.uleb128 .LVU24
 748 0068 00        		.uleb128 .LVU25
 749 0069 00        		.uleb128 .LVU26
 750 006a 00        		.uleb128 .LVU26
 751 006b 00        		.uleb128 .LVU34
 752 006c 00        		.uleb128 .LVU35
 753 006d 00        		.uleb128 .LVU39
 754 006e 00        		.uleb128 .LVU39
 755 006f 00        		.uleb128 0
 756               	.LLST0:
 757 0070 04        		.byte	0x4
 758 0071 22        		.uleb128 .LVL4-.Ltext0
 759 0072 36        		.uleb128 .LVL5-.Ltext0
 760 0073 01        		.uleb128 0x1
 761 0074 50        		.byte	0x50
 762 0075 04        		.byte	0x4
 763 0076 36        		.uleb128 .LVL5-.Ltext0
 764 0077 48        		.uleb128 .LVL9-.Ltext0
 765 0078 01        		.uleb128 0x1
 766 0079 52        		.byte	0x52
 767 007a 04        		.byte	0x4
 768 007b 50        		.uleb128 .LVL10-.Ltext0


 769 007c 55        		.uleb128 .LVL11-1-.Ltext0
 770 007d 01        		.uleb128 0x1
 771 007e 50        		.byte	0x50
 772 007f 04        		.byte	0x4
 773 0080 55        		.uleb128 .LVL11-1-.Ltext0
 774 0081 6C        		.uleb128 .LVL14-.Ltext0
 775 0082 01        		.uleb128 0x1
 776 0083 52        		.byte	0x52
 777 0084 04        		.byte	0x4
 778 0085 6E        		.uleb128 .LVL15-.Ltext0
 779 0086 79        		.uleb128 .LVL17-1-.Ltext0
 780 0087 01        		.uleb128 0x1
 781 0088 50        		.byte	0x50
 782 0089 04        		.byte	0x4
 783 008a 79        		.uleb128 .LVL17-1-.Ltext0
 784 008b 9001      		.uleb128 .LFE0-.Ltext0
 785 008d 01        		.uleb128 0x1
 786 008e 52        		.byte	0x52
 787 008f 00        		.byte	0
 788               	.LVUS1:
 789 0090 03        		.uleb128 .LVU5
 790 0091 00        		.uleb128 .LVU8
 791 0092 00        		.uleb128 .LVU8
 792 0093 00        		.uleb128 .LVU21
 793 0094 00        		.uleb128 .LVU21
 794 0095 00        		.uleb128 .LVU22
 795 0096 00        		.uleb128 .LVU25
 796 0097 00        		.uleb128 .LVU32
 797 0098 00        		.uleb128 .LVU32
 798 0099 00        		.uleb128 .LVU34
 799 009a 00        		.uleb128 .LVU34
 800 009b 00        		.uleb128 .LVU35
 801 009c 00        		.uleb128 .LVU35
 802 009d 00        		.uleb128 .LVU38
 803 009e 00        		.uleb128 .LVU38
 804 009f 01        		.uleb128 .LVU42
 805 00a0 01        		.uleb128 .LVU42
 806 00a1 02        		.uleb128 .LVU43
 807 00a2 02        		.uleb128 .LVU43
 808 00a3 00        		.uleb128 .LVU44
 809               	.LLST1:
 810 00a4 04        		.byte	0x4
 811 00a5 0C        		.uleb128 .LVL1-.Ltext0
 812 00a6 1E        		.uleb128 .LVL2-.Ltext0
 813 00a7 02        		.uleb128 0x2
 814 00a8 30        		.byte	0x30
 815 00a9 9F        		.byte	0x9f
 816 00aa 04        		.byte	0x4
 817 00ab 1E        		.uleb128 .LVL2-.Ltext0
 818 00ac 42        		.uleb128 .LVL7-.Ltext0
 819 00ad 01        		.uleb128 0x1
 820 00ae 53        		.byte	0x53
 821 00af 04        		.byte	0x4
 822 00b0 42        		.uleb128 .LVL7-.Ltext0
 823 00b1 44        		.uleb128 .LVL8-.Ltext0
 824 00b2 03        		.uleb128 0x3
 825 00b3 73        		.byte	0x73


 826 00b4 7F        		.sleb128 -1
 827 00b5 9F        		.byte	0x9f
 828 00b6 04        		.byte	0x4
 829 00b7 50        		.uleb128 .LVL10-.Ltext0
 830 00b8 64        		.uleb128 .LVL13-.Ltext0
 831 00b9 01        		.uleb128 0x1
 832 00ba 53        		.byte	0x53
 833 00bb 04        		.byte	0x4
 834 00bc 64        		.uleb128 .LVL13-.Ltext0
 835 00bd 6C        		.uleb128 .LVL14-.Ltext0
 836 00be 03        		.uleb128 0x3
 837 00bf 73        		.byte	0x73
 838 00c0 7F        		.sleb128 -1
 839 00c1 9F        		.byte	0x9f
 840 00c2 04        		.byte	0x4
 841 00c3 6C        		.uleb128 .LVL14-.Ltext0
 842 00c4 6E        		.uleb128 .LVL15-.Ltext0
 843 00c5 03        		.uleb128 0x3
 844 00c6 70        		.byte	0x70
 845 00c7 7F        		.sleb128 -1
 846 00c8 9F        		.byte	0x9f
 847 00c9 04        		.byte	0x4
 848 00ca 6E        		.uleb128 .LVL15-.Ltext0
 849 00cb 74        		.uleb128 .LVL16-.Ltext0
 850 00cc 01        		.uleb128 0x1
 851 00cd 53        		.byte	0x53
 852 00ce 04        		.byte	0x4
 853 00cf 74        		.uleb128 .LVL16-.Ltext0
 854 00d0 8601      		.uleb128 .LVL19-.Ltext0
 855 00d2 03        		.uleb128 0x3
 856 00d3 73        		.byte	0x73
 857 00d4 01        		.sleb128 1
 858 00d5 9F        		.byte	0x9f
 859 00d6 04        		.byte	0x4
 860 00d7 8601      		.uleb128 .LVL19-.Ltext0
 861 00d9 8601      		.uleb128 .LVL19-.Ltext0
 862 00db 01        		.uleb128 0x1
 863 00dc 53        		.byte	0x53
 864 00dd 04        		.byte	0x4
 865 00de 8601      		.uleb128 .LVL19-.Ltext0
 866 00e0 8A01      		.uleb128 .LVL20-.Ltext0
 867 00e2 03        		.uleb128 0x3
 868 00e3 73        		.byte	0x73
 869 00e4 7F        		.sleb128 -1
 870 00e5 9F        		.byte	0x9f
 871 00e6 00        		.byte	0
 872               	.Ldebug_loc3:
 873               		.section	.debug_aranges,"",@progbits
 874 0000 0000 001C 		.long	0x1c
 875 0004 0002      		.word	0x2
 876 0006 0000 0000 		.long	.Ldebug_info0
 877 000a 04        		.byte	0x4
 878 000b 00        		.byte	0
 879 000c 0000      		.word	0
 880 000e 0000      		.word	0
 881 0010 0000 0000 		.long	.Ltext0
 882 0014 0000 00E6 		.long	.Letext0-.Ltext0


 883 0018 0000 0000 		.long	0
 884 001c 0000 0000 		.long	0
 885               		.section	.debug_line,"",@progbits
 886               	.Ldebug_line0:
 887 0000 0000 0114 		.section	.debug_str,"MS",@progbits,1
 887      0003 0000 
 887      0020 0201 
 887      FB0E 0D00 
 887      0101 0101 
 888               	.LASF0:
 889 0000 6F75 7462 		.string	"outbyte"
 889      7974 6500 
 890               	.LASF4:
 891 0008 6E62 7974 		.string	"nbytes"
 891      6573 00
 892               	.LASF9:
 893 000f 7265 6164 		.string	"read"
 893      00
 894               	.LASF3:
 895 0014 6368 6172 		.string	"char"
 895      00
 896               	.LASF6:
 897 0019 6373 7973 		.string	"csys68k.c"
 897      3638 6B2E 
 897      6300 
 898               	.LASF5:
 899 0023 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 899      4331 3720 
 899      3131 2E34 
 899      2E30 202D 
 899      6D63 7075 
 900               	.LASF2:
 901 0067 756E 7369 		.string	"unsigned char"
 901      676E 6564 
 901      2063 6861 
 901      7200 
 902               	.LASF8:
 903 0075 7772 6974 		.string	"write"
 903      6500 
 904               	.LASF7:
 905 007b 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/2_multitask-curnel_compiled"
 905      652F 7374 
 905      7564 656E 
 905      7473 2F35 
 905      3233 3335 
 906               	.LASF1:
 907 00be 696E 6279 		.string	"inbyte"
 907      7465 00
 908               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	
  44               	***************
  45               	**システムコール番号
  46               	***************
  47               	.equ SYSCALL_NUM_GETSTRING,     1
  48               	.equ SYSCALL_NUM_PUTSTRING,     2
  49               	.equ SYSCALL_NUM_RESET_TIMER,   3
  50               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global inbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	inbyte:


   8 0000 48E7 7080 		movem.l %a0/%d1-%d3, -(%sp)
   9 0004 41F9 0000 		lea.l inbyte_BUF, %a0
   9      0000 
  10               	inbyte_loop:
  11 000a 7001      		move.l #SYSCALL_NUM_GETSTRING, %d0
  12 000c 7200      		move.l #0,  %d1       | ch    = 0
  13 000e 2408      		move.l %a0, %d2       | p    = #inbyte_BUF
  14 0010 7601      		move.l #1, %d3        | size = 1
  15 0012 4E40      		trap #0
  16               		
  17 0014 0C80 0000 		cmpi.l #0, %d0
  17      0000 
  18 001a 6700 FFEE 		beq inbyte_loop       | 失敗したら戻る
  19 001e 1010      		move.b (%a0), %d0     | 一時保存→出力としてレジスタへ
  20 0020 4CDF 010E 		movem.l (%sp)+, %a0/%d1-%d3
  21 0024 4E75      		rts
  22               		
  23               	.section .bss
  24               	.even
  25               	
  26               	inbyte_BUF:
  27 0000 00        		.ds.b 1 /*一時的に保存する領域*/
  28 0001 00        		.even




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	
  44               	***************
  45               	**システムコール番号
  46               	***************
  47               	.equ SYSCALL_NUM_GETSTRING,     1
  48               	.equ SYSCALL_NUM_PUTSTRING,     2
  49               	.equ SYSCALL_NUM_RESET_TIMER,   3
  50               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.section .text
   3               	
   4               	.global swtch
   5               	.global pv_handler
   6               	.global init_timer
   7               	.global first_task


   8               	.global P
   9               	.global V
  10               	
  11               	**齊藤　作成**
  12               	********************************************************************************************
  13               	**【機能】
  14               	**Pシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  15               	**Cプログラムから引数（セマフォID）付きで呼び出される
  16               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  17               	********************************************************************************************
  18               	**【レジスタ用途】
  19               	**d0:p_body()のIDとして０を代入
  20               	**d1:セマフォIDを代入
  21               	*********************************************************************************************
  22               	
  23               	.text
  24               	.even
  25               	P:	
  26 0000 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	|レジスタ退避	
  27 0004 7000      		move.l #0,%d0				|d0 = 0
  28 0006 224F      		movea.l	%sp, %a1			|スタックポインタをa1にコピー
  29 0008 7410      		move.l	#16,   %d2			|a1,d1,d2,PC各4ずつ
  30 000a D3C2      		adda.l	%d2,   %a1			|スタックポインタにプラス16
  31 000c 2211      		move.l	(%a1), %d1			|↑その位置の中身(セマフォID)をd1にコピー
  32 000e 4E41      		trap #1						|pv_handlerを呼び出す
  33 0010 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	|レジスタ復帰
  34 0014 4E75      		rts
  35               		
  36               	**齊藤　作成**
  37               	********************************************************************************************
  38               	**【機能】
  39               	**Vシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  40               	**Cプログラムから引数（セマフォID）付きで呼び出される
  41               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  42               	********************************************************************************************
  43               	**【レジスタ用途】
  44               	**d0:v_body()のIDとして1を代入
  45               	**d1:セマフォIDを代入
  46               	*********************************************************************************************
  47               	
  48               	.text
  49               	.even
  50               	V:	
  51 0016 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	| レジスタ退避	
  52 001a 7001      		move.l #1,%d0				| d0 = 1
  53 001c 224F      		movea.l	%sp, %a1			| スタックポインタをa1にコピー
  54 001e 7410      		move.l	#16,   %d2			| a1,d1,d2,PC各4ずつ
  55 0020 D3C2      		adda.l	%d2,   %a1			| スタックポインタにプラス16
  56 0022 2211      		move.l	(%a1), %d1			| ↑その位置の中身(セマフォID)をd1にコピー
  57 0024 4E41      		trap #1						| pv_handlerを呼び出す
  58 0026 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	| レジスタ復帰
  59 002a 4E75      		rts
  60               		
  61               	**齊藤作成**
  62               	*****************************************
  63               	**☆P.sとV.s中のtrap#1命令で呼び出される☆
  64               	*****************************************


  65               	**【機能】
  66               	**タスクの切り換え…割り込み処理ルーチンとして作成．
  67               	**関数として呼び出されることはあってはならないが，
  68               	**Cプログラムから関数として見えるようにしておくと，Cプログラム内で
  69               	**参照することができるので，例外ベクタに登録するのが容易である．
  70               	***************************************************************************************************
  71               	**【レジスタ用途】
  72               	**d0:0ならp_body()、1ならv_body()
  73               	**d1:セマフォID
  74               	**両関数とも引数にセマフォIDを取るので、これをスタックに積んだ後サ
  75               	*********************************************************************************************
  76               	.extern p_body
  77               	.extern v_body
  78               	
  79               	.text
  80               	.even
  81               	pv_handler:
  82 002c 40E7      		move.w	%SR, -(%sp)	|現走行レベルの退避	
  83 002e 48E7 8080 		movem.l %d0/%a0, -(%sp)	|レジスタ退避
  84 0032 46FC 2700 		move.w	#0x2700, %SR	|割り込み禁止 走行レベル７
  85               		/*d0の値チェック*/
  86 0036 0C80 0000 		cmp.l #0, %d0
  86      0000 
  87 003c 6700 000C 	    beq SYSCALL_p
  88 0040 0C80 0000 		cmp.l #1, %d0
  88      0001 
  89 0046 6700 000C 		beq SYSCALL_v
  90               	SYSCALL_p:
  91 004a 203C 0000 		move.l #p_body, %d0
  91      0000 
  92 0050 6000 000C 		bra JUMP_pv
  93               	SYSCALL_v:
  94 0054 203C 0000 		move.l #v_body, %d0
  94      0000 
  95 005a 6000 0002 		bra JUMP_pv
  96               	JUMP_pv:	
  97 005e 2040      		movea.l %d0, %a0	
  98 0060 2F01      		move.l %d1,-(%sp)	|セマフォIDをスタックに積む
  99 0062 4E90      		jsr (%a0)			|p_body or v_body にジャンプ
 100               	
 101               	pv_FINISH:
 102 0064 588F      		addq.l #4,%sp		|引数として使われて削除されているのでスタックポインタを
 103 0066 4CDF 0101 		movem.l (%sp)+,%d0/%a0 	|レジスタ復帰
 104 006a 46DF      		move.w	(%sp)+, %SR	|旧走行レベルの回復
 105 006c 4E73      		rte
 106               		
 107               	.extern task_tab
 108               	.extern curr_task
 109               	.extern next_task
 110               	
 111               	
 112               	swtch:
 113               	*********
 114               	***1. SR をスタックに積んで，RTE で復帰できるようにする．
 115               	***2. 実行中のタスクのレジスタの退避：
 116               	***D0〜D7，A0〜A6，USP をタスクのスーパバイザスタックに積む．
 117               	***3. SSP の保存:


 118               	***このタスクの TCB の位置を求め， SSP を正しい位置に記録する．
 119               	***4. curr task を変更:
 120               	***curr task に next task を代入する．swtch の呼び出し前にスケジューラ sched 
 121               	***ているため，next task には次に実行するタスク ID がセットされている．
 122               	***5. 次のタスクの SSP の読み出し：
 123               	***新たな curr task の値を元に TCB の位置を割り出して，その中に記録され
 124               	***値を回復する．これにより，スーパバイザスタックが次のタスクのもの
 125               	***6. 次のタスクのレジスタの読み出し：
 126               	***切り換わったスーパバイザスタックから USP，D0〜D7，A0〜A6 の値を回復
 127               	***7. タスク切り替えをおこす:
 128               	***RTE を実行する．
 129               	*********
 130               		***1. SR をスタックに積んで，RTE で復帰できるようにする．
 131 006e 40E7      		move.w %sr, -(%sp)      		/*SRを退避*/
 132               	
 133               		***2. 実行中のタスクのレジスタの退避：
 134 0070 48E7 FFFE 		movem.l %d0-%d7/%a0-%a6, -(%sp)	/*実行中のタスクのレジスタを退避*/
 135 0074 4E6E      		move.l %USP, %a6        		/*USPをa6に転送*/
 136 0076 2F0E      		move.l %a6, -(%sp)      		/*USPを退避*/
 137               	
 138               		***3. SSP の保存:
 139 0078 7000      		move.l #0, %d0  
 140 007a 2039 0000 		move.l curr_task, %d0	/*カレントタスクのIDを転送*/
 140      0000 
 141 0080 41F9 0000 		lea.l task_tab, %a0		/*タスクコントロールブロックの先頭アドレスを転送*/
 141      0000 
 142 0086 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 143 008a D1C0      		adda.l %d0, %a0			/*カレントタスクのTCBのアドレスを求める*/
 144 008c 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 145 008e 208F      		move.l %sp, (%a0)		/*SSPを保存*/
 146               	
 147               		***4. curr task を変更:
 148 0090 43F9 0000 		lea.l curr_task, %a1    /*カレントタスクのアドレスをa1に転送*/
 148      0000 
 149 0096 22B9 0000 		move.l next_task, (%a1) /*next_taskの値をa1に格納*/
 149      0000 
 150               	
 151               		***5. 次のタスクの SSP の読み出し：
 152 009c 2039 0000 		move.l curr_task, %d0   /*カレントタスクのIDを転送*/
 152      0000 
 153 00a2 41F9 0000 		lea.l task_tab, %a0     /*タスクコントロールブロックの先頭アドレスを転送*/
 153      0000 
 154 00a8 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 155 00ac D1C0      		adda.l %d0, %a0         /*カレントタスクのTCBのアドレスを求める*/
 156 00ae 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 157 00b0 2E50      		move.l (%a0), %sp       /*SSPを回復*/
 158               	
 159               		***6. 次のタスクのレジスタの読み出し：
 160 00b2 2C5F      		move.l (%sp)+, %a6     			/*a6を復帰*/
 161 00b4 4E66      		move.l %a6, %USP        		/*USPを回復*/
 162 00b6 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6 /*全レジスタ回復*/
 163               	
 164               		***7. タスク切り替えをおこす:
 165 00ba 4E73      		rte
 166               	
 167               	.extern addq
 168               	.extern sched


 169               	.extern ready
 170               	
 171               	first_task:
 172               	************
 173               	***1. TCB 先頭番地の計算：
 174               	***curr task の TCB のアドレスを見つける．
 175               	***2. USP，SSP の値の回復：
 176               	***このタスクの TCB に記録されている SSP の値およびスーパバイザスタッ
 177               	***る USP の値を回復する．
 178               	***3. 残りの全レジスタの回復：
 179               	***スーパーバイザスタックに積まれている残り 15 本のレジスタの値を回
 180               	***4. ユーザタスクの起動：
 181               	***RTE 命令を実行する．
 182               	************
 183               		***1.TCBの先頭番地の計算
 184 00bc 7200      		move.l #0, %d1        
 185 00be 2239 0000 		move.l curr_task, %d1   /* カレントタスクのIDを転送 */
 185      0000 
 186 00c4 41F9 0000 		lea.l task_tab, %a0     /* タスクコントロールブロックの先頭アドレスを転送 *
 186      0000 
 187 00ca C2FC 0014 		mulu #20, %d1           /* カレントIDを20倍 */
 188 00ce D1C1      		adda.l %d1, %a0         /* カレントタスクのTCBのアドレスを求める */
 189               	
 190               		***2. USP，SSP の値の回復：
 191 00d0 5888      		addq.l #4, %a0          /* SSPの位置を計算 */
 192 00d2 2E50      		move.l (%a0), %sp       /* SSPを回復 */
 193 00d4 2C5F      		move.l (%sp)+, %a6      /* a6を復帰 */
 194 00d6 4E66      		move.l %a6,%USP         /* USPを回復 */
 195               	
 196               		***3. 残りの全レジスタの回復：
 197               		***move.w	(%sp)+, %SR	|旧走行レベルの回復
 198 00d8 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6     /*全レジスタ回復*/
 199               	
 200               		***4. ユーザタスクの起動：
 201 00dc 13FC 0038 		move.b #'8',LED7
 201      00D0 002F 
 202 00e4 4E73      		rte     				/*ユーザタスクの起動*/
 203               	
 204               	/*
 205               	; 7. init_timer
 206               	; クロック割り込みルーチンhard_clockをベクトルテーブルに登録するルーチ
 207               	; 
 208               	; 担当：武石
 209               	*/
 210               	
 211               	init_timer:
 212 00e6 48E7 E000 	    movem.l %d0-%d2,-(%sp)
 213               	
 214 00ea 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%d0 | SYSCALL_NUM_RESET_TIMER=3
 215 00ec 4E40      		trap   #0
 216               	
 217 00ee 7004      		move.l #SYSCALL_NUM_SET_TIMER, %d0  | SYSCALL_NUM_SET_TIMER=4
 218 00f0 323C 2710 		move.w #10000, %d1                  | たいたい1秒
 219 00f4 243C 0000 		move.l #hard_clock, %d2
 219      0000 
 220 00fa 4E40      		trap #0
 221               	


 222 00fc 4CDF 0007 	    movem.l (%sp)+, %d0-%d2
 223 0100 4E75      	    rts
 224               	    
 225               	/*
 226               	; 6. hard_clock
 227               	; クロック割り込みルーチン。モニタのシステムコールTRAP #0 を利用して
 228               	; 
 229               	; 担当：武石
 230               	*/
 231               	
 232               	hard_clock:
 233               	    * 1. 実行中のタスクのレジスタの退避
 234 0102 48E7 C040 	    movem.l %d0-%d1/%a1,-(%sp)
 235               	
 236               	    * テキストp22参照
 237 0106 224F      	    movea.l	%sp, %a1
 238 0108 700C      	    move.l #12, %d0     | レジスタ3つ分
 239 010a D3C0      	    adda.l %d0, %a1     | a1 = SR
 240 010c 3211      	    move.w (%a1), %d1   | d1 = (SR)
 241 010e 0241 2000 	    andi.w #0x2000, %d1 | d1 = (SR) & 0x2000
 242 0112 0C41 2000 	    cmpi.w #0x2000, %d1 | 13bit目が1かどうか
 243 0116 6700 0020 	    beq hard_clock_end  | 13bit目が1でなければ(ユーザーモードであれば)終了
 244               	
 245               	    * 2. addq()により, curr_taskをreadyの末尾に追加.
 246 011a 2F39 0000 	    move.l curr_task, -(%sp)
 246      0000 
 247 0120 2F3C 0000 	    move.l #ready, -(%sp)
 247      0000 
 248 0126 4EB9 0000 	    jsr addq
 248      0000 
 249 012c 508F      	    add.l #8, %sp
 250               	
 251               	    * 3. schedを起動.
 252 012e 4EB9 0000 	    jsr sched
 252      0000 
 253               	
 254               	    * 4. swtchを起動.
 255 0134 4EBA FF38 	    jsr swtch
 256               	
 257               	hard_clock_end:
 258               	    * 5. レジスタの復帰.
 259 0138 4CDF 0203 	    movem.l (%sp)+, %d0-%d1/%a1 
 260 013c 4E75      	    rts




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	init_kernel
   8               		.type	init_kernel, @function
   9               	init_kernel:
  10               	.LFB3:
  11               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include "mtk_c.h"
   3:mtk_c.c       **** 
   4:mtk_c.c       **** SEMAPHORE_TYPE 	semaphore[NUMSEMAPHORE];	// セマフォの配列
   5:mtk_c.c       **** TCB_TYPE 	    task_tab[NUMTASK + 1];		// タスクコントロールブロックの配列
   6:mtk_c.c       **** STACK_TYPE	    stacks[NUMTASK];		    // タスクスタックの配列
   7:mtk_c.c       **** 
   8:mtk_c.c       **** TASK_ID_TYPE	curr_task;	                // 現在実行中のタスクID
   9:mtk_c.c       **** TASK_ID_TYPE	new_task;	                // 現在登録作業中のタスクID
  10:mtk_c.c       **** TASK_ID_TYPE	next_task;	                // 次に実行するタスクID
  11:mtk_c.c       **** TASK_ID_TYPE	ready;		                // 実行待ちタスクのキュー
  12:mtk_c.c       **** 
  13:mtk_c.c       **** /************************************************************************************
  14:mtk_c.c       **** **カーネルの初期化 init kernel()
  15:mtk_c.c       **** **引数なし．以下のような処理を行う．
  16:mtk_c.c       **** **1. TCB 配列の初期化：すべて空タスクとする
  17:mtk_c.c       **** **2. ready キューの初期化：空（タスク ID=0）とする
  18:mtk_c.c       **** **3. P・V システムコールの割り込み処理ルーチン (pv handler) を TRAP #1 の割
  19:mtk_c.c       **** **4. セマフォの値を初期化する
  20:mtk_c.c       **** ************************************************************************************/
  21:mtk_c.c       **** void init_kernel(){
  12               		.loc 1 21 19 view -0
  13               		.cfi_startproc
  22:mtk_c.c       **** 	int i;
  14               		.loc 1 22 2 view .LVU1
  23:mtk_c.c       **** 	
  24:mtk_c.c       **** 	for(i = 0; i < NUMTASK+1; i++){ 	/* TCB配列の初期化 */	
  15               		.loc 1 24 2 view .LVU2
  16               	.LVL0:
  17               		.loc 1 24 15 view .LVU3
  18 0000 41F9 0000 		lea task_tab,%a0
  18      0000 
  19 0006 203C 0000 		move.l #task_tab+120,%d0
  19      0000 
  20               	.LVL1:
  21               	.L2:
  25:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  22               		.loc 1 25 3 discriminator 3 view .LVU4
  23               		.loc 1 25 25 is_stmt 0 discriminator 3 view .LVU5
  24 000c 4290      		clr.l (%a0)
  26:mtk_c.c       **** 		task_tab[i].stack_ptr = NULL;
  25               		.loc 1 26 3 is_stmt 1 discriminator 3 view .LVU6
  26               		.loc 1 26 25 is_stmt 0 discriminator 3 view .LVU7
  27 000e 42A8 0004 		clr.l 4(%a0)
  27:mtk_c.c       **** 		task_tab[i].priority = 0;
  28               		.loc 1 27 3 is_stmt 1 discriminator 3 view .LVU8


  29               		.loc 1 27 24 is_stmt 0 discriminator 3 view .LVU9
  30 0012 42A8 0008 		clr.l 8(%a0)
  28:mtk_c.c       **** 		task_tab[i].status = UNDEFINED;
  31               		.loc 1 28 3 is_stmt 1 discriminator 3 view .LVU10
  32               		.loc 1 28 22 is_stmt 0 discriminator 3 view .LVU11
  33 0016 42A8 000C 		clr.l 12(%a0)
  29:mtk_c.c       **** 		task_tab[i].next = NULLTASKID;							
  34               		.loc 1 29 3 is_stmt 1 discriminator 3 view .LVU12
  35               		.loc 1 29 20 is_stmt 0 discriminator 3 view .LVU13
  36 001a 42A8 0010 		clr.l 16(%a0)
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  37               		.loc 1 24 29 is_stmt 1 discriminator 3 view .LVU14
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  38               		.loc 1 24 15 discriminator 3 view .LVU15
  39 001e 41E8 0014 		lea (20,%a0),%a0
  40 0022 B1C0      		cmp.l %d0,%a0
  41 0024 66E6      		jne .L2
  30:mtk_c.c       **** 	}
  31:mtk_c.c       **** 
  32:mtk_c.c       **** 	ready = NULLTASKID;	/* readyキューの初期化 */					
  42               		.loc 1 32 2 view .LVU16
  43               		.loc 1 32 8 is_stmt 0 view .LVU17
  44 0026 42B9 0000 		clr.l ready
  44      0000 
  33:mtk_c.c       **** 
  34:mtk_c.c       **** 	*(int*) 0x0084 = (int)pv_handler; /* pv_handlerをTRAP#1の割り込みベクタに登録 */
  45               		.loc 1 34 2 is_stmt 1 view .LVU18
  46               		.loc 1 34 17 is_stmt 0 view .LVU19
  47 002c 21FC 0000 		move.l #pv_handler,132.w
  47      0000 0084 
  35:mtk_c.c       **** 
  36:mtk_c.c       ****     for(i = 0; i < NUMSEMAPHORE; i++){  /* セマフォの値を初期化 */
  48               		.loc 1 36 5 is_stmt 1 view .LVU20
  49               	.LVL2:
  50               		.loc 1 36 18 view .LVU21
  37:mtk_c.c       ****         semaphore[i].count = 1;
  51               		.loc 1 37 9 view .LVU22
  52               		.loc 1 37 28 is_stmt 0 view .LVU23
  53 0034 7001      		moveq #1,%d0
  54 0036 23C0 0000 		move.l %d0,semaphore
  54      0000 
  38:mtk_c.c       ****         semaphore[i].task_list = NULLTASKID;
  55               		.loc 1 38 9 is_stmt 1 view .LVU24
  56               		.loc 1 38 32 is_stmt 0 view .LVU25
  57 003c 42B9 0000 		clr.l semaphore+4
  57      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  58               		.loc 1 36 35 is_stmt 1 view .LVU26
  59               	.LVL3:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  60               		.loc 1 36 18 view .LVU27
  37:mtk_c.c       ****         semaphore[i].count = 1;
  61               		.loc 1 37 9 view .LVU28
  37:mtk_c.c       ****         semaphore[i].count = 1;
  62               		.loc 1 37 28 is_stmt 0 view .LVU29
  63 0042 23C0 0000 		move.l %d0,semaphore+8
  63      0000 


  64               		.loc 1 38 9 is_stmt 1 view .LVU30
  65               		.loc 1 38 32 is_stmt 0 view .LVU31
  66 0048 42B9 0000 		clr.l semaphore+12
  66      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  67               		.loc 1 36 35 is_stmt 1 view .LVU32
  68               	.LVL4:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  69               		.loc 1 36 18 view .LVU33
  37:mtk_c.c       ****         semaphore[i].count = 1;
  70               		.loc 1 37 9 view .LVU34
  37:mtk_c.c       ****         semaphore[i].count = 1;
  71               		.loc 1 37 28 is_stmt 0 view .LVU35
  72 004e 23C0 0000 		move.l %d0,semaphore+16
  72      0000 
  73               		.loc 1 38 9 is_stmt 1 view .LVU36
  74               		.loc 1 38 32 is_stmt 0 view .LVU37
  75 0054 42B9 0000 		clr.l semaphore+20
  75      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  76               		.loc 1 36 35 is_stmt 1 view .LVU38
  77               	.LVL5:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  78               		.loc 1 36 18 view .LVU39
  39:mtk_c.c       ****     }
  40:mtk_c.c       **** }
  79               		.loc 1 40 1 is_stmt 0 view .LVU40
  80 005a 4E75      		rts
  81               		.cfi_endproc
  82               	.LFE3:
  83               		.size	init_kernel, .-init_kernel
  84               		.align	2
  85               		.globl	set_task
  86               		.type	set_task, @function
  87               	set_task:
  88               	.LVL6:
  89               	.LFB4:
  41:mtk_c.c       **** 
  42:mtk_c.c       **** /************************************************************************************
  43:mtk_c.c       **** **ユーザタスクの初期化と登録 set task()
  44:mtk_c.c       **** **引数にはユーザタスク関数へのポインタ（タスク関数の先頭番地）を取
  45:mtk_c.c       **** **1. タスク ID の決定：
  46:mtk_c.c       **** **task tab[] の中に空きスロットを見つけ (0 番は除く)，その ID を new task に
  47:mtk_c.c       **** **2. TCB の更新：
  48:mtk_c.c       **** **上で見つけた TCB に，task addr，status を登録する．
  49:mtk_c.c       **** **3. スタックの初期化：
  50:mtk_c.c       **** **関数 init stack() を起動する．関数 init stack() の戻り値を TCB の stack ptr に
  51:mtk_c.c       **** **する．
  52:mtk_c.c       **** **4. キューへの登録：
  53:mtk_c.c       **** **ready キューに new task を登録する．
  54:mtk_c.c       **** **Cでは，配列の名前はその配列のアドレスを意味する．TCB へ登録するス
  55:mtk_c.c       **** **これらの機能を用いて表すことができる．
  56:mtk_c.c       **** ************************************************************************************/
  57:mtk_c.c       **** void set_task(void (*usertask_ptr)()){
  90               		.loc 1 57 38 is_stmt 1 view -0
  91               		.cfi_startproc
  92               		.loc 1 57 38 is_stmt 0 view .LVU42


  93 005c 2F0A      		move.l %a2,-(%sp)
  94               		.cfi_def_cfa_offset 8
  95               		.cfi_offset 10, -8
  96 005e 2F02      		move.l %d2,-(%sp)
  97               		.cfi_def_cfa_offset 12
  98               		.cfi_offset 2, -12
  58:mtk_c.c       ****     TASK_ID_TYPE i;
  99               		.loc 1 58 5 is_stmt 1 view .LVU43
  59:mtk_c.c       ****     
  60:mtk_c.c       ****     for(i = 1; i < NUMTASK+1; i++){
 100               		.loc 1 60 5 view .LVU44
 101               	.LVL7:
 102               		.loc 1 60 18 view .LVU45
 103 0060 41F9 0000 		lea task_tab+32,%a0
 103      0000 
 104               		.loc 1 60 11 is_stmt 0 view .LVU46
 105 0066 7201      		moveq #1,%d1
 106               	.LVL8:
 107               	.L12:
  61:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 108               		.loc 1 61 9 is_stmt 1 view .LVU47
 109               		.loc 1 61 11 is_stmt 0 view .LVU48
 110 0068 70FD      		moveq #-3,%d0
 111 006a C090      		and.l (%a0),%d0
 112 006c 6712      		jeq .L18
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 113               		.loc 1 60 32 is_stmt 1 discriminator 2 view .LVU49
 114 006e 5281      		addq.l #1,%d1
 115               	.LVL9:
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 116               		.loc 1 60 18 discriminator 2 view .LVU50
 117 0070 41E8 0014 		lea (20,%a0),%a0
 118 0074 7006      		moveq #6,%d0
 119 0076 B081      		cmp.l %d1,%d0
 120 0078 66EE      		jne .L12
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
  63:mtk_c.c       ****             task_tab[i].task_addr = usertask_ptr; /* TCB の更新 */
  64:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
  65:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
  66:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
  67:mtk_c.c       ****             break;
  68:mtk_c.c       ****         }
  69:mtk_c.c       ****     }
  70:mtk_c.c       **** }
 121               		.loc 1 70 1 is_stmt 0 view .LVU51
 122 007a 241F      		move.l (%sp)+,%d2
 123 007c 245F      		move.l (%sp)+,%a2
 124 007e 4E75      		rts
 125               	.L18:
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 126               		.loc 1 62 13 is_stmt 1 view .LVU52
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 127               		.loc 1 62 22 is_stmt 0 view .LVU53
 128 0080 23C1 0000 		move.l %d1,new_task
 128      0000 
  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 129               		.loc 1 63 13 is_stmt 1 view .LVU54


  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 130               		.loc 1 63 35 is_stmt 0 view .LVU55
 131 0086 43F9 0000 		lea task_tab,%a1
 131      0000 
 132 008c 2041      		move.l %d1,%a0
 133 008e D1C1      		add.l %d1,%a0
 134 0090 D1C8      		add.l %a0,%a0
 135 0092 D1C1      		add.l %d1,%a0
 136 0094 D1C8      		add.l %a0,%a0
 137 0096 D1C8      		add.l %a0,%a0
 138 0098 23AF 000C 		move.l 12(%sp),(%a1,%a0.l)
 138      8800 
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 139               		.loc 1 64 13 is_stmt 1 view .LVU56
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 140               		.loc 1 64 32 is_stmt 0 view .LVU57
 141 009e 41F1 8800 		lea (%a1,%a0.l),%a0
 142 00a2 7001      		moveq #1,%d0
 143 00a4 2140 000C 		move.l %d0,12(%a0)
  65:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
 144               		.loc 1 65 13 is_stmt 1 view .LVU58
 145               	.LVL10:
 146               	.LBB22:
 147               	.LBI22:
  71:mtk_c.c       **** 
  72:mtk_c.c       **** /***************************************************************************************
  73:mtk_c.c       **** **ユーザタスク用のスタックの初期化 init stack()
  74:mtk_c.c       **** **タスク ID を引数としてとる．戻り値に初期化が完了した時点でのユーザ
  75:mtk_c.c       **** **アドレス (void * 型) を返す．引数を id とすると，以下の処理を行なう．
  76:mtk_c.c       **** **1. stacks[id - 1] の sstack を図 2.8 のように設定する．図中の「initial(初期)PC
  77:mtk_c.c       **** **はタスクの実行開始アドレス task tab[id].task addr を設定する．「initial SR」
  78:mtk_c.c       **** **は 0x0000 を，15×4 バイト分の領域を飛ばして，「initial USP」の部分はユー
  79:mtk_c.c       **** **プ stacks[id - 1].ustack[STKSIZE] を設定する．
  80:mtk_c.c       **** **2. 図 2.8 の (*) のアドレスを戻り値として返す．
  81:mtk_c.c       **** **なお，int 型へのポインタ ssp を宣言しておくと，ssp の値が現在のスーパ
  82:mtk_c.c       **** **トップを指しているならば，4 バイトの値をプッシュすることは，*(--ssp)
  83:mtk_c.c       **** **これを利用すると，上記の操作は簡単である．また，2 バイトの値をプ
  84:mtk_c.c       **** **short int 型へのポインタを宣言しておき，これを利用すると良い．
  85:mtk_c.c       **** *****************************************************************************************/
  86:mtk_c.c       **** void *init_stack(TASK_ID_TYPE id){
 148               		.loc 1 86 7 view .LVU59
 149               	.LBB23:
  87:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 150               		.loc 1 87 5 view .LVU60
 151 00a8 2001      		move.l %d1,%d0
 152 00aa 740B      		moveq #11,%d2
 153 00ac E5A8      		lsl.l %d2,%d0
 154               		.loc 1 87 10 is_stmt 0 view .LVU61
 155 00ae 2440      		move.l %d0,%a2
 156 00b0 D5FC 0000 		add.l #stacks,%a2
 156      0000 
 157               	.LVL11:
  88:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 158               		.loc 1 88 5 is_stmt 1 view .LVU62
 159               		.loc 1 88 18 is_stmt 0 view .LVU63
 160 00b6 256F 000C 		move.l 12(%sp),-4(%a2)
 160      FFFC 


  89:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 161               		.loc 1 89 5 is_stmt 1 view .LVU64
 162               	.LVL12:
  90:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 163               		.loc 1 90 5 view .LVU65
 164               		.loc 1 90 20 is_stmt 0 view .LVU66
 165 00bc 426A FFFA 		clr.w -6(%a2)
  91:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 166               		.loc 1 91 5 is_stmt 1 view .LVU67
 167               	.LVL13:
  92:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 168               		.loc 1 92 5 view .LVU68
  93:mtk_c.c       ****     /*修正*/
  94:mtk_c.c       ****     *(--int_ssp) = &stacks[id-1].ustack[STKSIZE]; /* initial USPの設定 */
 169               		.loc 1 94 5 view .LVU69
 170               		.loc 1 94 20 is_stmt 0 view .LVU70
 171 00c0 0680 0000 		add.l #stacks-1024,%d0
 171      0000 
 172 00c6 2540 FFBA 		move.l %d0,-70(%a2)
  95:mtk_c.c       **** 
  96:mtk_c.c       ****     return (void*)int_ssp;
 173               		.loc 1 96 5 is_stmt 1 view .LVU71
 174               	.LVL14:
  94:mtk_c.c       **** 
 175               		.loc 1 94 18 is_stmt 0 view .LVU72
 176 00ca 45EA FFBA 		lea (-70,%a2),%a2
 177               	.LVL15:
  94:mtk_c.c       **** 
 178               		.loc 1 94 18 view .LVU73
 179 00ce 214A 0004 		move.l %a2,4(%a0)
 180               	.LBE23:
 181               	.LBE22:
  66:mtk_c.c       ****             break;
 182               		.loc 1 66 13 is_stmt 1 view .LVU74
 183               	.LVL16:
 184               	.LBB24:
 185               	.LBI24:
  97:mtk_c.c       **** }
  98:mtk_c.c       **** 
  99:mtk_c.c       **** /*********
 100:mtk_c.c       **** ***1. 最初のタスクの決定：
 101:mtk_c.c       **** ***キュー ready から removeq() によってタスクを１つ取り出し，curr task に代
 102:mtk_c.c       **** ***2. タイマの設定:
 103:mtk_c.c       **** ***関数 init timer() を呼び出し，タスクスイッチを行うためのタイマを設定
 104:mtk_c.c       **** ***3. 最初のタスクの起動：
 105:mtk_c.c       **** ***関数 first task() を起動して最初のタスクに制御を移す．これは m68k-elf-gcc
 106:mtk_c.c       **** ***によってアセンブリ言語サブルーチン first task の呼び出しに変換される
 107:mtk_c.c       **** *********/
 108:mtk_c.c       **** void begin_sch(){
 109:mtk_c.c       ****     curr_task=removeq(&ready);
 110:mtk_c.c       ****     init_timer();
 111:mtk_c.c       ****     first_task();
 112:mtk_c.c       ****     printf("hello world\n");
 113:mtk_c.c       **** }
 114:mtk_c.c       **** 
 115:mtk_c.c       **** // タスクのキューの最後尾へのTCBの追加
 116:mtk_c.c       **** void addq(TASK_ID_TYPE* que_ptr, TASK_ID_TYPE id){


 186               		.loc 1 116 6 view .LVU75
 187               	.LBB25:
 117:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 188               		.loc 1 117 2 view .LVU76
 189               		.loc 1 117 5 is_stmt 0 view .LVU77
 190 00d2 2079 0000 		move.l ready,%a0
 190      0000 
 191               		.loc 1 117 4 view .LVU78
 192 00d8 B0FC 0000 		cmp.w #0,%a0
 193 00dc 660C      		jne .L8
 194               	.LVL17:
 118:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 195               		.loc 1 118 3 is_stmt 1 view .LVU79
 196               		.loc 1 118 12 is_stmt 0 view .LVU80
 197 00de 23C1 0000 		move.l %d1,ready
 197      0000 
 198               	.LBE25:
 199               	.LBE24:
  70:mtk_c.c       **** 
 200               		.loc 1 70 1 view .LVU81
 201 00e4 241F      		move.l (%sp)+,%d2
 202 00e6 245F      		move.l (%sp)+,%a2
 203               	.LVL18:
  70:mtk_c.c       **** 
 204               		.loc 1 70 1 view .LVU82
 205 00e8 4E75      		rts
 206               	.LVL19:
 207               	.L8:
 208               	.LBB28:
 209               	.LBB27:
 210               	.LBB26:
 119:mtk_c.c       **** 	}
 120:mtk_c.c       **** 	else{
 121:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[*que_ptr];	// 先頭のタスクのポインタ設定
 211               		.loc 1 121 3 is_stmt 1 view .LVU83
 122:mtk_c.c       **** 		while(1){
 212               		.loc 1 122 3 view .LVU84
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 213               		.loc 1 123 4 view .LVU85
 214               		.loc 1 123 18 is_stmt 0 view .LVU86
 215 00ea 2008      		move.l %a0,%d0
 216 00ec D088      		add.l %a0,%d0
 217 00ee D080      		add.l %d0,%d0
 218 00f0 D088      		add.l %a0,%d0
 219 00f2 D080      		add.l %d0,%d0
 220 00f4 D080      		add.l %d0,%d0
 221 00f6 41F1 0800 		lea (%a1,%d0.l),%a0
 222               	.LVL20:
 223               		.loc 1 123 18 view .LVU87
 224 00fa 2028 0010 		move.l 16(%a0),%d0
 225               		.loc 1 123 6 view .LVU88
 226 00fe 6726      		jeq .L11
 227               	.LVL21:
 228               	.L10:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 125:mtk_c.c       **** 				break;
 126:mtk_c.c       **** 			}


 127:mtk_c.c       **** 			else{
 128:mtk_c.c       **** 				task_ptr = &task_tab[(*task_ptr).next];		//次のタスクにポインタを移動
 229               		.loc 1 128 5 is_stmt 1 view .LVU89
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 230               		.loc 1 122 8 view .LVU90
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 231               		.loc 1 122 3 view .LVU91
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 232               		.loc 1 123 4 view .LVU92
 233 0100 2040      		move.l %d0,%a0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 234               		.loc 1 123 18 is_stmt 0 view .LVU93
 235 0102 D080      		add.l %d0,%d0
 236               	.LVL22:
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 237               		.loc 1 123 18 view .LVU94
 238 0104 D080      		add.l %d0,%d0
 239 0106 D088      		add.l %a0,%d0
 240 0108 D080      		add.l %d0,%d0
 241 010a D080      		add.l %d0,%d0
 242 010c 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 243               		.loc 1 123 6 view .LVU95
 244 0110 66EE      		jne .L10
 245               		.loc 1 128 14 view .LVU96
 246 0112 2008      		move.l %a0,%d0
 247 0114 D088      		add.l %a0,%d0
 248 0116 D080      		add.l %d0,%d0
 249 0118 D088      		add.l %a0,%d0
 250 011a D080      		add.l %d0,%d0
 251 011c D080      		add.l %d0,%d0
 252 011e 2040      		move.l %d0,%a0
 253               	.LVL23:
 254               		.loc 1 128 14 view .LVU97
 255 0120 D1FC 0000 		add.l #task_tab,%a0
 255      0000 
 256               	.L11:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 257               		.loc 1 124 5 is_stmt 1 view .LVU98
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 258               		.loc 1 124 22 is_stmt 0 view .LVU99
 259 0126 2141 0010 		move.l %d1,16(%a0)
 125:mtk_c.c       **** 			}
 260               		.loc 1 125 5 is_stmt 1 view .LVU100
 261               	.LBE26:
 262               	.LBE27:
 263               	.LBE28:
  70:mtk_c.c       **** 
 264               		.loc 1 70 1 is_stmt 0 view .LVU101
 265 012a 241F      		move.l (%sp)+,%d2
 266 012c 245F      		move.l (%sp)+,%a2
 267               	.LVL24:
  70:mtk_c.c       **** 
 268               		.loc 1 70 1 view .LVU102
 269 012e 4E75      		rts
 270               		.cfi_endproc
 271               	.LFE4:


 272               		.size	set_task, .-set_task
 273               		.align	2
 274               		.globl	init_stack
 275               		.type	init_stack, @function
 276               	init_stack:
 277               	.LVL25:
 278               	.LFB5:
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 279               		.loc 1 86 34 is_stmt 1 view -0
 280               		.cfi_startproc
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 281               		.loc 1 86 34 is_stmt 0 view .LVU104
 282 0130 2F02      		move.l %d2,-(%sp)
 283               		.cfi_def_cfa_offset 8
 284               		.cfi_offset 2, -8
 285 0132 202F 0008 		move.l 8(%sp),%d0
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 286               		.loc 1 87 5 is_stmt 1 view .LVU105
 287 0136 2400      		move.l %d0,%d2
 288 0138 720B      		moveq #11,%d1
 289 013a E3AA      		lsl.l %d1,%d2
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 290               		.loc 1 87 10 is_stmt 0 view .LVU106
 291 013c 2042      		move.l %d2,%a0
 292 013e D1FC 0000 		add.l #stacks,%a0
 292      0000 
 293               	.LVL26:
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 294               		.loc 1 88 5 is_stmt 1 view .LVU107
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 295               		.loc 1 88 32 is_stmt 0 view .LVU108
 296 0144 2200      		move.l %d0,%d1
 297 0146 D280      		add.l %d0,%d1
 298 0148 D281      		add.l %d1,%d1
 299 014a D280      		add.l %d0,%d1
 300 014c D281      		add.l %d1,%d1
 301 014e D281      		add.l %d1,%d1
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 302               		.loc 1 88 18 view .LVU109
 303 0150 43F9 0000 		lea task_tab,%a1
 303      0000 
 304 0156 2171 1800 		move.l (%a1,%d1.l),-4(%a0)
 304      FFFC 
  89:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 305               		.loc 1 89 5 is_stmt 1 view .LVU110
 306               	.LVL27:
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 307               		.loc 1 90 5 view .LVU111
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 308               		.loc 1 90 20 is_stmt 0 view .LVU112
 309 015c 4268 FFFA 		clr.w -6(%a0)
  91:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 310               		.loc 1 91 5 is_stmt 1 view .LVU113
 311               	.LVL28:
  92:mtk_c.c       ****     /*修正*/
 312               		.loc 1 92 5 view .LVU114
  94:mtk_c.c       **** 


 313               		.loc 1 94 5 view .LVU115
  94:mtk_c.c       **** 
 314               		.loc 1 94 20 is_stmt 0 view .LVU116
 315 0160 0682 0000 		add.l #stacks-1024,%d2
 315      0000 
 316 0166 2142 FFBA 		move.l %d2,-70(%a0)
  96:mtk_c.c       **** }
 317               		.loc 1 96 5 is_stmt 1 view .LVU117
  97:mtk_c.c       **** 
 318               		.loc 1 97 1 is_stmt 0 view .LVU118
 319 016a 70BA      		moveq #-70,%d0
 320 016c D088      		add.l %a0,%d0
 321               	.LVL29:
  97:mtk_c.c       **** 
 322               		.loc 1 97 1 view .LVU119
 323 016e 241F      		move.l (%sp)+,%d2
 324 0170 4E75      		rts
 325               		.cfi_endproc
 326               	.LFE5:
 327               		.size	init_stack, .-init_stack
 328               		.section	.rodata.str1.1,"aMS",@progbits,1
 329               	.LC0:
 330 0000 6865 6C6C 		.string	"hello world"
 330      6F20 776F 
 330      726C 6400 
 331               		.text
 332               		.align	2
 333               		.globl	begin_sch
 334               		.type	begin_sch, @function
 335               	begin_sch:
 336               	.LFB6:
 108:mtk_c.c       ****     curr_task=removeq(&ready);
 337               		.loc 1 108 17 is_stmt 1 view -0
 338               		.cfi_startproc
 109:mtk_c.c       ****     init_timer();
 339               		.loc 1 109 5 view .LVU121
 340               	.LVL30:
 341               	.LBB29:
 342               	.LBI29:
 129:mtk_c.c       **** 			}
 130:mtk_c.c       **** 		}
 131:mtk_c.c       **** 	}
 132:mtk_c.c       **** }
 133:mtk_c.c       **** 
 134:mtk_c.c       **** // タスクのキューの先頭からのTCBの除去
 135:mtk_c.c       **** TASK_ID_TYPE removeq(TASK_ID_TYPE* que_ptr){
 343               		.loc 1 135 14 view .LVU122
 344               	.LBB30:
 136:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 345               		.loc 1 136 2 view .LVU123
 346               		.loc 1 136 15 is_stmt 0 view .LVU124
 347 0172 2039 0000 		move.l ready,%d0
 347      0000 
 348               	.LVL31:
 137:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 349               		.loc 1 137 2 is_stmt 1 view .LVU125
 350               		.loc 1 137 4 is_stmt 0 view .LVU126


 351 0178 671A      		jeq .L22
 352               	.LBB31:
 138:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 353               		.loc 1 138 3 is_stmt 1 view .LVU127
 354               	.LVL32:
 139:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 355               		.loc 1 139 3 view .LVU128
 356               		.loc 1 139 25 is_stmt 0 view .LVU129
 357 017a 2040      		move.l %d0,%a0
 358 017c D1C0      		add.l %d0,%a0
 359 017e D1C8      		add.l %a0,%a0
 360 0180 D1C0      		add.l %d0,%a0
 361 0182 D1C8      		add.l %a0,%a0
 362 0184 D1C8      		add.l %a0,%a0
 363 0186 D1FC 0000 		add.l #task_tab+16,%a0
 363      0000 
 364               		.loc 1 139 12 view .LVU130
 365 018c 23D0 0000 		move.l (%a0),ready
 365      0000 
 140:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 366               		.loc 1 140 3 is_stmt 1 view .LVU131
 367               		.loc 1 140 20 is_stmt 0 view .LVU132
 368 0192 4290      		clr.l (%a0)
 369               	.LVL33:
 370               	.L22:
 371               		.loc 1 140 20 view .LVU133
 372               	.LBE31:
 141:mtk_c.c       **** 	}
 142:mtk_c.c       **** 	return r_id;									// キューの先頭のタスクのidを返す
 373               		.loc 1 142 2 is_stmt 1 view .LVU134
 374               		.loc 1 142 2 is_stmt 0 view .LVU135
 375               	.LBE30:
 376               	.LBE29:
 109:mtk_c.c       ****     init_timer();
 377               		.loc 1 109 14 view .LVU136
 378 0194 23C0 0000 		move.l %d0,curr_task
 378      0000 
 110:mtk_c.c       ****     first_task();
 379               		.loc 1 110 5 is_stmt 1 view .LVU137
 380 019a 4EB9 0000 		jsr init_timer
 380      0000 
 381               	.LVL34:
 111:mtk_c.c       ****     printf("hello world\n");
 382               		.loc 1 111 5 view .LVU138
 383 01a0 4EB9 0000 		jsr first_task
 383      0000 
 384               	.LVL35:
 112:mtk_c.c       **** }
 385               		.loc 1 112 5 view .LVU139
 386 01a6 4879 0000 		pea .LC0
 386      0000 
 387               		.cfi_def_cfa_offset 8
 388 01ac 4EB9 0000 		jsr puts
 388      0000 
 389               	.LVL36:
 113:mtk_c.c       **** 
 390               		.loc 1 113 1 is_stmt 0 view .LVU140


 391 01b2 588F      		addq.l #4,%sp
 392               		.cfi_def_cfa_offset 4
 393 01b4 4E75      		rts
 394               		.cfi_endproc
 395               	.LFE6:
 396               		.size	begin_sch, .-begin_sch
 397               		.align	2
 398               		.globl	addq
 399               		.type	addq, @function
 400               	addq:
 401               	.LVL37:
 402               	.LFB7:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 403               		.loc 1 116 50 is_stmt 1 view -0
 404               		.cfi_startproc
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 405               		.loc 1 116 50 is_stmt 0 view .LVU142
 406 01b6 206F 0004 		move.l 4(%sp),%a0
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 407               		.loc 1 117 2 is_stmt 1 view .LVU143
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 408               		.loc 1 117 5 is_stmt 0 view .LVU144
 409 01ba 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 410               		.loc 1 117 4 view .LVU145
 411 01bc 6606      		jne .L29
 118:mtk_c.c       **** 	}
 412               		.loc 1 118 3 is_stmt 1 view .LVU146
 118:mtk_c.c       **** 	}
 413               		.loc 1 118 12 is_stmt 0 view .LVU147
 414 01be 20AF 0008 		move.l 8(%sp),(%a0)
 132:mtk_c.c       **** 
 415               		.loc 1 132 1 view .LVU148
 416 01c2 4E75      		rts
 417               	.L29:
 418               	.LBB32:
 121:mtk_c.c       **** 		while(1){
 419               		.loc 1 121 3 is_stmt 1 view .LVU149
 420               	.LVL38:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 421               		.loc 1 122 3 view .LVU150
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 422               		.loc 1 123 4 view .LVU151
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 423               		.loc 1 123 18 is_stmt 0 view .LVU152
 424 01c4 43F9 0000 		lea task_tab,%a1
 424      0000 
 425 01ca 2001      		move.l %d1,%d0
 426 01cc D081      		add.l %d1,%d0
 427 01ce D080      		add.l %d0,%d0
 428 01d0 D081      		add.l %d1,%d0
 429 01d2 D080      		add.l %d0,%d0
 430 01d4 D080      		add.l %d0,%d0
 431 01d6 41F1 0800 		lea (%a1,%d0.l),%a0
 432 01da 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 433               		.loc 1 123 6 view .LVU153


 434 01de 6726      		jeq .L32
 435               	.LVL39:
 436               	.L31:
 128:mtk_c.c       **** 			}
 437               		.loc 1 128 5 is_stmt 1 view .LVU154
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 438               		.loc 1 122 8 view .LVU155
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 439               		.loc 1 122 3 view .LVU156
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 440               		.loc 1 123 4 view .LVU157
 441 01e0 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 442               		.loc 1 123 18 is_stmt 0 view .LVU158
 443 01e2 D080      		add.l %d0,%d0
 444               	.LVL40:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 445               		.loc 1 123 18 view .LVU159
 446 01e4 D080      		add.l %d0,%d0
 447 01e6 D081      		add.l %d1,%d0
 448 01e8 D080      		add.l %d0,%d0
 449 01ea D080      		add.l %d0,%d0
 450 01ec 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 451               		.loc 1 123 6 view .LVU160
 452 01f0 66EE      		jne .L31
 128:mtk_c.c       **** 			}
 453               		.loc 1 128 14 view .LVU161
 454 01f2 2001      		move.l %d1,%d0
 455 01f4 D081      		add.l %d1,%d0
 456 01f6 D080      		add.l %d0,%d0
 457 01f8 D081      		add.l %d1,%d0
 458 01fa D080      		add.l %d0,%d0
 459 01fc D080      		add.l %d0,%d0
 460 01fe 2040      		move.l %d0,%a0
 461 0200 D1FC 0000 		add.l #task_tab,%a0
 461      0000 
 462               	.LVL41:
 463               	.L32:
 124:mtk_c.c       **** 				break;
 464               		.loc 1 124 5 is_stmt 1 view .LVU162
 124:mtk_c.c       **** 				break;
 465               		.loc 1 124 22 is_stmt 0 view .LVU163
 466 0206 216F 0008 		move.l 8(%sp),16(%a0)
 466      0010 
 125:mtk_c.c       **** 			}
 467               		.loc 1 125 5 is_stmt 1 view .LVU164
 468               	.LBE32:
 132:mtk_c.c       **** 
 469               		.loc 1 132 1 is_stmt 0 view .LVU165
 470 020c 4E75      		rts
 471               		.cfi_endproc
 472               	.LFE7:
 473               		.size	addq, .-addq
 474               		.align	2
 475               		.globl	removeq
 476               		.type	removeq, @function


 477               	removeq:
 478               	.LVL42:
 479               	.LFB8:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 480               		.loc 1 135 44 is_stmt 1 view -0
 481               		.cfi_startproc
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 482               		.loc 1 135 44 is_stmt 0 view .LVU167
 483 020e 226F 0004 		move.l 4(%sp),%a1
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 484               		.loc 1 136 2 is_stmt 1 view .LVU168
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 485               		.loc 1 136 15 is_stmt 0 view .LVU169
 486 0212 2011      		move.l (%a1),%d0
 487               	.LVL43:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 488               		.loc 1 137 2 is_stmt 1 view .LVU170
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 489               		.loc 1 137 4 is_stmt 0 view .LVU171
 490 0214 6716      		jeq .L37
 491               	.LBB33:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 492               		.loc 1 138 3 is_stmt 1 view .LVU172
 493               	.LVL44:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 494               		.loc 1 139 3 view .LVU173
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 495               		.loc 1 139 25 is_stmt 0 view .LVU174
 496 0216 2040      		move.l %d0,%a0
 497 0218 D1C0      		add.l %d0,%a0
 498 021a D1C8      		add.l %a0,%a0
 499 021c D1C0      		add.l %d0,%a0
 500 021e D1C8      		add.l %a0,%a0
 501 0220 D1C8      		add.l %a0,%a0
 502 0222 D1FC 0000 		add.l #task_tab+16,%a0
 502      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 503               		.loc 1 139 12 view .LVU175
 504 0228 2290      		move.l (%a0),(%a1)
 140:mtk_c.c       **** 	}
 505               		.loc 1 140 3 is_stmt 1 view .LVU176
 140:mtk_c.c       **** 	}
 506               		.loc 1 140 20 is_stmt 0 view .LVU177
 507 022a 4290      		clr.l (%a0)
 508               	.LBE33:
 509               		.loc 1 142 2 is_stmt 1 view .LVU178
 510               	.LVL45:
 511               	.L37:
 143:mtk_c.c       **** }
 512               		.loc 1 143 1 is_stmt 0 view .LVU179
 513 022c 4E75      		rts
 514               		.cfi_endproc
 515               	.LFE8:
 516               		.size	removeq, .-removeq
 517               		.align	2
 518               		.globl	sched
 519               		.type	sched, @function


 520               	sched:
 521               	.LFB9:
 144:mtk_c.c       **** 
 145:mtk_c.c       **** // タスクのスケジュール関数
 146:mtk_c.c       **** void sched(){
 522               		.loc 1 146 13 is_stmt 1 view -0
 523               		.cfi_startproc
 147:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 524               		.loc 1 147 2 view .LVU181
 525               	.LVL46:
 526               	.LBB37:
 527               	.LBI37:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 528               		.loc 1 135 14 view .LVU182
 529               	.LBB38:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 530               		.loc 1 136 2 view .LVU183
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 531               		.loc 1 136 15 is_stmt 0 view .LVU184
 532 022e 2039 0000 		move.l ready,%d0
 532      0000 
 533               	.LVL47:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 534               		.loc 1 137 2 is_stmt 1 view .LVU185
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 535               		.loc 1 137 4 is_stmt 0 view .LVU186
 536 0234 6722      		jeq .L45
 537               	.LBB39:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 538               		.loc 1 138 3 is_stmt 1 view .LVU187
 539               	.LVL48:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 540               		.loc 1 139 3 view .LVU188
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 541               		.loc 1 139 25 is_stmt 0 view .LVU189
 542 0236 2040      		move.l %d0,%a0
 543 0238 D1C0      		add.l %d0,%a0
 544 023a D1C8      		add.l %a0,%a0
 545 023c D1C0      		add.l %d0,%a0
 546 023e D1C8      		add.l %a0,%a0
 547 0240 D1C8      		add.l %a0,%a0
 548 0242 D1FC 0000 		add.l #task_tab+16,%a0
 548      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 549               		.loc 1 139 12 view .LVU190
 550 0248 23D0 0000 		move.l (%a0),ready
 550      0000 
 140:mtk_c.c       **** 	}
 551               		.loc 1 140 3 is_stmt 1 view .LVU191
 140:mtk_c.c       **** 	}
 552               		.loc 1 140 20 is_stmt 0 view .LVU192
 553 024e 4290      		clr.l (%a0)
 554               	.LBE39:
 142:mtk_c.c       **** }
 555               		.loc 1 142 2 is_stmt 1 view .LVU193
 556               	.LVL49:
 142:mtk_c.c       **** }


 557               		.loc 1 142 2 is_stmt 0 view .LVU194
 558               	.LBE38:
 559               	.LBE37:
 560               		.loc 1 147 12 view .LVU195
 561 0250 23C0 0000 		move.l %d0,next_task
 561      0000 
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 562               		.loc 1 148 2 is_stmt 1 view .LVU196
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 150:mtk_c.c       **** 	}		
 151:mtk_c.c       **** }
 563               		.loc 1 151 1 is_stmt 0 view .LVU197
 564 0256 4E75      		rts
 565               	.LVL50:
 566               	.L45:
 567               	.LBB41:
 568               	.LBB40:
 142:mtk_c.c       **** }
 569               		.loc 1 142 2 is_stmt 1 view .LVU198
 142:mtk_c.c       **** }
 570               		.loc 1 142 2 is_stmt 0 view .LVU199
 571               	.LBE40:
 572               	.LBE41:
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 573               		.loc 1 148 2 is_stmt 1 view .LVU200
 574               	.L46:
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 575               		.loc 1 149 3 discriminator 1 view .LVU201
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 576               		.loc 1 149 8 discriminator 1 view .LVU202
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 577               		.loc 1 149 3 discriminator 1 view .LVU203
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 578               		.loc 1 149 8 discriminator 1 view .LVU204
 579 0258 60FE      		jra .L46
 580               		.cfi_endproc
 581               	.LFE9:
 582               		.size	sched, .-sched
 583               		.align	2
 584               		.globl	sleep
 585               		.type	sleep, @function
 586               	sleep:
 587               	.LVL51:
 588               	.LFB11:
 152:mtk_c.c       **** 
 153:mtk_c.c       **** //齊藤作成
 154:mtk_c.c       **** //引数としてセマフォID（割り込み時のレジスタD1が保持）をとる
 155:mtk_c.c       **** //1.セマフォの値を減らす
 156:mtk_c.c       **** //2.セマフォが獲得（セマフォの値が０以上）ならばなにもしない（ユー
 157:mtk_c.c       **** //セマフォが獲得できない（セマフォの値が負）ならばsleep(s_id)を実行し
 158:mtk_c.c       **** 
 159:mtk_c.c       **** 
 160:mtk_c.c       **** void p_body(TASK_ID_TYPE s_id){
 161:mtk_c.c       **** 	semaphore[s_id].count --;
 162:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 163:mtk_c.c       **** 		sleep(s_id);
 164:mtk_c.c       **** 		}


 165:mtk_c.c       **** }
 166:mtk_c.c       **** 
 167:mtk_c.c       **** void sleep(int ch){
 589               		.loc 1 167 19 view -0
 590               		.cfi_startproc
 591               		.loc 1 167 19 is_stmt 0 view .LVU206
 592 025a 2F02      		move.l %d2,-(%sp)
 593               		.cfi_def_cfa_offset 8
 594               		.cfi_offset 2, -8
 168:mtk_c.c       **** 	addq(&semaphore[ch].task_list, curr_task);		//ch＝セマフォIDの待ち行列に現タスクを
 595               		.loc 1 168 2 is_stmt 1 view .LVU207
 596 025c 2439 0000 		move.l curr_task,%d2
 596      0000 
 597               	.LVL52:
 598               	.LBB50:
 599               	.LBI50:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 600               		.loc 1 116 6 view .LVU208
 601               	.LBB51:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 602               		.loc 1 117 2 view .LVU209
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 603               		.loc 1 117 5 is_stmt 0 view .LVU210
 604 0262 202F 0008 		move.l 8(%sp),%d0
 605 0266 E788      		lsl.l #3,%d0
 606 0268 0680 0000 		add.l #semaphore+4,%d0
 606      0000 
 607               	.LVL53:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 608               		.loc 1 117 5 view .LVU211
 609 026e 2040      		move.l %d0,%a0
 610 0270 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 611               		.loc 1 117 4 view .LVU212
 612 0272 6636      		jne .L51
 118:mtk_c.c       **** 	}
 613               		.loc 1 118 3 is_stmt 1 view .LVU213
 118:mtk_c.c       **** 	}
 614               		.loc 1 118 12 is_stmt 0 view .LVU214
 615 0274 2082      		move.l %d2,(%a0)
 616 0276 43F9 0000 		lea task_tab,%a1
 616      0000 
 617               	.LVL54:
 118:mtk_c.c       **** 	}
 618               		.loc 1 118 12 view .LVU215
 619               	.LBE51:
 620               	.LBE50:
 169:mtk_c.c       **** 	sched();						//次に実行するタスクのIDをnext_taskにセット
 621               		.loc 1 169 2 is_stmt 1 view .LVU216
 622               	.LBB54:
 623               	.LBI54:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 624               		.loc 1 146 6 view .LVU217
 625               	.LBB55:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 626               		.loc 1 147 2 view .LVU218
 627               	.LBB56:


 628               	.LBI56:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 629               		.loc 1 135 14 view .LVU219
 630               	.LBB57:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 631               		.loc 1 136 2 view .LVU220
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 632               		.loc 1 136 15 is_stmt 0 view .LVU221
 633 027c 2239 0000 		move.l ready,%d1
 633      0000 
 634               	.LVL55:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 635               		.loc 1 137 2 is_stmt 1 view .LVU222
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 636               		.loc 1 137 4 is_stmt 0 view .LVU223
 637 0282 6774      		jeq .L55
 638               	.L61:
 639               	.LBB58:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 640               		.loc 1 138 3 is_stmt 1 view .LVU224
 641               	.LVL56:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 642               		.loc 1 139 3 view .LVU225
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 643               		.loc 1 139 25 is_stmt 0 view .LVU226
 644 0284 2001      		move.l %d1,%d0
 645 0286 D081      		add.l %d1,%d0
 646 0288 D080      		add.l %d0,%d0
 647 028a D081      		add.l %d1,%d0
 648 028c D080      		add.l %d0,%d0
 649 028e D080      		add.l %d0,%d0
 650 0290 41F1 0810 		lea 16(%a1,%d0.l),%a0
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 651               		.loc 1 139 12 view .LVU227
 652 0294 23D0 0000 		move.l (%a0),ready
 652      0000 
 140:mtk_c.c       **** 	}
 653               		.loc 1 140 3 is_stmt 1 view .LVU228
 140:mtk_c.c       **** 	}
 654               		.loc 1 140 20 is_stmt 0 view .LVU229
 655 029a 4290      		clr.l (%a0)
 656               	.LBE58:
 142:mtk_c.c       **** }
 657               		.loc 1 142 2 is_stmt 1 view .LVU230
 658               	.LVL57:
 142:mtk_c.c       **** }
 659               		.loc 1 142 2 is_stmt 0 view .LVU231
 660               	.LBE57:
 661               	.LBE56:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 662               		.loc 1 147 12 view .LVU232
 663 029c 23C1 0000 		move.l %d1,next_task
 663      0000 
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 664               		.loc 1 148 2 is_stmt 1 view .LVU233
 665               	.LBE55:
 666               	.LBE54:


 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 667               		.loc 1 170 2 view .LVU234
 171:mtk_c.c       **** }
 668               		.loc 1 171 1 is_stmt 0 view .LVU235
 669 02a2 241F      		move.l (%sp)+,%d2
 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 670               		.loc 1 170 2 view .LVU236
 671 02a4 4EF9 0000 		jra swtch
 671      0000 
 672               	.LVL58:
 673               	.L51:
 674               	.LBB62:
 675               	.LBB53:
 676               	.LBB52:
 121:mtk_c.c       **** 		while(1){
 677               		.loc 1 121 3 is_stmt 1 view .LVU237
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 678               		.loc 1 122 3 view .LVU238
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 679               		.loc 1 123 4 view .LVU239
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 680               		.loc 1 123 18 is_stmt 0 view .LVU240
 681 02aa 43F9 0000 		lea task_tab,%a1
 681      0000 
 682 02b0 2001      		move.l %d1,%d0
 683               	.LVL59:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 684               		.loc 1 123 18 view .LVU241
 685 02b2 D081      		add.l %d1,%d0
 686 02b4 D080      		add.l %d0,%d0
 687 02b6 D081      		add.l %d1,%d0
 688 02b8 D080      		add.l %d0,%d0
 689 02ba D080      		add.l %d0,%d0
 690 02bc 41F1 0800 		lea (%a1,%d0.l),%a0
 691               	.LVL60:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 692               		.loc 1 123 18 view .LVU242
 693 02c0 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 694               		.loc 1 123 6 view .LVU243
 695 02c4 6726      		jeq .L54
 696               	.LVL61:
 697               	.L53:
 128:mtk_c.c       **** 			}
 698               		.loc 1 128 5 is_stmt 1 view .LVU244
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 699               		.loc 1 122 8 view .LVU245
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 700               		.loc 1 122 3 view .LVU246
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 701               		.loc 1 123 4 view .LVU247
 702 02c6 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 703               		.loc 1 123 18 is_stmt 0 view .LVU248
 704 02c8 D080      		add.l %d0,%d0
 705               	.LVL62:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録


 706               		.loc 1 123 18 view .LVU249
 707 02ca D080      		add.l %d0,%d0
 708 02cc D081      		add.l %d1,%d0
 709 02ce D080      		add.l %d0,%d0
 710 02d0 D080      		add.l %d0,%d0
 711 02d2 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 712               		.loc 1 123 6 view .LVU250
 713 02d6 66EE      		jne .L53
 128:mtk_c.c       **** 			}
 714               		.loc 1 128 14 view .LVU251
 715 02d8 2001      		move.l %d1,%d0
 716 02da D081      		add.l %d1,%d0
 717 02dc D080      		add.l %d0,%d0
 718 02de D081      		add.l %d1,%d0
 719 02e0 D080      		add.l %d0,%d0
 720 02e2 D080      		add.l %d0,%d0
 721 02e4 2040      		move.l %d0,%a0
 722 02e6 D1FC 0000 		add.l #task_tab,%a0
 722      0000 
 723               	.LVL63:
 724               	.L54:
 124:mtk_c.c       **** 				break;
 725               		.loc 1 124 5 is_stmt 1 view .LVU252
 124:mtk_c.c       **** 				break;
 726               		.loc 1 124 22 is_stmt 0 view .LVU253
 727 02ec 2142 0010 		move.l %d2,16(%a0)
 125:mtk_c.c       **** 			}
 728               		.loc 1 125 5 is_stmt 1 view .LVU254
 729               	.LVL64:
 125:mtk_c.c       **** 			}
 730               		.loc 1 125 5 is_stmt 0 view .LVU255
 731               	.LBE52:
 732               	.LBE53:
 733               	.LBE62:
 169:mtk_c.c       **** 	swtch();						//タスクを切り替える
 734               		.loc 1 169 2 is_stmt 1 view .LVU256
 735               	.LBB63:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 736               		.loc 1 146 6 view .LVU257
 737               	.LBB61:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 738               		.loc 1 147 2 view .LVU258
 739               	.LBB60:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 740               		.loc 1 135 14 view .LVU259
 741               	.LBB59:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 742               		.loc 1 136 2 view .LVU260
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 743               		.loc 1 136 15 is_stmt 0 view .LVU261
 744 02f0 2239 0000 		move.l ready,%d1
 744      0000 
 745               	.LVL65:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 746               		.loc 1 137 2 is_stmt 1 view .LVU262
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定


 747               		.loc 1 137 4 is_stmt 0 view .LVU263
 748 02f6 668C      		jne .L61
 749               	.L55:
 142:mtk_c.c       **** }
 750               		.loc 1 142 2 is_stmt 1 view .LVU264
 751               	.LVL66:
 142:mtk_c.c       **** }
 752               		.loc 1 142 2 is_stmt 0 view .LVU265
 753               	.LBE59:
 754               	.LBE60:
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 755               		.loc 1 148 2 is_stmt 1 view .LVU266
 756               	.L56:
 149:mtk_c.c       **** 	}		
 757               		.loc 1 149 3 view .LVU267
 149:mtk_c.c       **** 	}		
 758               		.loc 1 149 8 view .LVU268
 149:mtk_c.c       **** 	}		
 759               		.loc 1 149 3 view .LVU269
 149:mtk_c.c       **** 	}		
 760               		.loc 1 149 8 view .LVU270
 761 02f8 60FE      		jra .L56
 762               	.LBE61:
 763               	.LBE63:
 764               		.cfi_endproc
 765               	.LFE11:
 766               		.size	sleep, .-sleep
 767               		.align	2
 768               		.globl	p_body
 769               		.type	p_body, @function
 770               	p_body:
 771               	.LVL67:
 772               	.LFB10:
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 773               		.loc 1 160 31 view -0
 774               		.cfi_startproc
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 775               		.loc 1 160 31 is_stmt 0 view .LVU272
 776 02fa 2F02      		move.l %d2,-(%sp)
 777               		.cfi_def_cfa_offset 8
 778               		.cfi_offset 2, -8
 779 02fc 242F 0008 		move.l 8(%sp),%d2
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 780               		.loc 1 161 2 is_stmt 1 view .LVU273
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 781               		.loc 1 161 17 is_stmt 0 view .LVU274
 782 0300 41F9 0000 		lea semaphore,%a0
 782      0000 
 783 0306 2202      		move.l %d2,%d1
 784 0308 E789      		lsl.l #3,%d1
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 785               		.loc 1 161 24 view .LVU275
 786 030a 2030 1800 		move.l (%a0,%d1.l),%d0
 787 030e 5380      		subq.l #1,%d0
 788 0310 2180 1800 		move.l %d0,(%a0,%d1.l)
 162:mtk_c.c       **** 		sleep(s_id);
 789               		.loc 1 162 2 is_stmt 1 view .LVU276


 162:mtk_c.c       **** 		sleep(s_id);
 790               		.loc 1 162 4 is_stmt 0 view .LVU277
 791 0314 6B04      		jmi .L66
 165:mtk_c.c       **** 
 792               		.loc 1 165 1 view .LVU278
 793 0316 241F      		move.l (%sp)+,%d2
 794 0318 4E75      		rts
 795               	.L66:
 163:mtk_c.c       **** 		}
 796               		.loc 1 163 3 is_stmt 1 view .LVU279
 797 031a 2F42 0008 		move.l %d2,8(%sp)
 165:mtk_c.c       **** 
 798               		.loc 1 165 1 is_stmt 0 view .LVU280
 799 031e 241F      		move.l (%sp)+,%d2
 163:mtk_c.c       **** 		}
 800               		.loc 1 163 3 view .LVU281
 801 0320 6000 FF38 		jra sleep
 802               	.LVL68:
 803               		.cfi_endproc
 804               	.LFE10:
 805               		.size	p_body, .-p_body
 806               		.align	2
 807               		.globl	wakeup
 808               		.type	wakeup, @function
 809               	wakeup:
 810               	.LVL69:
 811               	.LFB13:
 172:mtk_c.c       **** 
 173:mtk_c.c       **** //後藤作成
 174:mtk_c.c       **** //1. セマフォの値を増やす
 175:mtk_c.c       **** //2. セマフォが空けば，wakeup(セマフォの ID) を実行して，そのセマフォを
 176:mtk_c.c       **** //   を一つ，実行可能状態にする．
 177:mtk_c.c       **** 
 178:mtk_c.c       **** void v_body(TASK_ID_TYPE s_id){
 179:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 180:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 181:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 182:mtk_c.c       **** 	}
 183:mtk_c.c       **** }
 184:mtk_c.c       **** 
 185:mtk_c.c       **** void wakeup(int ch){
 812               		.loc 1 185 20 is_stmt 1 view -0
 813               		.cfi_startproc
 814               		.loc 1 185 20 is_stmt 0 view .LVU283
 815 0324 2F0A      		move.l %a2,-(%sp)
 816               		.cfi_def_cfa_offset 8
 817               		.cfi_offset 10, -8
 186:mtk_c.c       **** 	TASK_ID_TYPE wakeup_id;
 818               		.loc 1 186 2 is_stmt 1 view .LVU284
 187:mtk_c.c       **** 	wakeup_id=removeq(&semaphore[ch].task_list); //セマフォから待ちタスクを除去
 819               		.loc 1 187 2 view .LVU285
 820               	.LVL70:
 821               	.LBB64:
 822               	.LBI64:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 823               		.loc 1 135 14 view .LVU286
 824               	.LBB65:


 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 825               		.loc 1 136 2 view .LVU287
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 826               		.loc 1 136 15 is_stmt 0 view .LVU288
 827 0326 202F 0008 		move.l 8(%sp),%d0
 828 032a E788      		lsl.l #3,%d0
 829 032c 0680 0000 		add.l #semaphore+4,%d0
 829      0000 
 830               	.LVL71:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 831               		.loc 1 136 15 view .LVU289
 832 0332 2040      		move.l %d0,%a0
 833 0334 2250      		move.l (%a0),%a1
 834               	.LVL72:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 835               		.loc 1 137 2 is_stmt 1 view .LVU290
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 836               		.loc 1 137 4 is_stmt 0 view .LVU291
 837 0336 B2FC 0000 		cmp.w #0,%a1
 838 033a 6718      		jeq .L68
 839               	.LBB66:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 840               		.loc 1 138 3 is_stmt 1 view .LVU292
 841               	.LVL73:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 842               		.loc 1 139 3 view .LVU293
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 843               		.loc 1 139 25 is_stmt 0 view .LVU294
 844 033c 41F1 9800 		lea (%a1,%a1.l),%a0
 845 0340 D1C8      		add.l %a0,%a0
 846 0342 D1C9      		add.l %a1,%a0
 847 0344 D1C8      		add.l %a0,%a0
 848 0346 D1C8      		add.l %a0,%a0
 849 0348 D1FC 0000 		add.l #task_tab+16,%a0
 849      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 850               		.loc 1 139 12 view .LVU295
 851 034e 2440      		move.l %d0,%a2
 852 0350 2490      		move.l (%a0),(%a2)
 140:mtk_c.c       **** 	}
 853               		.loc 1 140 3 is_stmt 1 view .LVU296
 140:mtk_c.c       **** 	}
 854               		.loc 1 140 20 is_stmt 0 view .LVU297
 855 0352 4290      		clr.l (%a0)
 856               	.LVL74:
 857               	.L68:
 140:mtk_c.c       **** 	}
 858               		.loc 1 140 20 view .LVU298
 859               	.LBE66:
 142:mtk_c.c       **** }
 860               		.loc 1 142 2 is_stmt 1 view .LVU299
 142:mtk_c.c       **** }
 861               		.loc 1 142 2 is_stmt 0 view .LVU300
 862               	.LBE65:
 863               	.LBE64:
 188:mtk_c.c       **** 	addq(&ready,wakeup_id); //実行可能状態行列（ready）へつなぐ
 864               		.loc 1 188 2 is_stmt 1 view .LVU301


 865               	.LBB67:
 866               	.LBI67:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 867               		.loc 1 116 6 view .LVU302
 868               	.LBB68:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 869               		.loc 1 117 2 view .LVU303
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 870               		.loc 1 117 5 is_stmt 0 view .LVU304
 871 0354 2239 0000 		move.l ready,%d1
 871      0000 
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 872               		.loc 1 117 4 view .LVU305
 873 035a 660A      		jne .L69
 118:mtk_c.c       **** 	}
 874               		.loc 1 118 3 is_stmt 1 view .LVU306
 118:mtk_c.c       **** 	}
 875               		.loc 1 118 12 is_stmt 0 view .LVU307
 876 035c 23C9 0000 		move.l %a1,ready
 876      0000 
 877               	.LBE68:
 878               	.LBE67:
 189:mtk_c.c       **** }
 879               		.loc 1 189 1 view .LVU308
 880 0362 245F      		move.l (%sp)+,%a2
 881 0364 4E75      		rts
 882               	.L69:
 883               	.LBB71:
 884               	.LBB70:
 885               	.LBB69:
 121:mtk_c.c       **** 		while(1){
 886               		.loc 1 121 3 is_stmt 1 view .LVU309
 887               	.LVL75:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 888               		.loc 1 122 3 view .LVU310
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 889               		.loc 1 123 4 view .LVU311
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 890               		.loc 1 123 18 is_stmt 0 view .LVU312
 891 0366 45F9 0000 		lea task_tab,%a2
 891      0000 
 892 036c 2001      		move.l %d1,%d0
 893 036e D081      		add.l %d1,%d0
 894 0370 D080      		add.l %d0,%d0
 895 0372 D081      		add.l %d1,%d0
 896 0374 D080      		add.l %d0,%d0
 897 0376 D080      		add.l %d0,%d0
 898 0378 41F2 0800 		lea (%a2,%d0.l),%a0
 899 037c 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 900               		.loc 1 123 6 view .LVU313
 901 0380 6726      		jeq .L72
 902               	.LVL76:
 903               	.L71:
 128:mtk_c.c       **** 			}
 904               		.loc 1 128 5 is_stmt 1 view .LVU314
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら


 905               		.loc 1 122 8 view .LVU315
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 906               		.loc 1 122 3 view .LVU316
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 907               		.loc 1 123 4 view .LVU317
 908 0382 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 909               		.loc 1 123 18 is_stmt 0 view .LVU318
 910 0384 D080      		add.l %d0,%d0
 911               	.LVL77:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 912               		.loc 1 123 18 view .LVU319
 913 0386 D080      		add.l %d0,%d0
 914 0388 D081      		add.l %d1,%d0
 915 038a D080      		add.l %d0,%d0
 916 038c D080      		add.l %d0,%d0
 917 038e 2032 0810 		move.l 16(%a2,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 918               		.loc 1 123 6 view .LVU320
 919 0392 66EE      		jne .L71
 128:mtk_c.c       **** 			}
 920               		.loc 1 128 14 view .LVU321
 921 0394 2001      		move.l %d1,%d0
 922 0396 D081      		add.l %d1,%d0
 923 0398 D080      		add.l %d0,%d0
 924 039a D081      		add.l %d1,%d0
 925 039c D080      		add.l %d0,%d0
 926 039e D080      		add.l %d0,%d0
 927 03a0 2040      		move.l %d0,%a0
 928 03a2 D1FC 0000 		add.l #task_tab,%a0
 928      0000 
 929               	.LVL78:
 930               	.L72:
 124:mtk_c.c       **** 				break;
 931               		.loc 1 124 5 is_stmt 1 view .LVU322
 124:mtk_c.c       **** 				break;
 932               		.loc 1 124 22 is_stmt 0 view .LVU323
 933 03a8 2149 0010 		move.l %a1,16(%a0)
 125:mtk_c.c       **** 			}
 934               		.loc 1 125 5 is_stmt 1 view .LVU324
 935               	.LBE69:
 936               	.LBE70:
 937               	.LBE71:
 938               		.loc 1 189 1 is_stmt 0 view .LVU325
 939 03ac 245F      		move.l (%sp)+,%a2
 940 03ae 4E75      		rts
 941               		.cfi_endproc
 942               	.LFE13:
 943               		.size	wakeup, .-wakeup
 944               		.align	2
 945               		.globl	v_body
 946               		.type	v_body, @function
 947               	v_body:
 948               	.LVL79:
 949               	.LFB12:
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 950               		.loc 1 178 31 is_stmt 1 view -0


 951               		.cfi_startproc
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 952               		.loc 1 178 31 is_stmt 0 view .LVU327
 953 03b0 2F02      		move.l %d2,-(%sp)
 954               		.cfi_def_cfa_offset 8
 955               		.cfi_offset 2, -8
 956 03b2 242F 0008 		move.l 8(%sp),%d2
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 957               		.loc 1 179 2 is_stmt 1 view .LVU328
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 958               		.loc 1 179 17 is_stmt 0 view .LVU329
 959 03b6 41F9 0000 		lea semaphore,%a0
 959      0000 
 960 03bc 2202      		move.l %d2,%d1
 961 03be E789      		lsl.l #3,%d1
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 962               		.loc 1 179 23 view .LVU330
 963 03c0 2030 1800 		move.l (%a0,%d1.l),%d0
 964 03c4 5280      		addq.l #1,%d0
 965 03c6 2180 1800 		move.l %d0,(%a0,%d1.l)
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 966               		.loc 1 180 2 is_stmt 1 view .LVU331
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 967               		.loc 1 180 4 is_stmt 0 view .LVU332
 968 03ca 6F04      		jle .L84
 183:mtk_c.c       **** 
 969               		.loc 1 183 1 view .LVU333
 970 03cc 241F      		move.l (%sp)+,%d2
 971 03ce 4E75      		rts
 972               	.L84:
 181:mtk_c.c       **** 	}
 973               		.loc 1 181 3 is_stmt 1 view .LVU334
 974 03d0 2F42 0008 		move.l %d2,8(%sp)
 183:mtk_c.c       **** 
 975               		.loc 1 183 1 is_stmt 0 view .LVU335
 976 03d4 241F      		move.l (%sp)+,%d2
 181:mtk_c.c       **** 	}
 977               		.loc 1 181 3 view .LVU336
 978 03d6 6000 FF4C 		jra wakeup
 979               	.LVL80:
 980               		.cfi_endproc
 981               	.LFE12:
 982               		.size	v_body, .-v_body
 983               		.globl	ready
 984               		.section	.bss
 985               		.align	2
 986               		.type	ready, @object
 987               		.size	ready, 4
 988               	ready:
 989 0000 0000 0000 		.zero	4
 990               		.globl	next_task
 991               		.align	2
 992               		.type	next_task, @object
 993               		.size	next_task, 4
 994               	next_task:
 995 0004 0000 0000 		.zero	4
 996               		.globl	new_task


 997               		.align	2
 998               		.type	new_task, @object
 999               		.size	new_task, 4
 1000               	new_task:
 1001 0008 0000 0000 		.zero	4
 1002               		.globl	curr_task
 1003               		.align	2
 1004               		.type	curr_task, @object
 1005               		.size	curr_task, 4
 1006               	curr_task:
 1007 000c 0000 0000 		.zero	4
 1008               		.globl	stacks
 1009               		.type	stacks, @object
 1010               		.size	stacks, 10240
 1011               	stacks:
 1012 0010 0000 0000 		.zero	10240
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1013               		.globl	task_tab
 1014               		.align	2
 1015               		.type	task_tab, @object
 1016               		.size	task_tab, 120
 1017               	task_tab:
 1018 2810 0000 0000 		.zero	120
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1019               		.globl	semaphore
 1020               		.align	2
 1021               		.type	semaphore, @object
 1022               		.size	semaphore, 24
 1023               	semaphore:
 1024 2888 0000 0000 		.zero	24
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1025               		.text
 1026               	.Letext0:
 1027               		.file 2 "mtk_c.h"
 1028               		.file 3 "<built-in>"
 1029               		.section	.debug_info,"",@progbits
 1030               	.Ldebug_info0:
 1031 0000 0000 0789 		.long	0x789
 1032 0004 0005      		.word	0x5
 1033 0006 01        		.byte	0x1
 1034 0007 04        		.byte	0x4
 1035 0008 0000 0000 		.long	.Ldebug_abbrev0
 1036 000c 21        		.uleb128 0x21
 1037 000d 0000 0000 		.long	.LASF53
 1038 0011 1D        		.byte	0x1d
 1039 0012 0000 0000 		.long	.LASF54
 1040 0016 0000 0000 		.long	.LASF55
 1041 001a 0000 0000 		.long	.Ltext0


 1042 001e 0000 03DA 		.long	.Letext0-.Ltext0
 1043 0022 0000 0000 		.long	.Ldebug_line0
 1044 0026 02        		.uleb128 0x2
 1045 0027 01        		.byte	0x1
 1046 0028 06        		.byte	0x6
 1047 0029 0000 0000 		.long	.LASF0
 1048 002d 02        		.uleb128 0x2
 1049 002e 01        		.byte	0x1
 1050 002f 08        		.byte	0x8
 1051 0030 0000 0000 		.long	.LASF1
 1052 0034 02        		.uleb128 0x2
 1053 0035 02        		.byte	0x2
 1054 0036 05        		.byte	0x5
 1055 0037 0000 0000 		.long	.LASF2
 1056 003b 02        		.uleb128 0x2
 1057 003c 02        		.byte	0x2
 1058 003d 07        		.byte	0x7
 1059 003e 0000 0000 		.long	.LASF3
 1060 0042 02        		.uleb128 0x2
 1061 0043 04        		.byte	0x4
 1062 0044 05        		.byte	0x5
 1063 0045 0000 0000 		.long	.LASF4
 1064 0049 02        		.uleb128 0x2
 1065 004a 04        		.byte	0x4
 1066 004b 07        		.byte	0x7
 1067 004c 0000 0000 		.long	.LASF5
 1068 0050 02        		.uleb128 0x2
 1069 0051 08        		.byte	0x8
 1070 0052 05        		.byte	0x5
 1071 0053 0000 0000 		.long	.LASF6
 1072 0057 02        		.uleb128 0x2
 1073 0058 08        		.byte	0x8
 1074 0059 07        		.byte	0x7
 1075 005a 0000 0000 		.long	.LASF7
 1076 005e 02        		.uleb128 0x2
 1077 005f 0C        		.byte	0xc
 1078 0060 04        		.byte	0x4
 1079 0061 0000 0000 		.long	.LASF8
 1080 0065 02        		.uleb128 0x2
 1081 0066 04        		.byte	0x4
 1082 0067 07        		.byte	0x7
 1083 0068 0000 0000 		.long	.LASF9
 1084 006c 22        		.uleb128 0x22
 1085 006d 04        		.byte	0x4
 1086 006e 05        		.byte	0x5
 1087 006f 696E 7400 		.string	"int"
 1088 0073 23        		.uleb128 0x23
 1089 0074 04        		.byte	0x4
 1090 0075 02        		.uleb128 0x2
 1091 0076 01        		.byte	0x1
 1092 0077 06        		.byte	0x6
 1093 0078 0000 0000 		.long	.LASF10
 1094 007c 0D        		.uleb128 0xd
 1095 007d 0000 0000 		.long	.LASF13
 1096 0081 14        		.byte	0x14
 1097 0082 0D        		.byte	0xd
 1098 0083 0000 006C 		.long	0x6c


 1099 0087 17        		.uleb128 0x17
 1100 0088 08        		.byte	0x8
 1101 0089 16        		.byte	0x16
 1102 008a 0000 00A7 		.long	0xa7
 1103 008e 05        		.uleb128 0x5
 1104 008f 0000 0000 		.long	.LASF11
 1105 0093 17        		.byte	0x17
 1106 0094 0F        		.byte	0xf
 1107 0095 0000 006C 		.long	0x6c
 1108 0099 00        		.byte	0
 1109 009a 05        		.uleb128 0x5
 1110 009b 0000 0000 		.long	.LASF12
 1111 009f 18        		.byte	0x18
 1112 00a0 0F        		.byte	0xf
 1113 00a1 0000 007C 		.long	0x7c
 1114 00a5 04        		.byte	0x4
 1115 00a6 00        		.byte	0
 1116 00a7 0D        		.uleb128 0xd
 1117 00a8 0000 0000 		.long	.LASF14
 1118 00ac 19        		.byte	0x19
 1119 00ad 03        		.byte	0x3
 1120 00ae 0000 0087 		.long	0x87
 1121 00b2 17        		.uleb128 0x17
 1122 00b3 14        		.byte	0x14
 1123 00b4 1B        		.byte	0x1b
 1124 00b5 0000 00F6 		.long	0xf6
 1125 00b9 05        		.uleb128 0x5
 1126 00ba 0000 0000 		.long	.LASF15
 1127 00be 1C        		.byte	0x1c
 1128 00bf 0E        		.byte	0xe
 1129 00c0 0000 00FD 		.long	0xfd
 1130 00c4 00        		.byte	0
 1131 00c5 05        		.uleb128 0x5
 1132 00c6 0000 0000 		.long	.LASF16
 1133 00ca 1D        		.byte	0x1d
 1134 00cb 0D        		.byte	0xd
 1135 00cc 0000 0073 		.long	0x73
 1136 00d0 04        		.byte	0x4
 1137 00d1 05        		.uleb128 0x5
 1138 00d2 0000 0000 		.long	.LASF17
 1139 00d6 1E        		.byte	0x1e
 1140 00d7 0F        		.byte	0xf
 1141 00d8 0000 006C 		.long	0x6c
 1142 00dc 08        		.byte	0x8
 1143 00dd 05        		.uleb128 0x5
 1144 00de 0000 0000 		.long	.LASF18
 1145 00e2 1F        		.byte	0x1f
 1146 00e3 0F        		.byte	0xf
 1147 00e4 0000 006C 		.long	0x6c
 1148 00e8 0C        		.byte	0xc
 1149 00e9 05        		.uleb128 0x5
 1150 00ea 0000 0000 		.long	.LASF19
 1151 00ee 20        		.byte	0x20
 1152 00ef 0F        		.byte	0xf
 1153 00f0 0000 007C 		.long	0x7c
 1154 00f4 10        		.byte	0x10
 1155 00f5 00        		.byte	0


 1156 00f6 24        		.uleb128 0x24
 1157 00f7 0000 00FD 		.long	0xfd
 1158 00fb 09        		.uleb128 0x9
 1159 00fc 00        		.byte	0
 1160 00fd 0A        		.uleb128 0xa
 1161 00fe 0000 00F6 		.long	0xf6
 1162 0102 0D        		.uleb128 0xd
 1163 0103 0000 0000 		.long	.LASF20
 1164 0107 21        		.byte	0x21
 1165 0108 03        		.byte	0x3
 1166 0109 0000 00B2 		.long	0xb2
 1167 010d 25        		.uleb128 0x25
 1168 010e 0800      		.word	0x800
 1169 0110 02        		.byte	0x2
 1170 0111 23        		.byte	0x23
 1171 0112 09        		.byte	0x9
 1172 0113 0000 0132 		.long	0x132
 1173 0117 05        		.uleb128 0x5
 1174 0118 0000 0000 		.long	.LASF21
 1175 011c 24        		.byte	0x24
 1176 011d 0F        		.byte	0xf
 1177 011e 0000 0132 		.long	0x132
 1178 0122 00        		.byte	0
 1179 0123 26        		.uleb128 0x26
 1180 0124 0000 0000 		.long	.LASF22
 1181 0128 02        		.byte	0x2
 1182 0129 25        		.byte	0x25
 1183 012a 0F        		.byte	0xf
 1184 012b 0000 0132 		.long	0x132
 1185 012f 0400      		.word	0x400
 1186 0131 00        		.byte	0
 1187 0132 0E        		.uleb128 0xe
 1188 0133 0000 0075 		.long	0x75
 1189 0137 0000 0143 		.long	0x143
 1190 013b 27        		.uleb128 0x27
 1191 013c 0000 0049 		.long	0x49
 1192 0140 03FF      		.word	0x3ff
 1193 0142 00        		.byte	0
 1194 0143 0D        		.uleb128 0xd
 1195 0144 0000 0000 		.long	.LASF23
 1196 0148 26        		.byte	0x26
 1197 0149 03        		.byte	0x3
 1198 014a 0000 010D 		.long	0x10d
 1199 014e 0E        		.uleb128 0xe
 1200 014f 0000 00A7 		.long	0xa7
 1201 0153 0000 015E 		.long	0x15e
 1202 0157 12        		.uleb128 0x12
 1203 0158 0000 0049 		.long	0x49
 1204 015c 02        		.byte	0x2
 1205 015d 00        		.byte	0
 1206 015e 06        		.uleb128 0x6
 1207 015f 0000 0000 		.long	.LASF24
 1208 0163 2B        		.byte	0x2b
 1209 0164 18        		.byte	0x18
 1210 0165 0000 014E 		.long	0x14e
 1211 0169 0E        		.uleb128 0xe
 1212 016a 0000 0102 		.long	0x102


 1213 016e 0000 0179 		.long	0x179
 1214 0172 12        		.uleb128 0x12
 1215 0173 0000 0049 		.long	0x49
 1216 0177 05        		.byte	0x5
 1217 0178 00        		.byte	0
 1218 0179 06        		.uleb128 0x6
 1219 017a 0000 0000 		.long	.LASF25
 1220 017e 2C        		.byte	0x2c
 1221 017f 16        		.byte	0x16
 1222 0180 0000 0169 		.long	0x169
 1223 0184 0E        		.uleb128 0xe
 1224 0185 0000 0143 		.long	0x143
 1225 0189 0000 0194 		.long	0x194
 1226 018d 12        		.uleb128 0x12
 1227 018e 0000 0049 		.long	0x49
 1228 0192 04        		.byte	0x4
 1229 0193 00        		.byte	0
 1230 0194 06        		.uleb128 0x6
 1231 0195 0000 0000 		.long	.LASF26
 1232 0199 2D        		.byte	0x2d
 1233 019a 17        		.byte	0x17
 1234 019b 0000 0184 		.long	0x184
 1235 019f 06        		.uleb128 0x6
 1236 01a0 0000 0000 		.long	.LASF27
 1237 01a4 2F        		.byte	0x2f
 1238 01a5 15        		.byte	0x15
 1239 01a6 0000 007C 		.long	0x7c
 1240 01aa 06        		.uleb128 0x6
 1241 01ab 0000 0000 		.long	.LASF28
 1242 01af 30        		.byte	0x30
 1243 01b0 15        		.byte	0x15
 1244 01b1 0000 007C 		.long	0x7c
 1245 01b5 06        		.uleb128 0x6
 1246 01b6 0000 0000 		.long	.LASF29
 1247 01ba 31        		.byte	0x31
 1248 01bb 15        		.byte	0x15
 1249 01bc 0000 007C 		.long	0x7c
 1250 01c0 06        		.uleb128 0x6
 1251 01c1 0000 0000 		.long	.LASF30
 1252 01c5 32        		.byte	0x32
 1253 01c6 15        		.byte	0x15
 1254 01c7 0000 007C 		.long	0x7c
 1255 01cb 07        		.uleb128 0x7
 1256 01cc 0000 015E 		.long	0x15e
 1257 01d0 04        		.byte	0x4
 1258 01d1 11        		.byte	0x11
 1259 01d2 05        		.uleb128 0x5
 1260 01d3 03        		.byte	0x3
 1261 01d4 0000 0000 		.long	semaphore
 1262 01d8 07        		.uleb128 0x7
 1263 01d9 0000 0179 		.long	0x179
 1264 01dd 05        		.byte	0x5
 1265 01de 0F        		.byte	0xf
 1266 01df 05        		.uleb128 0x5
 1267 01e0 03        		.byte	0x3
 1268 01e1 0000 0000 		.long	task_tab
 1269 01e5 07        		.uleb128 0x7


 1270 01e6 0000 0194 		.long	0x194
 1271 01ea 06        		.byte	0x6
 1272 01eb 10        		.byte	0x10
 1273 01ec 05        		.uleb128 0x5
 1274 01ed 03        		.byte	0x3
 1275 01ee 0000 0000 		.long	stacks
 1276 01f2 07        		.uleb128 0x7
 1277 01f3 0000 019F 		.long	0x19f
 1278 01f7 08        		.byte	0x8
 1279 01f8 0E        		.byte	0xe
 1280 01f9 05        		.uleb128 0x5
 1281 01fa 03        		.byte	0x3
 1282 01fb 0000 0000 		.long	curr_task
 1283 01ff 07        		.uleb128 0x7
 1284 0200 0000 01AA 		.long	0x1aa
 1285 0204 09        		.byte	0x9
 1286 0205 0E        		.byte	0xe
 1287 0206 05        		.uleb128 0x5
 1288 0207 03        		.byte	0x3
 1289 0208 0000 0000 		.long	new_task
 1290 020c 07        		.uleb128 0x7
 1291 020d 0000 01B5 		.long	0x1b5
 1292 0211 0A        		.byte	0xa
 1293 0212 0E        		.byte	0xe
 1294 0213 05        		.uleb128 0x5
 1295 0214 03        		.byte	0x3
 1296 0215 0000 0000 		.long	next_task
 1297 0219 07        		.uleb128 0x7
 1298 021a 0000 01C0 		.long	0x1c0
 1299 021e 0B        		.byte	0xb
 1300 021f 0E        		.byte	0xe
 1301 0220 05        		.uleb128 0x5
 1302 0221 03        		.byte	0x3
 1303 0222 0000 0000 		.long	ready
 1304 0226 0F        		.uleb128 0xf
 1305 0227 0000 0000 		.long	.LASF31
 1306 022b 45        		.byte	0x45
 1307 022c 0000 006C 		.long	0x6c
 1308 0230 0000 0236 		.long	0x236
 1309 0234 09        		.uleb128 0x9
 1310 0235 00        		.byte	0
 1311 0236 0F        		.uleb128 0xf
 1312 0237 0000 0000 		.long	.LASF32
 1313 023b 44        		.byte	0x44
 1314 023c 0000 006C 		.long	0x6c
 1315 0240 0000 0246 		.long	0x246
 1316 0244 09        		.uleb128 0x9
 1317 0245 00        		.byte	0
 1318 0246 0F        		.uleb128 0xf
 1319 0247 0000 0000 		.long	.LASF33
 1320 024b 4C        		.byte	0x4c
 1321 024c 0000 006C 		.long	0x6c
 1322 0250 0000 0256 		.long	0x256
 1323 0254 09        		.uleb128 0x9
 1324 0255 00        		.byte	0
 1325 0256 0F        		.uleb128 0xf
 1326 0257 0000 0000 		.long	.LASF34


 1327 025b 5B        		.byte	0x5b
 1328 025c 0000 006C 		.long	0x6c
 1329 0260 0000 0266 		.long	0x266
 1330 0264 09        		.uleb128 0x9
 1331 0265 00        		.byte	0
 1332 0266 0B        		.uleb128 0xb
 1333 0267 0000 0000 		.long	.LASF36
 1334 026b B9        		.byte	0xb9
 1335 026c 0000 0000 		.long	.LFB13
 1336 0270 0000 008C 		.long	.LFE13-.LFB13
 1337 0274 01        		.uleb128 0x1
 1338 0275 9C        		.byte	0x9c
 1339 0276 0000 032F 		.long	0x32f
 1340 027a 18        		.uleb128 0x18
 1341 027b 6368 00   		.string	"ch"
 1342 027e B9        		.byte	0xb9
 1343 027f 11        		.byte	0x11
 1344 0280 0000 006C 		.long	0x6c
 1345 0284 02        		.uleb128 0x2
 1346 0285 91        		.byte	0x91
 1347 0286 00        		.sleb128 0
 1348 0287 28        		.uleb128 0x28
 1349 0288 0000 0000 		.long	.LASF35
 1350 028c 01        		.byte	0x1
 1351 028d BA        		.byte	0xba
 1352 028e 0F        		.byte	0xf
 1353 028f 0000 007C 		.long	0x7c
 1354 0293 0000 0000 		.long	.LLST29
 1355 0297 0000 0000 		.long	.LVUS29
 1356 029b 13        		.uleb128 0x13
 1357 029c 0000 0464 		.long	0x464
 1358 02a0 0000 0000 		.long	.LBI64
 1359 02a4 02        		.byte	.LVU286
 1360 02a5 0000 0000 		.long	.LBB64
 1361 02a9 0000 002E 		.long	.LBE64-.LBB64
 1362 02ad BB        		.byte	0xbb
 1363 02ae 0C        		.byte	0xc
 1364 02af 0000 02E9 		.long	0x2e9
 1365 02b3 03        		.uleb128 0x3
 1366 02b4 0000 0473 		.long	0x473
 1367 02b8 0000 0000 		.long	.LLST30
 1368 02bc 0000 0000 		.long	.LVUS30
 1369 02c0 01        		.uleb128 0x1
 1370 02c1 0000 047E 		.long	0x47e
 1371 02c5 0000 0000 		.long	.LLST31
 1372 02c9 0000 0000 		.long	.LVUS31
 1373 02cd 04        		.uleb128 0x4
 1374 02ce 0000 0489 		.long	0x489
 1375 02d2 0000 0000 		.long	.LBB66
 1376 02d6 0000 0018 		.long	.LBE66-.LBB66
 1377 02da 01        		.uleb128 0x1
 1378 02db 0000 048A 		.long	0x48a
 1379 02df 0000 0000 		.long	.LLST32
 1380 02e3 0000 0000 		.long	.LVUS32
 1381 02e7 00        		.byte	0
 1382 02e8 00        		.byte	0
 1383 02e9 10        		.uleb128 0x10


 1384 02ea 0000 04A1 		.long	0x4a1
 1385 02ee 0000 0000 		.long	.LBI67
 1386 02f2 04        		.byte	.LVU302
 1387 02f3 0000 0000 		.long	.LLRL33
 1388 02f7 BC        		.byte	0xbc
 1389 02f8 02        		.byte	0x2
 1390 02f9 03        		.uleb128 0x3
 1391 02fa 0000 04B9 		.long	0x4b9
 1392 02fe 0000 0000 		.long	.LLST34
 1393 0302 0000 0000 		.long	.LVUS34
 1394 0306 08        		.uleb128 0x8
 1395 0307 0000 04AE 		.long	0x4ae
 1396 030b 06        		.uleb128 0x6
 1397 030c 03        		.byte	0x3
 1398 030d 0000 0000 		.long	ready
 1399 0311 9F        		.byte	0x9f
 1400 0312 04        		.uleb128 0x4
 1401 0313 0000 04C3 		.long	0x4c3
 1402 0317 0000 0000 		.long	.LBB69
 1403 031b 0000 0046 		.long	.LBE69-.LBB69
 1404 031f 01        		.uleb128 0x1
 1405 0320 0000 04C4 		.long	0x4c4
 1406 0324 0000 0000 		.long	.LLST35
 1407 0328 0000 0000 		.long	.LVUS35
 1408 032c 00        		.byte	0
 1409 032d 00        		.byte	0
 1410 032e 00        		.byte	0
 1411 032f 0B        		.uleb128 0xb
 1412 0330 0000 0000 		.long	.LASF37
 1413 0334 B2        		.byte	0xb2
 1414 0335 0000 0000 		.long	.LFB12
 1415 0339 0000 002A 		.long	.LFE12-.LFB12
 1416 033d 01        		.uleb128 0x1
 1417 033e 9C        		.byte	0x9c
 1418 033f 0000 035B 		.long	0x35b
 1419 0343 14        		.uleb128 0x14
 1420 0344 0000 0000 		.long	.LASF38
 1421 0348 B2        		.byte	0xb2
 1422 0349 1A        		.byte	0x1a
 1423 034a 0000 007C 		.long	0x7c
 1424 034e 02        		.uleb128 0x2
 1425 034f 91        		.byte	0x91
 1426 0350 00        		.sleb128 0
 1427 0351 15        		.uleb128 0x15
 1428 0352 0000 0000 		.long	.LVL80
 1429 0356 0000 0266 		.long	0x266
 1430 035a 00        		.byte	0
 1431 035b 0B        		.uleb128 0xb
 1432 035c 0000 0000 		.long	.LASF39
 1433 0360 A7        		.byte	0xa7
 1434 0361 0000 0000 		.long	.LFB11
 1435 0365 0000 00A0 		.long	.LFE11-.LFB11
 1436 0369 01        		.uleb128 0x1
 1437 036a 9C        		.byte	0x9c
 1438 036b 0000 042F 		.long	0x42f
 1439 036f 18        		.uleb128 0x18
 1440 0370 6368 00   		.string	"ch"


 1441 0373 A7        		.byte	0xa7
 1442 0374 10        		.byte	0x10
 1443 0375 0000 006C 		.long	0x6c
 1444 0379 02        		.uleb128 0x2
 1445 037a 91        		.byte	0x91
 1446 037b 00        		.sleb128 0
 1447 037c 19        		.uleb128 0x19
 1448 037d 0000 04A1 		.long	0x4a1
 1449 0381 0000 0000 		.long	.LBI50
 1450 0385 00        		.byte	.LVU208
 1451 0386 0000 0000 		.long	.LLRL20
 1452 038a A8        		.byte	0xa8
 1453 038b 0000 03C5 		.long	0x3c5
 1454 038f 03        		.uleb128 0x3
 1455 0390 0000 04B9 		.long	0x4b9
 1456 0394 0000 0000 		.long	.LLST21
 1457 0398 0000 0000 		.long	.LVUS21
 1458 039c 03        		.uleb128 0x3
 1459 039d 0000 04AE 		.long	0x4ae
 1460 03a1 0000 0000 		.long	.LLST22
 1461 03a5 0000 0000 		.long	.LVUS22
 1462 03a9 04        		.uleb128 0x4
 1463 03aa 0000 04C3 		.long	0x4c3
 1464 03ae 0000 0000 		.long	.LBB52
 1465 03b2 0000 0046 		.long	.LBE52-.LBB52
 1466 03b6 01        		.uleb128 0x1
 1467 03b7 0000 04C4 		.long	0x4c4
 1468 03bb 0000 0000 		.long	.LLST23
 1469 03bf 0000 0000 		.long	.LVUS23
 1470 03c3 00        		.byte	0
 1471 03c4 00        		.byte	0
 1472 03c5 19        		.uleb128 0x19
 1473 03c6 0000 045B 		.long	0x45b
 1474 03ca 0000 0000 		.long	.LBI54
 1475 03ce 02        		.byte	.LVU217
 1476 03cf 0000 0000 		.long	.LLRL24
 1477 03d3 A9        		.byte	0xa9
 1478 03d4 0000 0425 		.long	0x425
 1479 03d8 10        		.uleb128 0x10
 1480 03d9 0000 0464 		.long	0x464
 1481 03dd 0000 0000 		.long	.LBI56
 1482 03e1 04        		.byte	.LVU219
 1483 03e2 0000 0000 		.long	.LLRL25
 1484 03e6 93        		.byte	0x93
 1485 03e7 0E        		.byte	0xe
 1486 03e8 03        		.uleb128 0x3
 1487 03e9 0000 0473 		.long	0x473
 1488 03ed 0000 0000 		.long	.LLST26
 1489 03f1 0000 0000 		.long	.LVUS26
 1490 03f5 1A        		.uleb128 0x1a
 1491 03f6 0000 0000 		.long	.LLRL25
 1492 03fa 01        		.uleb128 0x1
 1493 03fb 0000 047E 		.long	0x47e
 1494 03ff 0000 0000 		.long	.LLST27
 1495 0403 0000 0000 		.long	.LVUS27
 1496 0407 04        		.uleb128 0x4
 1497 0408 0000 0489 		.long	0x489


 1498 040c 0000 0000 		.long	.LBB58
 1499 0410 0000 0018 		.long	.LBE58-.LBB58
 1500 0414 01        		.uleb128 0x1
 1501 0415 0000 048A 		.long	0x48a
 1502 0419 0000 0000 		.long	.LLST28
 1503 041d 0000 0000 		.long	.LVUS28
 1504 0421 00        		.byte	0
 1505 0422 00        		.byte	0
 1506 0423 00        		.byte	0
 1507 0424 00        		.byte	0
 1508 0425 15        		.uleb128 0x15
 1509 0426 0000 0000 		.long	.LVL58
 1510 042a 0000 0226 		.long	0x226
 1511 042e 00        		.byte	0
 1512 042f 0B        		.uleb128 0xb
 1513 0430 0000 0000 		.long	.LASF40
 1514 0434 A0        		.byte	0xa0
 1515 0435 0000 0000 		.long	.LFB10
 1516 0439 0000 002A 		.long	.LFE10-.LFB10
 1517 043d 01        		.uleb128 0x1
 1518 043e 9C        		.byte	0x9c
 1519 043f 0000 045B 		.long	0x45b
 1520 0443 14        		.uleb128 0x14
 1521 0444 0000 0000 		.long	.LASF38
 1522 0448 A0        		.byte	0xa0
 1523 0449 1A        		.byte	0x1a
 1524 044a 0000 007C 		.long	0x7c
 1525 044e 02        		.uleb128 0x2
 1526 044f 91        		.byte	0x91
 1527 0450 00        		.sleb128 0
 1528 0451 15        		.uleb128 0x15
 1529 0452 0000 0000 		.long	.LVL68
 1530 0456 0000 035B 		.long	0x35b
 1531 045a 00        		.byte	0
 1532 045b 29        		.uleb128 0x29
 1533 045c 0000 0000 		.long	.LASF56
 1534 0460 01        		.byte	0x1
 1535 0461 92        		.byte	0x92
 1536 0462 06        		.byte	0x6
 1537 0463 01        		.byte	0x1
 1538 0464 1B        		.uleb128 0x1b
 1539 0465 0000 0000 		.long	.LASF45
 1540 0469 87        		.byte	0x87
 1541 046a 0E        		.byte	0xe
 1542 046b 0000 007C 		.long	0x7c
 1543 046f 0000 0497 		.long	0x497
 1544 0473 1C        		.uleb128 0x1c
 1545 0474 0000 0000 		.long	.LASF44
 1546 0478 87        		.byte	0x87
 1547 0479 24        		.byte	0x24
 1548 047a 0000 0497 		.long	0x497
 1549 047e 0C        		.uleb128 0xc
 1550 047f 0000 0000 		.long	.LASF41
 1551 0483 88        		.byte	0x88
 1552 0484 0F        		.byte	0xf
 1553 0485 0000 007C 		.long	0x7c
 1554 0489 1D        		.uleb128 0x1d


 1555 048a 0C        		.uleb128 0xc
 1556 048b 0000 0000 		.long	.LASF42
 1557 048f 8A        		.byte	0x8a
 1558 0490 0D        		.byte	0xd
 1559 0491 0000 049C 		.long	0x49c
 1560 0495 00        		.byte	0
 1561 0496 00        		.byte	0
 1562 0497 0A        		.uleb128 0xa
 1563 0498 0000 007C 		.long	0x7c
 1564 049c 0A        		.uleb128 0xa
 1565 049d 0000 0102 		.long	0x102
 1566 04a1 2A        		.uleb128 0x2a
 1567 04a2 0000 0000 		.long	.LASF43
 1568 04a6 01        		.byte	0x1
 1569 04a7 74        		.byte	0x74
 1570 04a8 06        		.byte	0x6
 1571 04a9 01        		.byte	0x1
 1572 04aa 0000 04D1 		.long	0x4d1
 1573 04ae 1C        		.uleb128 0x1c
 1574 04af 0000 0000 		.long	.LASF44
 1575 04b3 74        		.byte	0x74
 1576 04b4 19        		.byte	0x19
 1577 04b5 0000 0497 		.long	0x497
 1578 04b9 1E        		.uleb128 0x1e
 1579 04ba 6964 00   		.string	"id"
 1580 04bd 74        		.byte	0x74
 1581 04be 2F        		.byte	0x2f
 1582 04bf 0000 007C 		.long	0x7c
 1583 04c3 1D        		.uleb128 0x1d
 1584 04c4 0C        		.uleb128 0xc
 1585 04c5 0000 0000 		.long	.LASF42
 1586 04c9 79        		.byte	0x79
 1587 04ca 0D        		.byte	0xd
 1588 04cb 0000 049C 		.long	0x49c
 1589 04cf 00        		.byte	0
 1590 04d0 00        		.byte	0
 1591 04d1 1F        		.uleb128 0x1f
 1592 04d2 0000 0000 		.long	.LASF51
 1593 04d6 6C        		.byte	0x6c
 1594 04d7 0000 0000 		.long	.LFB6
 1595 04db 0000 0044 		.long	.LFE6-.LFB6
 1596 04df 01        		.uleb128 0x1
 1597 04e0 9C        		.byte	0x9c
 1598 04e1 0000 054F 		.long	0x54f
 1599 04e5 13        		.uleb128 0x13
 1600 04e6 0000 0464 		.long	0x464
 1601 04ea 0000 0000 		.long	.LBI29
 1602 04ee 02        		.byte	.LVU122
 1603 04ef 0000 0000 		.long	.LBB29
 1604 04f3 0000 0022 		.long	.LBE29-.LBB29
 1605 04f7 6D        		.byte	0x6d
 1606 04f8 0F        		.byte	0xf
 1607 04f9 0000 0533 		.long	0x533
 1608 04fd 03        		.uleb128 0x3
 1609 04fe 0000 0473 		.long	0x473
 1610 0502 0000 0000 		.long	.LLST10
 1611 0506 0000 0000 		.long	.LVUS10


 1612 050a 01        		.uleb128 0x1
 1613 050b 0000 047E 		.long	0x47e
 1614 050f 0000 0000 		.long	.LLST11
 1615 0513 0000 0000 		.long	.LVUS11
 1616 0517 04        		.uleb128 0x4
 1617 0518 0000 0489 		.long	0x489
 1618 051c 0000 0000 		.long	.LBB31
 1619 0520 0000 001A 		.long	.LBE31-.LBB31
 1620 0524 01        		.uleb128 0x1
 1621 0525 0000 048A 		.long	0x48a
 1622 0529 0000 0000 		.long	.LLST12
 1623 052d 0000 0000 		.long	.LVUS12
 1624 0531 00        		.byte	0
 1625 0532 00        		.byte	0
 1626 0533 16        		.uleb128 0x16
 1627 0534 0000 0000 		.long	.LVL34
 1628 0538 0000 0246 		.long	0x246
 1629 053c 16        		.uleb128 0x16
 1630 053d 0000 0000 		.long	.LVL35
 1631 0541 0000 0236 		.long	0x236
 1632 0545 16        		.uleb128 0x16
 1633 0546 0000 0000 		.long	.LVL36
 1634 054a 0000 0781 		.long	0x781
 1635 054e 00        		.byte	0
 1636 054f 1B        		.uleb128 0x1b
 1637 0550 0000 0000 		.long	.LASF46
 1638 0554 56        		.byte	0x56
 1639 0555 07        		.byte	0x7
 1640 0556 0000 0073 		.long	0x73
 1641 055a 0000 057F 		.long	0x57f
 1642 055e 1E        		.uleb128 0x1e
 1643 055f 6964 00   		.string	"id"
 1644 0562 56        		.byte	0x56
 1645 0563 1F        		.byte	0x1f
 1646 0564 0000 007C 		.long	0x7c
 1647 0568 0C        		.uleb128 0xc
 1648 0569 0000 0000 		.long	.LASF47
 1649 056d 57        		.byte	0x57
 1650 056e 0A        		.byte	0xa
 1651 056f 0000 057F 		.long	0x57f
 1652 0573 0C        		.uleb128 0xc
 1653 0574 0000 0000 		.long	.LASF48
 1654 0578 59        		.byte	0x59
 1655 0579 19        		.byte	0x19
 1656 057a 0000 0584 		.long	0x584
 1657 057e 00        		.byte	0
 1658 057f 0A        		.uleb128 0xa
 1659 0580 0000 006C 		.long	0x6c
 1660 0584 0A        		.uleb128 0xa
 1661 0585 0000 003B 		.long	0x3b
 1662 0589 0B        		.uleb128 0xb
 1663 058a 0000 0000 		.long	.LASF49
 1664 058e 39        		.byte	0x39
 1665 058f 0000 0000 		.long	.LFB4
 1666 0593 0000 00D4 		.long	.LFE4-.LFB4
 1667 0597 01        		.uleb128 0x1
 1668 0598 9C        		.byte	0x9c


 1669 0599 0000 0642 		.long	0x642
 1670 059d 14        		.uleb128 0x14
 1671 059e 0000 0000 		.long	.LASF50
 1672 05a2 39        		.byte	0x39
 1673 05a3 16        		.byte	0x16
 1674 05a4 0000 00FD 		.long	0xfd
 1675 05a8 02        		.uleb128 0x2
 1676 05a9 91        		.byte	0x91
 1677 05aa 00        		.sleb128 0
 1678 05ab 20        		.uleb128 0x20
 1679 05ac 6900      		.string	"i"
 1680 05ae 3A        		.byte	0x3a
 1681 05af 12        		.byte	0x12
 1682 05b0 0000 007C 		.long	0x7c
 1683 05b4 0000 0000 		.long	.LLST1
 1684 05b8 0000 0000 		.long	.LVUS1
 1685 05bc 13        		.uleb128 0x13
 1686 05bd 0000 054F 		.long	0x54f
 1687 05c1 0000 0000 		.long	.LBI22
 1688 05c5 01        		.byte	.LVU59
 1689 05c6 0000 0000 		.long	.LBB22
 1690 05ca 0000 002A 		.long	.LBE22-.LBB22
 1691 05ce 41        		.byte	0x41
 1692 05cf 25        		.byte	0x25
 1693 05d0 0000 05FC 		.long	0x5fc
 1694 05d4 03        		.uleb128 0x3
 1695 05d5 0000 055E 		.long	0x55e
 1696 05d9 0000 0000 		.long	.LLST2
 1697 05dd 0000 0000 		.long	.LVUS2
 1698 05e1 01        		.uleb128 0x1
 1699 05e2 0000 0568 		.long	0x568
 1700 05e6 0000 0000 		.long	.LLST3
 1701 05ea 0000 0000 		.long	.LVUS3
 1702 05ee 01        		.uleb128 0x1
 1703 05ef 0000 0573 		.long	0x573
 1704 05f3 0000 0000 		.long	.LLST4
 1705 05f7 0000 0000 		.long	.LVUS4
 1706 05fb 00        		.byte	0
 1707 05fc 10        		.uleb128 0x10
 1708 05fd 0000 04A1 		.long	0x4a1
 1709 0601 0000 0000 		.long	.LBI24
 1710 0605 01        		.byte	.LVU75
 1711 0606 0000 0000 		.long	.LLRL5
 1712 060a 42        		.byte	0x42
 1713 060b 0D        		.byte	0xd
 1714 060c 03        		.uleb128 0x3
 1715 060d 0000 04B9 		.long	0x4b9
 1716 0611 0000 0000 		.long	.LLST6
 1717 0615 0000 0000 		.long	.LVUS6
 1718 0619 08        		.uleb128 0x8
 1719 061a 0000 04AE 		.long	0x4ae
 1720 061e 06        		.uleb128 0x6
 1721 061f 03        		.byte	0x3
 1722 0620 0000 0000 		.long	ready
 1723 0624 9F        		.byte	0x9f
 1724 0625 04        		.uleb128 0x4
 1725 0626 0000 04C3 		.long	0x4c3


 1726 062a 0000 0000 		.long	.LBB26
 1727 062e 0000 0040 		.long	.LBE26-.LBB26
 1728 0632 01        		.uleb128 0x1
 1729 0633 0000 04C4 		.long	0x4c4
 1730 0637 0000 0000 		.long	.LLST7
 1731 063b 0000 0000 		.long	.LVUS7
 1732 063f 00        		.byte	0
 1733 0640 00        		.byte	0
 1734 0641 00        		.byte	0
 1735 0642 1F        		.uleb128 0x1f
 1736 0643 0000 0000 		.long	.LASF52
 1737 0647 15        		.byte	0x15
 1738 0648 0000 0000 		.long	.LFB3
 1739 064c 0000 005C 		.long	.LFE3-.LFB3
 1740 0650 01        		.uleb128 0x1
 1741 0651 9C        		.byte	0x9c
 1742 0652 0000 0668 		.long	0x668
 1743 0656 20        		.uleb128 0x20
 1744 0657 6900      		.string	"i"
 1745 0659 16        		.byte	0x16
 1746 065a 06        		.byte	0x6
 1747 065b 0000 006C 		.long	0x6c
 1748 065f 0000 0000 		.long	.LLST0
 1749 0663 0000 0000 		.long	.LVUS0
 1750 0667 00        		.byte	0
 1751 0668 11        		.uleb128 0x11
 1752 0669 0000 054F 		.long	0x54f
 1753 066d 0000 0000 		.long	.LFB5
 1754 0671 0000 0042 		.long	.LFE5-.LFB5
 1755 0675 01        		.uleb128 0x1
 1756 0676 9C        		.byte	0x9c
 1757 0677 0000 069E 		.long	0x69e
 1758 067b 08        		.uleb128 0x8
 1759 067c 0000 055E 		.long	0x55e
 1760 0680 02        		.uleb128 0x2
 1761 0681 91        		.byte	0x91
 1762 0682 00        		.sleb128 0
 1763 0683 01        		.uleb128 0x1
 1764 0684 0000 0568 		.long	0x568
 1765 0688 0000 0000 		.long	.LLST8
 1766 068c 0000 0000 		.long	.LVUS8
 1767 0690 01        		.uleb128 0x1
 1768 0691 0000 0573 		.long	0x573
 1769 0695 0000 0000 		.long	.LLST9
 1770 0699 0000 0000 		.long	.LVUS9
 1771 069d 00        		.byte	0
 1772 069e 11        		.uleb128 0x11
 1773 069f 0000 04A1 		.long	0x4a1
 1774 06a3 0000 0000 		.long	.LFB7
 1775 06a7 0000 0058 		.long	.LFE7-.LFB7
 1776 06ab 01        		.uleb128 0x1
 1777 06ac 9C        		.byte	0x9c
 1778 06ad 0000 06DD 		.long	0x6dd
 1779 06b1 08        		.uleb128 0x8
 1780 06b2 0000 04AE 		.long	0x4ae
 1781 06b6 02        		.uleb128 0x2
 1782 06b7 91        		.byte	0x91


 1783 06b8 00        		.sleb128 0
 1784 06b9 08        		.uleb128 0x8
 1785 06ba 0000 04B9 		.long	0x4b9
 1786 06be 02        		.uleb128 0x2
 1787 06bf 91        		.byte	0x91
 1788 06c0 04        		.sleb128 4
 1789 06c1 04        		.uleb128 0x4
 1790 06c2 0000 04C3 		.long	0x4c3
 1791 06c6 0000 0000 		.long	.LBB32
 1792 06ca 0000 0048 		.long	.LBE32-.LBB32
 1793 06ce 01        		.uleb128 0x1
 1794 06cf 0000 04C4 		.long	0x4c4
 1795 06d3 0000 0000 		.long	.LLST13
 1796 06d7 0000 0000 		.long	.LVUS13
 1797 06db 00        		.byte	0
 1798 06dc 00        		.byte	0
 1799 06dd 11        		.uleb128 0x11
 1800 06de 0000 0464 		.long	0x464
 1801 06e2 0000 0000 		.long	.LFB8
 1802 06e6 0000 0020 		.long	.LFE8-.LFB8
 1803 06ea 01        		.uleb128 0x1
 1804 06eb 9C        		.byte	0x9c
 1805 06ec 0000 0721 		.long	0x721
 1806 06f0 08        		.uleb128 0x8
 1807 06f1 0000 0473 		.long	0x473
 1808 06f5 02        		.uleb128 0x2
 1809 06f6 91        		.byte	0x91
 1810 06f7 00        		.sleb128 0
 1811 06f8 01        		.uleb128 0x1
 1812 06f9 0000 047E 		.long	0x47e
 1813 06fd 0000 0000 		.long	.LLST14
 1814 0701 0000 0000 		.long	.LVUS14
 1815 0705 04        		.uleb128 0x4
 1816 0706 0000 0489 		.long	0x489
 1817 070a 0000 0000 		.long	.LBB33
 1818 070e 0000 0016 		.long	.LBE33-.LBB33
 1819 0712 01        		.uleb128 0x1
 1820 0713 0000 048A 		.long	0x48a
 1821 0717 0000 0000 		.long	.LLST15
 1822 071b 0000 0000 		.long	.LVUS15
 1823 071f 00        		.byte	0
 1824 0720 00        		.byte	0
 1825 0721 11        		.uleb128 0x11
 1826 0722 0000 045B 		.long	0x45b
 1827 0726 0000 0000 		.long	.LFB9
 1828 072a 0000 002C 		.long	.LFE9-.LFB9
 1829 072e 01        		.uleb128 0x1
 1830 072f 9C        		.byte	0x9c
 1831 0730 0000 0781 		.long	0x781
 1832 0734 10        		.uleb128 0x10
 1833 0735 0000 0464 		.long	0x464
 1834 0739 0000 0000 		.long	.LBI37
 1835 073d 02        		.byte	.LVU182
 1836 073e 0000 0000 		.long	.LLRL16
 1837 0742 93        		.byte	0x93
 1838 0743 0E        		.byte	0xe
 1839 0744 03        		.uleb128 0x3


 1840 0745 0000 0473 		.long	0x473
 1841 0749 0000 0000 		.long	.LLST17
 1842 074d 0000 0000 		.long	.LVUS17
 1843 0751 1A        		.uleb128 0x1a
 1844 0752 0000 0000 		.long	.LLRL16
 1845 0756 01        		.uleb128 0x1
 1846 0757 0000 047E 		.long	0x47e
 1847 075b 0000 0000 		.long	.LLST18
 1848 075f 0000 0000 		.long	.LVUS18
 1849 0763 04        		.uleb128 0x4
 1850 0764 0000 0489 		.long	0x489
 1851 0768 0000 0000 		.long	.LBB39
 1852 076c 0000 001A 		.long	.LBE39-.LBB39
 1853 0770 01        		.uleb128 0x1
 1854 0771 0000 048A 		.long	0x48a
 1855 0775 0000 0000 		.long	.LLST19
 1856 0779 0000 0000 		.long	.LVUS19
 1857 077d 00        		.byte	0
 1858 077e 00        		.byte	0
 1859 077f 00        		.byte	0
 1860 0780 00        		.byte	0
 1861 0781 2B        		.uleb128 0x2b
 1862 0782 0000 0000 		.long	.LASF57
 1863 0786 0000 0000 		.long	.LASF58
 1864 078a 03        		.byte	0x3
 1865 078b 00        		.byte	0
 1866 078c 00        		.byte	0
 1867               		.section	.debug_abbrev,"",@progbits
 1868               	.Ldebug_abbrev0:
 1869 0000 01        		.uleb128 0x1
 1870 0001 34        		.uleb128 0x34
 1871 0002 00        		.byte	0
 1872 0003 31        		.uleb128 0x31
 1873 0004 13        		.uleb128 0x13
 1874 0005 02        		.uleb128 0x2
 1875 0006 17        		.uleb128 0x17
 1876 0007 B742      		.uleb128 0x2137
 1877 0009 17        		.uleb128 0x17
 1878 000a 00        		.byte	0
 1879 000b 00        		.byte	0
 1880 000c 02        		.uleb128 0x2
 1881 000d 24        		.uleb128 0x24
 1882 000e 00        		.byte	0
 1883 000f 0B        		.uleb128 0xb
 1884 0010 0B        		.uleb128 0xb
 1885 0011 3E        		.uleb128 0x3e
 1886 0012 0B        		.uleb128 0xb
 1887 0013 03        		.uleb128 0x3
 1888 0014 0E        		.uleb128 0xe
 1889 0015 00        		.byte	0
 1890 0016 00        		.byte	0
 1891 0017 03        		.uleb128 0x3
 1892 0018 05        		.uleb128 0x5
 1893 0019 00        		.byte	0
 1894 001a 31        		.uleb128 0x31
 1895 001b 13        		.uleb128 0x13
 1896 001c 02        		.uleb128 0x2


 1897 001d 17        		.uleb128 0x17
 1898 001e B742      		.uleb128 0x2137
 1899 0020 17        		.uleb128 0x17
 1900 0021 00        		.byte	0
 1901 0022 00        		.byte	0
 1902 0023 04        		.uleb128 0x4
 1903 0024 0B        		.uleb128 0xb
 1904 0025 01        		.byte	0x1
 1905 0026 31        		.uleb128 0x31
 1906 0027 13        		.uleb128 0x13
 1907 0028 11        		.uleb128 0x11
 1908 0029 01        		.uleb128 0x1
 1909 002a 12        		.uleb128 0x12
 1910 002b 06        		.uleb128 0x6
 1911 002c 00        		.byte	0
 1912 002d 00        		.byte	0
 1913 002e 05        		.uleb128 0x5
 1914 002f 0D        		.uleb128 0xd
 1915 0030 00        		.byte	0
 1916 0031 03        		.uleb128 0x3
 1917 0032 0E        		.uleb128 0xe
 1918 0033 3A        		.uleb128 0x3a
 1919 0034 21        		.uleb128 0x21
 1920 0035 02        		.sleb128 2
 1921 0036 3B        		.uleb128 0x3b
 1922 0037 0B        		.uleb128 0xb
 1923 0038 39        		.uleb128 0x39
 1924 0039 0B        		.uleb128 0xb
 1925 003a 49        		.uleb128 0x49
 1926 003b 13        		.uleb128 0x13
 1927 003c 38        		.uleb128 0x38
 1928 003d 0B        		.uleb128 0xb
 1929 003e 00        		.byte	0
 1930 003f 00        		.byte	0
 1931 0040 06        		.uleb128 0x6
 1932 0041 34        		.uleb128 0x34
 1933 0042 00        		.byte	0
 1934 0043 03        		.uleb128 0x3
 1935 0044 0E        		.uleb128 0xe
 1936 0045 3A        		.uleb128 0x3a
 1937 0046 21        		.uleb128 0x21
 1938 0047 02        		.sleb128 2
 1939 0048 3B        		.uleb128 0x3b
 1940 0049 0B        		.uleb128 0xb
 1941 004a 39        		.uleb128 0x39
 1942 004b 0B        		.uleb128 0xb
 1943 004c 49        		.uleb128 0x49
 1944 004d 13        		.uleb128 0x13
 1945 004e 3F        		.uleb128 0x3f
 1946 004f 19        		.uleb128 0x19
 1947 0050 3C        		.uleb128 0x3c
 1948 0051 19        		.uleb128 0x19
 1949 0052 00        		.byte	0
 1950 0053 00        		.byte	0
 1951 0054 07        		.uleb128 0x7
 1952 0055 34        		.uleb128 0x34
 1953 0056 00        		.byte	0


 1954 0057 47        		.uleb128 0x47
 1955 0058 13        		.uleb128 0x13
 1956 0059 3A        		.uleb128 0x3a
 1957 005a 21        		.uleb128 0x21
 1958 005b 01        		.sleb128 1
 1959 005c 3B        		.uleb128 0x3b
 1960 005d 0B        		.uleb128 0xb
 1961 005e 39        		.uleb128 0x39
 1962 005f 0B        		.uleb128 0xb
 1963 0060 02        		.uleb128 0x2
 1964 0061 18        		.uleb128 0x18
 1965 0062 00        		.byte	0
 1966 0063 00        		.byte	0
 1967 0064 08        		.uleb128 0x8
 1968 0065 05        		.uleb128 0x5
 1969 0066 00        		.byte	0
 1970 0067 31        		.uleb128 0x31
 1971 0068 13        		.uleb128 0x13
 1972 0069 02        		.uleb128 0x2
 1973 006a 18        		.uleb128 0x18
 1974 006b 00        		.byte	0
 1975 006c 00        		.byte	0
 1976 006d 09        		.uleb128 0x9
 1977 006e 18        		.uleb128 0x18
 1978 006f 00        		.byte	0
 1979 0070 00        		.byte	0
 1980 0071 00        		.byte	0
 1981 0072 0A        		.uleb128 0xa
 1982 0073 0F        		.uleb128 0xf
 1983 0074 00        		.byte	0
 1984 0075 0B        		.uleb128 0xb
 1985 0076 21        		.uleb128 0x21
 1986 0077 04        		.sleb128 4
 1987 0078 49        		.uleb128 0x49
 1988 0079 13        		.uleb128 0x13
 1989 007a 00        		.byte	0
 1990 007b 00        		.byte	0
 1991 007c 0B        		.uleb128 0xb
 1992 007d 2E        		.uleb128 0x2e
 1993 007e 01        		.byte	0x1
 1994 007f 3F        		.uleb128 0x3f
 1995 0080 19        		.uleb128 0x19
 1996 0081 03        		.uleb128 0x3
 1997 0082 0E        		.uleb128 0xe
 1998 0083 3A        		.uleb128 0x3a
 1999 0084 21        		.uleb128 0x21
 2000 0085 01        		.sleb128 1
 2001 0086 3B        		.uleb128 0x3b
 2002 0087 0B        		.uleb128 0xb
 2003 0088 39        		.uleb128 0x39
 2004 0089 21        		.uleb128 0x21
 2005 008a 06        		.sleb128 6
 2006 008b 27        		.uleb128 0x27
 2007 008c 19        		.uleb128 0x19
 2008 008d 11        		.uleb128 0x11
 2009 008e 01        		.uleb128 0x1
 2010 008f 12        		.uleb128 0x12


 2011 0090 06        		.uleb128 0x6
 2012 0091 40        		.uleb128 0x40
 2013 0092 18        		.uleb128 0x18
 2014 0093 7A        		.uleb128 0x7a
 2015 0094 19        		.uleb128 0x19
 2016 0095 01        		.uleb128 0x1
 2017 0096 13        		.uleb128 0x13
 2018 0097 00        		.byte	0
 2019 0098 00        		.byte	0
 2020 0099 0C        		.uleb128 0xc
 2021 009a 34        		.uleb128 0x34
 2022 009b 00        		.byte	0
 2023 009c 03        		.uleb128 0x3
 2024 009d 0E        		.uleb128 0xe
 2025 009e 3A        		.uleb128 0x3a
 2026 009f 21        		.uleb128 0x21
 2027 00a0 01        		.sleb128 1
 2028 00a1 3B        		.uleb128 0x3b
 2029 00a2 0B        		.uleb128 0xb
 2030 00a3 39        		.uleb128 0x39
 2031 00a4 0B        		.uleb128 0xb
 2032 00a5 49        		.uleb128 0x49
 2033 00a6 13        		.uleb128 0x13
 2034 00a7 00        		.byte	0
 2035 00a8 00        		.byte	0
 2036 00a9 0D        		.uleb128 0xd
 2037 00aa 16        		.uleb128 0x16
 2038 00ab 00        		.byte	0
 2039 00ac 03        		.uleb128 0x3
 2040 00ad 0E        		.uleb128 0xe
 2041 00ae 3A        		.uleb128 0x3a
 2042 00af 21        		.uleb128 0x21
 2043 00b0 02        		.sleb128 2
 2044 00b1 3B        		.uleb128 0x3b
 2045 00b2 0B        		.uleb128 0xb
 2046 00b3 39        		.uleb128 0x39
 2047 00b4 0B        		.uleb128 0xb
 2048 00b5 49        		.uleb128 0x49
 2049 00b6 13        		.uleb128 0x13
 2050 00b7 00        		.byte	0
 2051 00b8 00        		.byte	0
 2052 00b9 0E        		.uleb128 0xe
 2053 00ba 01        		.uleb128 0x1
 2054 00bb 01        		.byte	0x1
 2055 00bc 49        		.uleb128 0x49
 2056 00bd 13        		.uleb128 0x13
 2057 00be 01        		.uleb128 0x1
 2058 00bf 13        		.uleb128 0x13
 2059 00c0 00        		.byte	0
 2060 00c1 00        		.byte	0
 2061 00c2 0F        		.uleb128 0xf
 2062 00c3 2E        		.uleb128 0x2e
 2063 00c4 01        		.byte	0x1
 2064 00c5 3F        		.uleb128 0x3f
 2065 00c6 19        		.uleb128 0x19
 2066 00c7 03        		.uleb128 0x3
 2067 00c8 0E        		.uleb128 0xe


 2068 00c9 3A        		.uleb128 0x3a
 2069 00ca 21        		.uleb128 0x21
 2070 00cb 02        		.sleb128 2
 2071 00cc 3B        		.uleb128 0x3b
 2072 00cd 0B        		.uleb128 0xb
 2073 00ce 39        		.uleb128 0x39
 2074 00cf 21        		.uleb128 0x21
 2075 00d0 0C        		.sleb128 12
 2076 00d1 49        		.uleb128 0x49
 2077 00d2 13        		.uleb128 0x13
 2078 00d3 3C        		.uleb128 0x3c
 2079 00d4 19        		.uleb128 0x19
 2080 00d5 01        		.uleb128 0x1
 2081 00d6 13        		.uleb128 0x13
 2082 00d7 00        		.byte	0
 2083 00d8 00        		.byte	0
 2084 00d9 10        		.uleb128 0x10
 2085 00da 1D        		.uleb128 0x1d
 2086 00db 01        		.byte	0x1
 2087 00dc 31        		.uleb128 0x31
 2088 00dd 13        		.uleb128 0x13
 2089 00de 52        		.uleb128 0x52
 2090 00df 01        		.uleb128 0x1
 2091 00e0 B842      		.uleb128 0x2138
 2092 00e2 0B        		.uleb128 0xb
 2093 00e3 55        		.uleb128 0x55
 2094 00e4 17        		.uleb128 0x17
 2095 00e5 58        		.uleb128 0x58
 2096 00e6 21        		.uleb128 0x21
 2097 00e7 01        		.sleb128 1
 2098 00e8 59        		.uleb128 0x59
 2099 00e9 0B        		.uleb128 0xb
 2100 00ea 57        		.uleb128 0x57
 2101 00eb 0B        		.uleb128 0xb
 2102 00ec 00        		.byte	0
 2103 00ed 00        		.byte	0
 2104 00ee 11        		.uleb128 0x11
 2105 00ef 2E        		.uleb128 0x2e
 2106 00f0 01        		.byte	0x1
 2107 00f1 31        		.uleb128 0x31
 2108 00f2 13        		.uleb128 0x13
 2109 00f3 11        		.uleb128 0x11
 2110 00f4 01        		.uleb128 0x1
 2111 00f5 12        		.uleb128 0x12
 2112 00f6 06        		.uleb128 0x6
 2113 00f7 40        		.uleb128 0x40
 2114 00f8 18        		.uleb128 0x18
 2115 00f9 7A        		.uleb128 0x7a
 2116 00fa 19        		.uleb128 0x19
 2117 00fb 01        		.uleb128 0x1
 2118 00fc 13        		.uleb128 0x13
 2119 00fd 00        		.byte	0
 2120 00fe 00        		.byte	0
 2121 00ff 12        		.uleb128 0x12
 2122 0100 21        		.uleb128 0x21
 2123 0101 00        		.byte	0
 2124 0102 49        		.uleb128 0x49


 2125 0103 13        		.uleb128 0x13
 2126 0104 2F        		.uleb128 0x2f
 2127 0105 0B        		.uleb128 0xb
 2128 0106 00        		.byte	0
 2129 0107 00        		.byte	0
 2130 0108 13        		.uleb128 0x13
 2131 0109 1D        		.uleb128 0x1d
 2132 010a 01        		.byte	0x1
 2133 010b 31        		.uleb128 0x31
 2134 010c 13        		.uleb128 0x13
 2135 010d 52        		.uleb128 0x52
 2136 010e 01        		.uleb128 0x1
 2137 010f B842      		.uleb128 0x2138
 2138 0111 0B        		.uleb128 0xb
 2139 0112 11        		.uleb128 0x11
 2140 0113 01        		.uleb128 0x1
 2141 0114 12        		.uleb128 0x12
 2142 0115 06        		.uleb128 0x6
 2143 0116 58        		.uleb128 0x58
 2144 0117 21        		.uleb128 0x21
 2145 0118 01        		.sleb128 1
 2146 0119 59        		.uleb128 0x59
 2147 011a 0B        		.uleb128 0xb
 2148 011b 57        		.uleb128 0x57
 2149 011c 0B        		.uleb128 0xb
 2150 011d 01        		.uleb128 0x1
 2151 011e 13        		.uleb128 0x13
 2152 011f 00        		.byte	0
 2153 0120 00        		.byte	0
 2154 0121 14        		.uleb128 0x14
 2155 0122 05        		.uleb128 0x5
 2156 0123 00        		.byte	0
 2157 0124 03        		.uleb128 0x3
 2158 0125 0E        		.uleb128 0xe
 2159 0126 3A        		.uleb128 0x3a
 2160 0127 21        		.uleb128 0x21
 2161 0128 01        		.sleb128 1
 2162 0129 3B        		.uleb128 0x3b
 2163 012a 0B        		.uleb128 0xb
 2164 012b 39        		.uleb128 0x39
 2165 012c 0B        		.uleb128 0xb
 2166 012d 49        		.uleb128 0x49
 2167 012e 13        		.uleb128 0x13
 2168 012f 02        		.uleb128 0x2
 2169 0130 18        		.uleb128 0x18
 2170 0131 00        		.byte	0
 2171 0132 00        		.byte	0
 2172 0133 15        		.uleb128 0x15
 2173 0134 48        		.uleb128 0x48
 2174 0135 00        		.byte	0
 2175 0136 7D        		.uleb128 0x7d
 2176 0137 01        		.uleb128 0x1
 2177 0138 8201      		.uleb128 0x82
 2178 013a 19        		.uleb128 0x19
 2179 013b 7F        		.uleb128 0x7f
 2180 013c 13        		.uleb128 0x13
 2181 013d 00        		.byte	0


 2182 013e 00        		.byte	0
 2183 013f 16        		.uleb128 0x16
 2184 0140 48        		.uleb128 0x48
 2185 0141 00        		.byte	0
 2186 0142 7D        		.uleb128 0x7d
 2187 0143 01        		.uleb128 0x1
 2188 0144 7F        		.uleb128 0x7f
 2189 0145 13        		.uleb128 0x13
 2190 0146 00        		.byte	0
 2191 0147 00        		.byte	0
 2192 0148 17        		.uleb128 0x17
 2193 0149 13        		.uleb128 0x13
 2194 014a 01        		.byte	0x1
 2195 014b 0B        		.uleb128 0xb
 2196 014c 0B        		.uleb128 0xb
 2197 014d 3A        		.uleb128 0x3a
 2198 014e 21        		.uleb128 0x21
 2199 014f 02        		.sleb128 2
 2200 0150 3B        		.uleb128 0x3b
 2201 0151 0B        		.uleb128 0xb
 2202 0152 39        		.uleb128 0x39
 2203 0153 21        		.uleb128 0x21
 2204 0154 09        		.sleb128 9
 2205 0155 01        		.uleb128 0x1
 2206 0156 13        		.uleb128 0x13
 2207 0157 00        		.byte	0
 2208 0158 00        		.byte	0
 2209 0159 18        		.uleb128 0x18
 2210 015a 05        		.uleb128 0x5
 2211 015b 00        		.byte	0
 2212 015c 03        		.uleb128 0x3
 2213 015d 08        		.uleb128 0x8
 2214 015e 3A        		.uleb128 0x3a
 2215 015f 21        		.uleb128 0x21
 2216 0160 01        		.sleb128 1
 2217 0161 3B        		.uleb128 0x3b
 2218 0162 0B        		.uleb128 0xb
 2219 0163 39        		.uleb128 0x39
 2220 0164 0B        		.uleb128 0xb
 2221 0165 49        		.uleb128 0x49
 2222 0166 13        		.uleb128 0x13
 2223 0167 02        		.uleb128 0x2
 2224 0168 18        		.uleb128 0x18
 2225 0169 00        		.byte	0
 2226 016a 00        		.byte	0
 2227 016b 19        		.uleb128 0x19
 2228 016c 1D        		.uleb128 0x1d
 2229 016d 01        		.byte	0x1
 2230 016e 31        		.uleb128 0x31
 2231 016f 13        		.uleb128 0x13
 2232 0170 52        		.uleb128 0x52
 2233 0171 01        		.uleb128 0x1
 2234 0172 B842      		.uleb128 0x2138
 2235 0174 0B        		.uleb128 0xb
 2236 0175 55        		.uleb128 0x55
 2237 0176 17        		.uleb128 0x17
 2238 0177 58        		.uleb128 0x58


 2239 0178 21        		.uleb128 0x21
 2240 0179 01        		.sleb128 1
 2241 017a 59        		.uleb128 0x59
 2242 017b 0B        		.uleb128 0xb
 2243 017c 57        		.uleb128 0x57
 2244 017d 21        		.uleb128 0x21
 2245 017e 02        		.sleb128 2
 2246 017f 01        		.uleb128 0x1
 2247 0180 13        		.uleb128 0x13
 2248 0181 00        		.byte	0
 2249 0182 00        		.byte	0
 2250 0183 1A        		.uleb128 0x1a
 2251 0184 0B        		.uleb128 0xb
 2252 0185 01        		.byte	0x1
 2253 0186 55        		.uleb128 0x55
 2254 0187 17        		.uleb128 0x17
 2255 0188 00        		.byte	0
 2256 0189 00        		.byte	0
 2257 018a 1B        		.uleb128 0x1b
 2258 018b 2E        		.uleb128 0x2e
 2259 018c 01        		.byte	0x1
 2260 018d 3F        		.uleb128 0x3f
 2261 018e 19        		.uleb128 0x19
 2262 018f 03        		.uleb128 0x3
 2263 0190 0E        		.uleb128 0xe
 2264 0191 3A        		.uleb128 0x3a
 2265 0192 21        		.uleb128 0x21
 2266 0193 01        		.sleb128 1
 2267 0194 3B        		.uleb128 0x3b
 2268 0195 0B        		.uleb128 0xb
 2269 0196 39        		.uleb128 0x39
 2270 0197 0B        		.uleb128 0xb
 2271 0198 27        		.uleb128 0x27
 2272 0199 19        		.uleb128 0x19
 2273 019a 49        		.uleb128 0x49
 2274 019b 13        		.uleb128 0x13
 2275 019c 20        		.uleb128 0x20
 2276 019d 21        		.uleb128 0x21
 2277 019e 01        		.sleb128 1
 2278 019f 01        		.uleb128 0x1
 2279 01a0 13        		.uleb128 0x13
 2280 01a1 00        		.byte	0
 2281 01a2 00        		.byte	0
 2282 01a3 1C        		.uleb128 0x1c
 2283 01a4 05        		.uleb128 0x5
 2284 01a5 00        		.byte	0
 2285 01a6 03        		.uleb128 0x3
 2286 01a7 0E        		.uleb128 0xe
 2287 01a8 3A        		.uleb128 0x3a
 2288 01a9 21        		.uleb128 0x21
 2289 01aa 01        		.sleb128 1
 2290 01ab 3B        		.uleb128 0x3b
 2291 01ac 0B        		.uleb128 0xb
 2292 01ad 39        		.uleb128 0x39
 2293 01ae 0B        		.uleb128 0xb
 2294 01af 49        		.uleb128 0x49
 2295 01b0 13        		.uleb128 0x13


 2296 01b1 00        		.byte	0
 2297 01b2 00        		.byte	0
 2298 01b3 1D        		.uleb128 0x1d
 2299 01b4 0B        		.uleb128 0xb
 2300 01b5 01        		.byte	0x1
 2301 01b6 00        		.byte	0
 2302 01b7 00        		.byte	0
 2303 01b8 1E        		.uleb128 0x1e
 2304 01b9 05        		.uleb128 0x5
 2305 01ba 00        		.byte	0
 2306 01bb 03        		.uleb128 0x3
 2307 01bc 08        		.uleb128 0x8
 2308 01bd 3A        		.uleb128 0x3a
 2309 01be 21        		.uleb128 0x21
 2310 01bf 01        		.sleb128 1
 2311 01c0 3B        		.uleb128 0x3b
 2312 01c1 0B        		.uleb128 0xb
 2313 01c2 39        		.uleb128 0x39
 2314 01c3 0B        		.uleb128 0xb
 2315 01c4 49        		.uleb128 0x49
 2316 01c5 13        		.uleb128 0x13
 2317 01c6 00        		.byte	0
 2318 01c7 00        		.byte	0
 2319 01c8 1F        		.uleb128 0x1f
 2320 01c9 2E        		.uleb128 0x2e
 2321 01ca 01        		.byte	0x1
 2322 01cb 3F        		.uleb128 0x3f
 2323 01cc 19        		.uleb128 0x19
 2324 01cd 03        		.uleb128 0x3
 2325 01ce 0E        		.uleb128 0xe
 2326 01cf 3A        		.uleb128 0x3a
 2327 01d0 21        		.uleb128 0x21
 2328 01d1 01        		.sleb128 1
 2329 01d2 3B        		.uleb128 0x3b
 2330 01d3 0B        		.uleb128 0xb
 2331 01d4 39        		.uleb128 0x39
 2332 01d5 21        		.uleb128 0x21
 2333 01d6 06        		.sleb128 6
 2334 01d7 11        		.uleb128 0x11
 2335 01d8 01        		.uleb128 0x1
 2336 01d9 12        		.uleb128 0x12
 2337 01da 06        		.uleb128 0x6
 2338 01db 40        		.uleb128 0x40
 2339 01dc 18        		.uleb128 0x18
 2340 01dd 7A        		.uleb128 0x7a
 2341 01de 19        		.uleb128 0x19
 2342 01df 01        		.uleb128 0x1
 2343 01e0 13        		.uleb128 0x13
 2344 01e1 00        		.byte	0
 2345 01e2 00        		.byte	0
 2346 01e3 20        		.uleb128 0x20
 2347 01e4 34        		.uleb128 0x34
 2348 01e5 00        		.byte	0
 2349 01e6 03        		.uleb128 0x3
 2350 01e7 08        		.uleb128 0x8
 2351 01e8 3A        		.uleb128 0x3a
 2352 01e9 21        		.uleb128 0x21


 2353 01ea 01        		.sleb128 1
 2354 01eb 3B        		.uleb128 0x3b
 2355 01ec 0B        		.uleb128 0xb
 2356 01ed 39        		.uleb128 0x39
 2357 01ee 0B        		.uleb128 0xb
 2358 01ef 49        		.uleb128 0x49
 2359 01f0 13        		.uleb128 0x13
 2360 01f1 02        		.uleb128 0x2
 2361 01f2 17        		.uleb128 0x17
 2362 01f3 B742      		.uleb128 0x2137
 2363 01f5 17        		.uleb128 0x17
 2364 01f6 00        		.byte	0
 2365 01f7 00        		.byte	0
 2366 01f8 21        		.uleb128 0x21
 2367 01f9 11        		.uleb128 0x11
 2368 01fa 01        		.byte	0x1
 2369 01fb 25        		.uleb128 0x25
 2370 01fc 0E        		.uleb128 0xe
 2371 01fd 13        		.uleb128 0x13
 2372 01fe 0B        		.uleb128 0xb
 2373 01ff 03        		.uleb128 0x3
 2374 0200 0E        		.uleb128 0xe
 2375 0201 1B        		.uleb128 0x1b
 2376 0202 0E        		.uleb128 0xe
 2377 0203 11        		.uleb128 0x11
 2378 0204 01        		.uleb128 0x1
 2379 0205 12        		.uleb128 0x12
 2380 0206 06        		.uleb128 0x6
 2381 0207 10        		.uleb128 0x10
 2382 0208 17        		.uleb128 0x17
 2383 0209 00        		.byte	0
 2384 020a 00        		.byte	0
 2385 020b 22        		.uleb128 0x22
 2386 020c 24        		.uleb128 0x24
 2387 020d 00        		.byte	0
 2388 020e 0B        		.uleb128 0xb
 2389 020f 0B        		.uleb128 0xb
 2390 0210 3E        		.uleb128 0x3e
 2391 0211 0B        		.uleb128 0xb
 2392 0212 03        		.uleb128 0x3
 2393 0213 08        		.uleb128 0x8
 2394 0214 00        		.byte	0
 2395 0215 00        		.byte	0
 2396 0216 23        		.uleb128 0x23
 2397 0217 0F        		.uleb128 0xf
 2398 0218 00        		.byte	0
 2399 0219 0B        		.uleb128 0xb
 2400 021a 0B        		.uleb128 0xb
 2401 021b 00        		.byte	0
 2402 021c 00        		.byte	0
 2403 021d 24        		.uleb128 0x24
 2404 021e 15        		.uleb128 0x15
 2405 021f 01        		.byte	0x1
 2406 0220 01        		.uleb128 0x1
 2407 0221 13        		.uleb128 0x13
 2408 0222 00        		.byte	0
 2409 0223 00        		.byte	0


 2410 0224 25        		.uleb128 0x25
 2411 0225 13        		.uleb128 0x13
 2412 0226 01        		.byte	0x1
 2413 0227 0B        		.uleb128 0xb
 2414 0228 05        		.uleb128 0x5
 2415 0229 3A        		.uleb128 0x3a
 2416 022a 0B        		.uleb128 0xb
 2417 022b 3B        		.uleb128 0x3b
 2418 022c 0B        		.uleb128 0xb
 2419 022d 39        		.uleb128 0x39
 2420 022e 0B        		.uleb128 0xb
 2421 022f 01        		.uleb128 0x1
 2422 0230 13        		.uleb128 0x13
 2423 0231 00        		.byte	0
 2424 0232 00        		.byte	0
 2425 0233 26        		.uleb128 0x26
 2426 0234 0D        		.uleb128 0xd
 2427 0235 00        		.byte	0
 2428 0236 03        		.uleb128 0x3
 2429 0237 0E        		.uleb128 0xe
 2430 0238 3A        		.uleb128 0x3a
 2431 0239 0B        		.uleb128 0xb
 2432 023a 3B        		.uleb128 0x3b
 2433 023b 0B        		.uleb128 0xb
 2434 023c 39        		.uleb128 0x39
 2435 023d 0B        		.uleb128 0xb
 2436 023e 49        		.uleb128 0x49
 2437 023f 13        		.uleb128 0x13
 2438 0240 38        		.uleb128 0x38
 2439 0241 05        		.uleb128 0x5
 2440 0242 00        		.byte	0
 2441 0243 00        		.byte	0
 2442 0244 27        		.uleb128 0x27
 2443 0245 21        		.uleb128 0x21
 2444 0246 00        		.byte	0
 2445 0247 49        		.uleb128 0x49
 2446 0248 13        		.uleb128 0x13
 2447 0249 2F        		.uleb128 0x2f
 2448 024a 05        		.uleb128 0x5
 2449 024b 00        		.byte	0
 2450 024c 00        		.byte	0
 2451 024d 28        		.uleb128 0x28
 2452 024e 34        		.uleb128 0x34
 2453 024f 00        		.byte	0
 2454 0250 03        		.uleb128 0x3
 2455 0251 0E        		.uleb128 0xe
 2456 0252 3A        		.uleb128 0x3a
 2457 0253 0B        		.uleb128 0xb
 2458 0254 3B        		.uleb128 0x3b
 2459 0255 0B        		.uleb128 0xb
 2460 0256 39        		.uleb128 0x39
 2461 0257 0B        		.uleb128 0xb
 2462 0258 49        		.uleb128 0x49
 2463 0259 13        		.uleb128 0x13
 2464 025a 02        		.uleb128 0x2
 2465 025b 17        		.uleb128 0x17
 2466 025c B742      		.uleb128 0x2137


 2467 025e 17        		.uleb128 0x17
 2468 025f 00        		.byte	0
 2469 0260 00        		.byte	0
 2470 0261 29        		.uleb128 0x29
 2471 0262 2E        		.uleb128 0x2e
 2472 0263 00        		.byte	0
 2473 0264 3F        		.uleb128 0x3f
 2474 0265 19        		.uleb128 0x19
 2475 0266 03        		.uleb128 0x3
 2476 0267 0E        		.uleb128 0xe
 2477 0268 3A        		.uleb128 0x3a
 2478 0269 0B        		.uleb128 0xb
 2479 026a 3B        		.uleb128 0x3b
 2480 026b 0B        		.uleb128 0xb
 2481 026c 39        		.uleb128 0x39
 2482 026d 0B        		.uleb128 0xb
 2483 026e 20        		.uleb128 0x20
 2484 026f 0B        		.uleb128 0xb
 2485 0270 00        		.byte	0
 2486 0271 00        		.byte	0
 2487 0272 2A        		.uleb128 0x2a
 2488 0273 2E        		.uleb128 0x2e
 2489 0274 01        		.byte	0x1
 2490 0275 3F        		.uleb128 0x3f
 2491 0276 19        		.uleb128 0x19
 2492 0277 03        		.uleb128 0x3
 2493 0278 0E        		.uleb128 0xe
 2494 0279 3A        		.uleb128 0x3a
 2495 027a 0B        		.uleb128 0xb
 2496 027b 3B        		.uleb128 0x3b
 2497 027c 0B        		.uleb128 0xb
 2498 027d 39        		.uleb128 0x39
 2499 027e 0B        		.uleb128 0xb
 2500 027f 27        		.uleb128 0x27
 2501 0280 19        		.uleb128 0x19
 2502 0281 20        		.uleb128 0x20
 2503 0282 0B        		.uleb128 0xb
 2504 0283 01        		.uleb128 0x1
 2505 0284 13        		.uleb128 0x13
 2506 0285 00        		.byte	0
 2507 0286 00        		.byte	0
 2508 0287 2B        		.uleb128 0x2b
 2509 0288 2E        		.uleb128 0x2e
 2510 0289 00        		.byte	0
 2511 028a 3F        		.uleb128 0x3f
 2512 028b 19        		.uleb128 0x19
 2513 028c 3C        		.uleb128 0x3c
 2514 028d 19        		.uleb128 0x19
 2515 028e 6E        		.uleb128 0x6e
 2516 028f 0E        		.uleb128 0xe
 2517 0290 03        		.uleb128 0x3
 2518 0291 0E        		.uleb128 0xe
 2519 0292 3A        		.uleb128 0x3a
 2520 0293 0B        		.uleb128 0xb
 2521 0294 3B        		.uleb128 0x3b
 2522 0295 0B        		.uleb128 0xb
 2523 0296 00        		.byte	0


 2524 0297 00        		.byte	0
 2525 0298 00        		.byte	0
 2526               		.section	.debug_loclists,"",@progbits
 2527 0000 0000 0422 		.long	.Ldebug_loc3-.Ldebug_loc2
 2528               	.Ldebug_loc2:
 2529 0004 0005      		.word	0x5
 2530 0006 04        		.byte	0x4
 2531 0007 00        		.byte	0
 2532 0008 0000 0000 		.long	0
 2533               	.Ldebug_loc0:
 2534               	.LVUS29:
 2535 000c 02        		.uleb128 .LVU300
 2536 000d 00        		.uleb128 0
 2537               	.LLST29:
 2538 000e 04        		.byte	0x4
 2539 000f D406      		.uleb128 .LVL74-.Ltext0
 2540 0011 B007      		.uleb128 .LFE13-.Ltext0
 2541 0013 01        		.uleb128 0x1
 2542 0014 59        		.byte	0x59
 2543 0015 00        		.byte	0
 2544               	.LVUS30:
 2545 0016 02        		.uleb128 .LVU286
 2546 0017 00        		.uleb128 .LVU289
 2547 0018 00        		.uleb128 .LVU289
 2548 0019 02        		.uleb128 .LVU300
 2549               	.LLST30:
 2550 001a 04        		.byte	0x4
 2551 001b A606      		.uleb128 .LVL70-.Ltext0
 2552 001d B206      		.uleb128 .LVL71-.Ltext0
 2553 001f 0C        		.uleb128 0xc
 2554 0020 91        		.byte	0x91
 2555 0021 70        		.sleb128 -16
 2556 0022 06        		.byte	0x6
 2557 0023 33        		.byte	0x33
 2558 0024 24        		.byte	0x24
 2559 0025 03        		.byte	0x3
 2560 0026 0000 0000 		.long	semaphore+4
 2561 002a 22        		.byte	0x22
 2562 002b 9F        		.byte	0x9f
 2563 002c 04        		.byte	0x4
 2564 002d B206      		.uleb128 .LVL71-.Ltext0
 2565 002f D406      		.uleb128 .LVL74-.Ltext0
 2566 0031 01        		.uleb128 0x1
 2567 0032 50        		.byte	0x50
 2568 0033 00        		.byte	0
 2569               	.LVUS31:
 2570 0034 00        		.uleb128 .LVU290
 2571 0035 02        		.uleb128 .LVU300
 2572               	.LLST31:
 2573 0036 04        		.byte	0x4
 2574 0037 B606      		.uleb128 .LVL72-.Ltext0
 2575 0039 D406      		.uleb128 .LVL74-.Ltext0
 2576 003b 01        		.uleb128 0x1
 2577 003c 59        		.byte	0x59
 2578 003d 00        		.byte	0
 2579               	.LVUS32:
 2580 003e 01        		.uleb128 .LVU293


 2581 003f 00        		.uleb128 .LVU298
 2582               	.LLST32:
 2583 0040 04        		.byte	0x4
 2584 0041 BC06      		.uleb128 .LVL73-.Ltext0
 2585 0043 D406      		.uleb128 .LVL74-.Ltext0
 2586 0045 0B        		.uleb128 0xb
 2587 0046 79        		.byte	0x79
 2588 0047 00        		.sleb128 0
 2589 0048 44        		.byte	0x44
 2590 0049 1E        		.byte	0x1e
 2591 004a 03        		.byte	0x3
 2592 004b 0000 0000 		.long	task_tab
 2593 004f 22        		.byte	0x22
 2594 0050 9F        		.byte	0x9f
 2595 0051 00        		.byte	0
 2596               	.LVUS34:
 2597 0052 04        		.uleb128 .LVU302
 2598 0053 00        		.uleb128 0
 2599               	.LLST34:
 2600 0054 04        		.byte	0x4
 2601 0055 D406      		.uleb128 .LVL74-.Ltext0
 2602 0057 B007      		.uleb128 .LFE13-.Ltext0
 2603 0059 01        		.uleb128 0x1
 2604 005a 59        		.byte	0x59
 2605 005b 00        		.byte	0
 2606               	.LVUS35:
 2607 005c 01        		.uleb128 .LVU310
 2608 005d 00        		.uleb128 .LVU314
 2609 005e 00        		.uleb128 .LVU314
 2610 005f 01        		.uleb128 .LVU315
 2611 0060 01        		.uleb128 .LVU315
 2612 0061 00        		.uleb128 .LVU319
 2613 0062 00        		.uleb128 .LVU319
 2614 0063 00        		.uleb128 .LVU322
 2615               	.LLST35:
 2616 0064 04        		.byte	0x4
 2617 0065 E606      		.uleb128 .LVL75-.Ltext0
 2618 0067 8207      		.uleb128 .LVL76-.Ltext0
 2619 0069 0B        		.uleb128 0xb
 2620 006a 71        		.byte	0x71
 2621 006b 00        		.sleb128 0
 2622 006c 44        		.byte	0x44
 2623 006d 1E        		.byte	0x1e
 2624 006e 03        		.byte	0x3
 2625 006f 0000 0000 		.long	task_tab
 2626 0073 22        		.byte	0x22
 2627 0074 9F        		.byte	0x9f
 2628 0075 04        		.byte	0x4
 2629 0076 8207      		.uleb128 .LVL76-.Ltext0
 2630 0078 8207      		.uleb128 .LVL76-.Ltext0
 2631 007a 0F        		.uleb128 0xf
 2632 007b 03        		.byte	0x3
 2633 007c 0000 0000 		.long	ready
 2634 0080 06        		.byte	0x6
 2635 0081 44        		.byte	0x44
 2636 0082 1E        		.byte	0x1e
 2637 0083 03        		.byte	0x3


 2638 0084 0000 0000 		.long	task_tab
 2639 0088 22        		.byte	0x22
 2640 0089 9F        		.byte	0x9f
 2641 008a 04        		.byte	0x4
 2642 008b 8207      		.uleb128 .LVL76-.Ltext0
 2643 008d 8607      		.uleb128 .LVL77-.Ltext0
 2644 008f 0B        		.uleb128 0xb
 2645 0090 70        		.byte	0x70
 2646 0091 00        		.sleb128 0
 2647 0092 44        		.byte	0x44
 2648 0093 1E        		.byte	0x1e
 2649 0094 03        		.byte	0x3
 2650 0095 0000 0000 		.long	task_tab
 2651 0099 22        		.byte	0x22
 2652 009a 9F        		.byte	0x9f
 2653 009b 04        		.byte	0x4
 2654 009c 8607      		.uleb128 .LVL77-.Ltext0
 2655 009e A807      		.uleb128 .LVL78-.Ltext0
 2656 00a0 0B        		.uleb128 0xb
 2657 00a1 71        		.byte	0x71
 2658 00a2 00        		.sleb128 0
 2659 00a3 44        		.byte	0x44
 2660 00a4 1E        		.byte	0x1e
 2661 00a5 03        		.byte	0x3
 2662 00a6 0000 0000 		.long	task_tab
 2663 00aa 22        		.byte	0x22
 2664 00ab 9F        		.byte	0x9f
 2665 00ac 00        		.byte	0
 2666               	.LVUS21:
 2667 00ad 00        		.uleb128 .LVU208
 2668 00ae 00        		.uleb128 .LVU215
 2669 00af 00        		.uleb128 .LVU237
 2670 00b0 01        		.uleb128 .LVU255
 2671               	.LLST21:
 2672 00b1 04        		.byte	0x4
 2673 00b2 E204      		.uleb128 .LVL52-.Ltext0
 2674 00b4 FC04      		.uleb128 .LVL54-.Ltext0
 2675 00b6 01        		.uleb128 0x1
 2676 00b7 52        		.byte	0x52
 2677 00b8 04        		.byte	0x4
 2678 00b9 AA05      		.uleb128 .LVL58-.Ltext0
 2679 00bb F005      		.uleb128 .LVL64-.Ltext0
 2680 00bd 01        		.uleb128 0x1
 2681 00be 52        		.byte	0x52
 2682 00bf 00        		.byte	0
 2683               	.LVUS22:
 2684 00c0 00        		.uleb128 .LVU208
 2685 00c1 00        		.uleb128 .LVU211
 2686 00c2 00        		.uleb128 .LVU211
 2687 00c3 00        		.uleb128 .LVU215
 2688 00c4 00        		.uleb128 .LVU237
 2689 00c5 00        		.uleb128 .LVU241
 2690 00c6 00        		.uleb128 .LVU241
 2691 00c7 00        		.uleb128 .LVU242
 2692 00c8 00        		.uleb128 .LVU242
 2693 00c9 01        		.uleb128 .LVU255
 2694               	.LLST22:


 2695 00ca 04        		.byte	0x4
 2696 00cb E204      		.uleb128 .LVL52-.Ltext0
 2697 00cd EE04      		.uleb128 .LVL53-.Ltext0
 2698 00cf 0C        		.uleb128 0xc
 2699 00d0 91        		.byte	0x91
 2700 00d1 70        		.sleb128 -16
 2701 00d2 06        		.byte	0x6
 2702 00d3 33        		.byte	0x33
 2703 00d4 24        		.byte	0x24
 2704 00d5 03        		.byte	0x3
 2705 00d6 0000 0000 		.long	semaphore+4
 2706 00da 22        		.byte	0x22
 2707 00db 9F        		.byte	0x9f
 2708 00dc 04        		.byte	0x4
 2709 00dd EE04      		.uleb128 .LVL53-.Ltext0
 2710 00df FC04      		.uleb128 .LVL54-.Ltext0
 2711 00e1 01        		.uleb128 0x1
 2712 00e2 50        		.byte	0x50
 2713 00e3 04        		.byte	0x4
 2714 00e4 AA05      		.uleb128 .LVL58-.Ltext0
 2715 00e6 B205      		.uleb128 .LVL59-.Ltext0
 2716 00e8 01        		.uleb128 0x1
 2717 00e9 50        		.byte	0x50
 2718 00ea 04        		.byte	0x4
 2719 00eb B205      		.uleb128 .LVL59-.Ltext0
 2720 00ed C005      		.uleb128 .LVL60-.Ltext0
 2721 00ef 01        		.uleb128 0x1
 2722 00f0 58        		.byte	0x58
 2723 00f1 04        		.byte	0x4
 2724 00f2 C005      		.uleb128 .LVL60-.Ltext0
 2725 00f4 F005      		.uleb128 .LVL64-.Ltext0
 2726 00f6 0C        		.uleb128 0xc
 2727 00f7 91        		.byte	0x91
 2728 00f8 70        		.sleb128 -16
 2729 00f9 06        		.byte	0x6
 2730 00fa 33        		.byte	0x33
 2731 00fb 24        		.byte	0x24
 2732 00fc 03        		.byte	0x3
 2733 00fd 0000 0000 		.long	semaphore+4
 2734 0101 22        		.byte	0x22
 2735 0102 9F        		.byte	0x9f
 2736 0103 00        		.byte	0
 2737               	.LVUS23:
 2738 0104 01        		.uleb128 .LVU238
 2739 0105 00        		.uleb128 .LVU244
 2740 0106 00        		.uleb128 .LVU244
 2741 0107 01        		.uleb128 .LVU245
 2742 0108 01        		.uleb128 .LVU245
 2743 0109 00        		.uleb128 .LVU249
 2744 010a 00        		.uleb128 .LVU249
 2745 010b 00        		.uleb128 .LVU252
 2746               	.LLST23:
 2747 010c 04        		.byte	0x4
 2748 010d AA05      		.uleb128 .LVL58-.Ltext0
 2749 010f C605      		.uleb128 .LVL61-.Ltext0
 2750 0111 0B        		.uleb128 0xb
 2751 0112 71        		.byte	0x71


 2752 0113 00        		.sleb128 0
 2753 0114 44        		.byte	0x44
 2754 0115 1E        		.byte	0x1e
 2755 0116 03        		.byte	0x3
 2756 0117 0000 0000 		.long	task_tab
 2757 011b 22        		.byte	0x22
 2758 011c 9F        		.byte	0x9f
 2759 011d 04        		.byte	0x4
 2760 011e C605      		.uleb128 .LVL61-.Ltext0
 2761 0120 C605      		.uleb128 .LVL61-.Ltext0
 2762 0122 15        		.uleb128 0x15
 2763 0123 91        		.byte	0x91
 2764 0124 70        		.sleb128 -16
 2765 0125 06        		.byte	0x6
 2766 0126 33        		.byte	0x33
 2767 0127 24        		.byte	0x24
 2768 0128 03        		.byte	0x3
 2769 0129 0000 0000 		.long	semaphore+4
 2770 012d 22        		.byte	0x22
 2771 012e 06        		.byte	0x6
 2772 012f 44        		.byte	0x44
 2773 0130 1E        		.byte	0x1e
 2774 0131 03        		.byte	0x3
 2775 0132 0000 0000 		.long	task_tab
 2776 0136 22        		.byte	0x22
 2777 0137 9F        		.byte	0x9f
 2778 0138 04        		.byte	0x4
 2779 0139 C605      		.uleb128 .LVL61-.Ltext0
 2780 013b CA05      		.uleb128 .LVL62-.Ltext0
 2781 013d 0B        		.uleb128 0xb
 2782 013e 70        		.byte	0x70
 2783 013f 00        		.sleb128 0
 2784 0140 44        		.byte	0x44
 2785 0141 1E        		.byte	0x1e
 2786 0142 03        		.byte	0x3
 2787 0143 0000 0000 		.long	task_tab
 2788 0147 22        		.byte	0x22
 2789 0148 9F        		.byte	0x9f
 2790 0149 04        		.byte	0x4
 2791 014a CA05      		.uleb128 .LVL62-.Ltext0
 2792 014c EC05      		.uleb128 .LVL63-.Ltext0
 2793 014e 0B        		.uleb128 0xb
 2794 014f 71        		.byte	0x71
 2795 0150 00        		.sleb128 0
 2796 0151 44        		.byte	0x44
 2797 0152 1E        		.byte	0x1e
 2798 0153 03        		.byte	0x3
 2799 0154 0000 0000 		.long	task_tab
 2800 0158 22        		.byte	0x22
 2801 0159 9F        		.byte	0x9f
 2802 015a 00        		.byte	0
 2803               	.LVUS26:
 2804 015b 04        		.uleb128 .LVU219
 2805 015c 01        		.uleb128 .LVU231
 2806 015d 05        		.uleb128 .LVU259
 2807 015e 01        		.uleb128 .LVU265
 2808               	.LLST26:


 2809 015f 04        		.byte	0x4
 2810 0160 FC04      		.uleb128 .LVL54-.Ltext0
 2811 0162 9C05      		.uleb128 .LVL57-.Ltext0
 2812 0164 06        		.uleb128 0x6
 2813 0165 03        		.byte	0x3
 2814 0166 0000 0000 		.long	ready
 2815 016a 9F        		.byte	0x9f
 2816 016b 04        		.byte	0x4
 2817 016c F005      		.uleb128 .LVL64-.Ltext0
 2818 016e F805      		.uleb128 .LVL66-.Ltext0
 2819 0170 06        		.uleb128 0x6
 2820 0171 03        		.byte	0x3
 2821 0172 0000 0000 		.long	ready
 2822 0176 9F        		.byte	0x9f
 2823 0177 00        		.byte	0
 2824               	.LVUS27:
 2825 0178 00        		.uleb128 .LVU222
 2826 0179 01        		.uleb128 .LVU231
 2827 017a 00        		.uleb128 .LVU262
 2828 017b 01        		.uleb128 .LVU265
 2829               	.LLST27:
 2830 017c 04        		.byte	0x4
 2831 017d 8205      		.uleb128 .LVL55-.Ltext0
 2832 017f 9C05      		.uleb128 .LVL57-.Ltext0
 2833 0181 01        		.uleb128 0x1
 2834 0182 51        		.byte	0x51
 2835 0183 04        		.byte	0x4
 2836 0184 F605      		.uleb128 .LVL65-.Ltext0
 2837 0186 F805      		.uleb128 .LVL66-.Ltext0
 2838 0188 01        		.uleb128 0x1
 2839 0189 51        		.byte	0x51
 2840 018a 00        		.byte	0
 2841               	.LVUS28:
 2842 018b 01        		.uleb128 .LVU225
 2843 018c 00        		.uleb128 .LVU237
 2844               	.LLST28:
 2845 018d 04        		.byte	0x4
 2846 018e 8405      		.uleb128 .LVL56-.Ltext0
 2847 0190 A905      		.uleb128 .LVL58-1-.Ltext0
 2848 0192 0B        		.uleb128 0xb
 2849 0193 71        		.byte	0x71
 2850 0194 00        		.sleb128 0
 2851 0195 44        		.byte	0x44
 2852 0196 1E        		.byte	0x1e
 2853 0197 03        		.byte	0x3
 2854 0198 0000 0000 		.long	task_tab
 2855 019c 22        		.byte	0x22
 2856 019d 9F        		.byte	0x9f
 2857 019e 00        		.byte	0
 2858               	.LVUS10:
 2859 019f 02        		.uleb128 .LVU122
 2860 01a0 02        		.uleb128 .LVU135
 2861               	.LLST10:
 2862 01a1 04        		.byte	0x4
 2863 01a2 F202      		.uleb128 .LVL30-.Ltext0
 2864 01a4 9403      		.uleb128 .LVL33-.Ltext0
 2865 01a6 06        		.uleb128 0x6


 2866 01a7 03        		.byte	0x3
 2867 01a8 0000 0000 		.long	ready
 2868 01ac 9F        		.byte	0x9f
 2869 01ad 00        		.byte	0
 2870               	.LVUS11:
 2871 01ae 00        		.uleb128 .LVU125
 2872 01af 02        		.uleb128 .LVU135
 2873               	.LLST11:
 2874 01b0 04        		.byte	0x4
 2875 01b1 F802      		.uleb128 .LVL31-.Ltext0
 2876 01b3 9403      		.uleb128 .LVL33-.Ltext0
 2877 01b5 01        		.uleb128 0x1
 2878 01b6 50        		.byte	0x50
 2879 01b7 00        		.byte	0
 2880               	.LVUS12:
 2881 01b8 01        		.uleb128 .LVU128
 2882 01b9 00        		.uleb128 .LVU133
 2883               	.LLST12:
 2884 01ba 04        		.byte	0x4
 2885 01bb FA02      		.uleb128 .LVL32-.Ltext0
 2886 01bd 9403      		.uleb128 .LVL33-.Ltext0
 2887 01bf 0B        		.uleb128 0xb
 2888 01c0 70        		.byte	0x70
 2889 01c1 00        		.sleb128 0
 2890 01c2 44        		.byte	0x44
 2891 01c3 1E        		.byte	0x1e
 2892 01c4 03        		.byte	0x3
 2893 01c5 0000 0000 		.long	task_tab
 2894 01c9 22        		.byte	0x22
 2895 01ca 9F        		.byte	0x9f
 2896 01cb 00        		.byte	0
 2897               	.LVUS1:
 2898 01cc 02        		.uleb128 .LVU45
 2899 01cd 00        		.uleb128 .LVU47
 2900 01ce 00        		.uleb128 .LVU47
 2901 01cf 00        		.uleb128 0
 2902               	.LLST1:
 2903 01d0 04        		.byte	0x4
 2904 01d1 60        		.uleb128 .LVL7-.Ltext0
 2905 01d2 68        		.uleb128 .LVL8-.Ltext0
 2906 01d3 02        		.uleb128 0x2
 2907 01d4 31        		.byte	0x31
 2908 01d5 9F        		.byte	0x9f
 2909 01d6 04        		.byte	0x4
 2910 01d7 68        		.uleb128 .LVL8-.Ltext0
 2911 01d8 B002      		.uleb128 .LFE4-.Ltext0
 2912 01da 01        		.uleb128 0x1
 2913 01db 51        		.byte	0x51
 2914 01dc 00        		.byte	0
 2915               	.LVUS2:
 2916 01dd 01        		.uleb128 .LVU59
 2917 01de 01        		.uleb128 .LVU72
 2918               	.LLST2:
 2919 01df 04        		.byte	0x4
 2920 01e0 A801      		.uleb128 .LVL10-.Ltext0
 2921 01e2 CA01      		.uleb128 .LVL14-.Ltext0
 2922 01e4 05        		.uleb128 0x5


 2923 01e5 03        		.byte	0x3
 2924 01e6 0000 0000 		.long	new_task
 2925 01ea 00        		.byte	0
 2926               	.LVUS3:
 2927 01eb 00        		.uleb128 .LVU62
 2928 01ec 01        		.uleb128 .LVU63
 2929 01ed 01        		.uleb128 .LVU63
 2930 01ee 01        		.uleb128 .LVU68
 2931 01ef 01        		.uleb128 .LVU68
 2932 01f0 02        		.uleb128 .LVU69
 2933 01f1 02        		.uleb128 .LVU69
 2934 01f2 03        		.uleb128 .LVU70
 2935 01f3 03        		.uleb128 .LVU70
 2936 01f4 01        		.uleb128 .LVU72
 2937               	.LLST3:
 2938 01f5 04        		.byte	0x4
 2939 01f6 B601      		.uleb128 .LVL11-.Ltext0
 2940 01f8 B601      		.uleb128 .LVL11-.Ltext0
 2941 01fa 01        		.uleb128 0x1
 2942 01fb 5A        		.byte	0x5a
 2943 01fc 04        		.byte	0x4
 2944 01fd B601      		.uleb128 .LVL11-.Ltext0
 2945 01ff C001      		.uleb128 .LVL13-.Ltext0
 2946 0201 03        		.uleb128 0x3
 2947 0202 7A        		.byte	0x7a
 2948 0203 7C        		.sleb128 -4
 2949 0204 9F        		.byte	0x9f
 2950 0205 04        		.byte	0x4
 2951 0206 C001      		.uleb128 .LVL13-.Ltext0
 2952 0208 C001      		.uleb128 .LVL13-.Ltext0
 2953 020a 03        		.uleb128 0x3
 2954 020b 7A        		.byte	0x7a
 2955 020c 7A        		.sleb128 -6
 2956 020d 9F        		.byte	0x9f
 2957 020e 04        		.byte	0x4
 2958 020f C001      		.uleb128 .LVL13-.Ltext0
 2959 0211 C001      		.uleb128 .LVL13-.Ltext0
 2960 0213 04        		.uleb128 0x4
 2961 0214 7A        		.byte	0x7a
 2962 0215 BE7F      		.sleb128 -66
 2963 0217 9F        		.byte	0x9f
 2964 0218 04        		.byte	0x4
 2965 0219 C001      		.uleb128 .LVL13-.Ltext0
 2966 021b CA01      		.uleb128 .LVL14-.Ltext0
 2967 021d 04        		.uleb128 0x4
 2968 021e 7A        		.byte	0x7a
 2969 021f BA7F      		.sleb128 -70
 2970 0221 9F        		.byte	0x9f
 2971 0222 00        		.byte	0
 2972               	.LVUS4:
 2973 0223 01        		.uleb128 .LVU65
 2974 0224 02        		.uleb128 .LVU66
 2975 0225 02        		.uleb128 .LVU66
 2976 0226 00        		.uleb128 .LVU73
 2977 0227 00        		.uleb128 .LVU73
 2978 0228 00        		.uleb128 .LVU82
 2979 0229 00        		.uleb128 .LVU82


 2980 022a 00        		.uleb128 .LVU83
 2981 022b 00        		.uleb128 .LVU83
 2982 022c 00        		.uleb128 .LVU102
 2983 022d 00        		.uleb128 .LVU102
 2984 022e 00        		.uleb128 0
 2985               	.LLST4:
 2986 022f 04        		.byte	0x4
 2987 0230 BC01      		.uleb128 .LVL12-.Ltext0
 2988 0232 BC01      		.uleb128 .LVL12-.Ltext0
 2989 0234 03        		.uleb128 0x3
 2990 0235 7A        		.byte	0x7a
 2991 0236 7C        		.sleb128 -4
 2992 0237 9F        		.byte	0x9f
 2993 0238 04        		.byte	0x4
 2994 0239 BC01      		.uleb128 .LVL12-.Ltext0
 2995 023b CE01      		.uleb128 .LVL15-.Ltext0
 2996 023d 03        		.uleb128 0x3
 2997 023e 7A        		.byte	0x7a
 2998 023f 7A        		.sleb128 -6
 2999 0240 9F        		.byte	0x9f
 3000 0241 04        		.byte	0x4
 3001 0242 CE01      		.uleb128 .LVL15-.Ltext0
 3002 0244 E801      		.uleb128 .LVL18-.Ltext0
 3003 0246 04        		.uleb128 0x4
 3004 0247 7A        		.byte	0x7a
 3005 0248 C000      		.sleb128 64
 3006 024a 9F        		.byte	0x9f
 3007 024b 04        		.byte	0x4
 3008 024c E801      		.uleb128 .LVL18-.Ltext0
 3009 024e EA01      		.uleb128 .LVL19-.Ltext0
 3010 0250 15        		.uleb128 0x15
 3011 0251 71        		.byte	0x71
 3012 0252 00        		.sleb128 0
 3013 0253 71        		.byte	0x71
 3014 0254 00        		.sleb128 0
 3015 0255 22        		.byte	0x22
 3016 0256 31        		.byte	0x31
 3017 0257 24        		.byte	0x24
 3018 0258 71        		.byte	0x71
 3019 0259 00        		.sleb128 0
 3020 025a 22        		.byte	0x22
 3021 025b 32        		.byte	0x32
 3022 025c 24        		.byte	0x24
 3023 025d 79        		.byte	0x79
 3024 025e 00        		.sleb128 0
 3025 025f 22        		.byte	0x22
 3026 0260 23        		.byte	0x23
 3027 0261 04        		.uleb128 0x4
 3028 0262 06        		.byte	0x6
 3029 0263 23        		.byte	0x23
 3030 0264 40        		.uleb128 0x40
 3031 0265 9F        		.byte	0x9f
 3032 0266 04        		.byte	0x4
 3033 0267 EA01      		.uleb128 .LVL19-.Ltext0
 3034 0269 AE02      		.uleb128 .LVL24-.Ltext0
 3035 026b 04        		.uleb128 0x4
 3036 026c 7A        		.byte	0x7a


 3037 026d C000      		.sleb128 64
 3038 026f 9F        		.byte	0x9f
 3039 0270 04        		.byte	0x4
 3040 0271 AE02      		.uleb128 .LVL24-.Ltext0
 3041 0273 B002      		.uleb128 .LFE4-.Ltext0
 3042 0275 15        		.uleb128 0x15
 3043 0276 71        		.byte	0x71
 3044 0277 00        		.sleb128 0
 3045 0278 71        		.byte	0x71
 3046 0279 00        		.sleb128 0
 3047 027a 22        		.byte	0x22
 3048 027b 31        		.byte	0x31
 3049 027c 24        		.byte	0x24
 3050 027d 71        		.byte	0x71
 3051 027e 00        		.sleb128 0
 3052 027f 22        		.byte	0x22
 3053 0280 32        		.byte	0x32
 3054 0281 24        		.byte	0x24
 3055 0282 79        		.byte	0x79
 3056 0283 00        		.sleb128 0
 3057 0284 22        		.byte	0x22
 3058 0285 23        		.byte	0x23
 3059 0286 04        		.uleb128 0x4
 3060 0287 06        		.byte	0x6
 3061 0288 23        		.byte	0x23
 3062 0289 40        		.uleb128 0x40
 3063 028a 9F        		.byte	0x9f
 3064 028b 00        		.byte	0
 3065               	.LVUS6:
 3066 028c 01        		.uleb128 .LVU75
 3067 028d 00        		.uleb128 .LVU79
 3068 028e 00        		.uleb128 .LVU79
 3069 028f 00        		.uleb128 0
 3070               	.LLST6:
 3071 0290 04        		.byte	0x4
 3072 0291 D201      		.uleb128 .LVL16-.Ltext0
 3073 0293 DE01      		.uleb128 .LVL17-.Ltext0
 3074 0295 05        		.uleb128 0x5
 3075 0296 03        		.byte	0x3
 3076 0297 0000 0000 		.long	new_task
 3077 029b 04        		.byte	0x4
 3078 029c DE01      		.uleb128 .LVL17-.Ltext0
 3079 029e B002      		.uleb128 .LFE4-.Ltext0
 3080 02a0 01        		.uleb128 0x1
 3081 02a1 51        		.byte	0x51
 3082 02a2 00        		.byte	0
 3083               	.LVUS7:
 3084 02a3 01        		.uleb128 .LVU84
 3085 02a4 00        		.uleb128 .LVU87
 3086 02a5 00        		.uleb128 .LVU87
 3087 02a6 01        		.uleb128 .LVU90
 3088 02a7 01        		.uleb128 .LVU90
 3089 02a8 00        		.uleb128 .LVU94
 3090 02a9 00        		.uleb128 .LVU94
 3091 02aa 00        		.uleb128 .LVU97
 3092               	.LLST7:
 3093 02ab 04        		.byte	0x4


 3094 02ac EA01      		.uleb128 .LVL19-.Ltext0
 3095 02ae FA01      		.uleb128 .LVL20-.Ltext0
 3096 02b0 0B        		.uleb128 0xb
 3097 02b1 78        		.byte	0x78
 3098 02b2 00        		.sleb128 0
 3099 02b3 44        		.byte	0x44
 3100 02b4 1E        		.byte	0x1e
 3101 02b5 03        		.byte	0x3
 3102 02b6 0000 0000 		.long	task_tab
 3103 02ba 22        		.byte	0x22
 3104 02bb 9F        		.byte	0x9f
 3105 02bc 04        		.byte	0x4
 3106 02bd FA01      		.uleb128 .LVL20-.Ltext0
 3107 02bf 8002      		.uleb128 .LVL21-.Ltext0
 3108 02c1 0F        		.uleb128 0xf
 3109 02c2 03        		.byte	0x3
 3110 02c3 0000 0000 		.long	ready
 3111 02c7 06        		.byte	0x6
 3112 02c8 44        		.byte	0x44
 3113 02c9 1E        		.byte	0x1e
 3114 02ca 03        		.byte	0x3
 3115 02cb 0000 0000 		.long	task_tab
 3116 02cf 22        		.byte	0x22
 3117 02d0 9F        		.byte	0x9f
 3118 02d1 04        		.byte	0x4
 3119 02d2 8002      		.uleb128 .LVL21-.Ltext0
 3120 02d4 8402      		.uleb128 .LVL22-.Ltext0
 3121 02d6 0B        		.uleb128 0xb
 3122 02d7 70        		.byte	0x70
 3123 02d8 00        		.sleb128 0
 3124 02d9 44        		.byte	0x44
 3125 02da 1E        		.byte	0x1e
 3126 02db 03        		.byte	0x3
 3127 02dc 0000 0000 		.long	task_tab
 3128 02e0 22        		.byte	0x22
 3129 02e1 9F        		.byte	0x9f
 3130 02e2 04        		.byte	0x4
 3131 02e3 8402      		.uleb128 .LVL22-.Ltext0
 3132 02e5 A002      		.uleb128 .LVL23-.Ltext0
 3133 02e7 0B        		.uleb128 0xb
 3134 02e8 78        		.byte	0x78
 3135 02e9 00        		.sleb128 0
 3136 02ea 44        		.byte	0x44
 3137 02eb 1E        		.byte	0x1e
 3138 02ec 03        		.byte	0x3
 3139 02ed 0000 0000 		.long	task_tab
 3140 02f1 22        		.byte	0x22
 3141 02f2 9F        		.byte	0x9f
 3142 02f3 00        		.byte	0
 3143               	.LVUS0:
 3144 02f4 03        		.uleb128 .LVU3
 3145 02f5 00        		.uleb128 .LVU4
 3146 02f6 01        		.uleb128 .LVU21
 3147 02f7 01        		.uleb128 .LVU27
 3148 02f8 01        		.uleb128 .LVU27
 3149 02f9 01        		.uleb128 .LVU33
 3150 02fa 01        		.uleb128 .LVU33


 3151 02fb 01        		.uleb128 .LVU39
 3152 02fc 01        		.uleb128 .LVU39
 3153 02fd 00        		.uleb128 0
 3154               	.LLST0:
 3155 02fe 04        		.byte	0x4
 3156 02ff 00        		.uleb128 .LVL0-.Ltext0
 3157 0300 0C        		.uleb128 .LVL1-.Ltext0
 3158 0301 02        		.uleb128 0x2
 3159 0302 30        		.byte	0x30
 3160 0303 9F        		.byte	0x9f
 3161 0304 04        		.byte	0x4
 3162 0305 34        		.uleb128 .LVL2-.Ltext0
 3163 0306 42        		.uleb128 .LVL3-.Ltext0
 3164 0307 02        		.uleb128 0x2
 3165 0308 30        		.byte	0x30
 3166 0309 9F        		.byte	0x9f
 3167 030a 04        		.byte	0x4
 3168 030b 42        		.uleb128 .LVL3-.Ltext0
 3169 030c 4E        		.uleb128 .LVL4-.Ltext0
 3170 030d 02        		.uleb128 0x2
 3171 030e 31        		.byte	0x31
 3172 030f 9F        		.byte	0x9f
 3173 0310 04        		.byte	0x4
 3174 0311 4E        		.uleb128 .LVL4-.Ltext0
 3175 0312 5A        		.uleb128 .LVL5-.Ltext0
 3176 0313 02        		.uleb128 0x2
 3177 0314 32        		.byte	0x32
 3178 0315 9F        		.byte	0x9f
 3179 0316 04        		.byte	0x4
 3180 0317 5A        		.uleb128 .LVL5-.Ltext0
 3181 0318 5C        		.uleb128 .LFE3-.Ltext0
 3182 0319 02        		.uleb128 0x2
 3183 031a 33        		.byte	0x33
 3184 031b 9F        		.byte	0x9f
 3185 031c 00        		.byte	0
 3186               	.LVUS8:
 3187 031d 00        		.uleb128 .LVU107
 3188 031e 01        		.uleb128 .LVU108
 3189 031f 01        		.uleb128 .LVU108
 3190 0320 01        		.uleb128 .LVU114
 3191 0321 01        		.uleb128 .LVU114
 3192 0322 02        		.uleb128 .LVU115
 3193 0323 02        		.uleb128 .LVU115
 3194 0324 03        		.uleb128 .LVU116
 3195 0325 03        		.uleb128 .LVU116
 3196 0326 00        		.uleb128 .LVU119
 3197 0327 00        		.uleb128 .LVU119
 3198 0328 00        		.uleb128 0
 3199               	.LLST8:
 3200 0329 04        		.byte	0x4
 3201 032a C402      		.uleb128 .LVL26-.Ltext0
 3202 032c C402      		.uleb128 .LVL26-.Ltext0
 3203 032e 01        		.uleb128 0x1
 3204 032f 58        		.byte	0x58
 3205 0330 04        		.byte	0x4
 3206 0331 C402      		.uleb128 .LVL26-.Ltext0
 3207 0333 E002      		.uleb128 .LVL28-.Ltext0


 3208 0335 03        		.uleb128 0x3
 3209 0336 78        		.byte	0x78
 3210 0337 7C        		.sleb128 -4
 3211 0338 9F        		.byte	0x9f
 3212 0339 04        		.byte	0x4
 3213 033a E002      		.uleb128 .LVL28-.Ltext0
 3214 033c E002      		.uleb128 .LVL28-.Ltext0
 3215 033e 03        		.uleb128 0x3
 3216 033f 78        		.byte	0x78
 3217 0340 7A        		.sleb128 -6
 3218 0341 9F        		.byte	0x9f
 3219 0342 04        		.byte	0x4
 3220 0343 E002      		.uleb128 .LVL28-.Ltext0
 3221 0345 E002      		.uleb128 .LVL28-.Ltext0
 3222 0347 04        		.uleb128 0x4
 3223 0348 78        		.byte	0x78
 3224 0349 BE7F      		.sleb128 -66
 3225 034b 9F        		.byte	0x9f
 3226 034c 04        		.byte	0x4
 3227 034d E002      		.uleb128 .LVL28-.Ltext0
 3228 034f EE02      		.uleb128 .LVL29-.Ltext0
 3229 0351 04        		.uleb128 0x4
 3230 0352 78        		.byte	0x78
 3231 0353 BA7F      		.sleb128 -70
 3232 0355 9F        		.byte	0x9f
 3233 0356 04        		.byte	0x4
 3234 0357 EE02      		.uleb128 .LVL29-.Ltext0
 3235 0359 F202      		.uleb128 .LFE5-.Ltext0
 3236 035b 01        		.uleb128 0x1
 3237 035c 50        		.byte	0x50
 3238 035d 00        		.byte	0
 3239               	.LVUS9:
 3240 035e 01        		.uleb128 .LVU111
 3241 035f 02        		.uleb128 .LVU112
 3242 0360 02        		.uleb128 .LVU112
 3243 0361 00        		.uleb128 0
 3244               	.LLST9:
 3245 0362 04        		.byte	0x4
 3246 0363 DC02      		.uleb128 .LVL27-.Ltext0
 3247 0365 DC02      		.uleb128 .LVL27-.Ltext0
 3248 0367 03        		.uleb128 0x3
 3249 0368 78        		.byte	0x78
 3250 0369 7C        		.sleb128 -4
 3251 036a 9F        		.byte	0x9f
 3252 036b 04        		.byte	0x4
 3253 036c DC02      		.uleb128 .LVL27-.Ltext0
 3254 036e F202      		.uleb128 .LFE5-.Ltext0
 3255 0370 03        		.uleb128 0x3
 3256 0371 78        		.byte	0x78
 3257 0372 7A        		.sleb128 -6
 3258 0373 9F        		.byte	0x9f
 3259 0374 00        		.byte	0
 3260               	.LVUS13:
 3261 0375 01        		.uleb128 .LVU150
 3262 0376 00        		.uleb128 .LVU154
 3263 0377 00        		.uleb128 .LVU154
 3264 0378 01        		.uleb128 .LVU155


 3265 0379 01        		.uleb128 .LVU155
 3266 037a 00        		.uleb128 .LVU159
 3267 037b 00        		.uleb128 .LVU159
 3268 037c 00        		.uleb128 .LVU162
 3269               	.LLST13:
 3270 037d 04        		.byte	0x4
 3271 037e C403      		.uleb128 .LVL38-.Ltext0
 3272 0380 E003      		.uleb128 .LVL39-.Ltext0
 3273 0382 0B        		.uleb128 0xb
 3274 0383 71        		.byte	0x71
 3275 0384 00        		.sleb128 0
 3276 0385 44        		.byte	0x44
 3277 0386 1E        		.byte	0x1e
 3278 0387 03        		.byte	0x3
 3279 0388 0000 0000 		.long	task_tab
 3280 038c 22        		.byte	0x22
 3281 038d 9F        		.byte	0x9f
 3282 038e 04        		.byte	0x4
 3283 038f E003      		.uleb128 .LVL39-.Ltext0
 3284 0391 E003      		.uleb128 .LVL39-.Ltext0
 3285 0393 0D        		.uleb128 0xd
 3286 0394 91        		.byte	0x91
 3287 0395 70        		.sleb128 -16
 3288 0396 06        		.byte	0x6
 3289 0397 06        		.byte	0x6
 3290 0398 44        		.byte	0x44
 3291 0399 1E        		.byte	0x1e
 3292 039a 03        		.byte	0x3
 3293 039b 0000 0000 		.long	task_tab
 3294 039f 22        		.byte	0x22
 3295 03a0 9F        		.byte	0x9f
 3296 03a1 04        		.byte	0x4
 3297 03a2 E003      		.uleb128 .LVL39-.Ltext0
 3298 03a4 E403      		.uleb128 .LVL40-.Ltext0
 3299 03a6 0B        		.uleb128 0xb
 3300 03a7 70        		.byte	0x70
 3301 03a8 00        		.sleb128 0
 3302 03a9 44        		.byte	0x44
 3303 03aa 1E        		.byte	0x1e
 3304 03ab 03        		.byte	0x3
 3305 03ac 0000 0000 		.long	task_tab
 3306 03b0 22        		.byte	0x22
 3307 03b1 9F        		.byte	0x9f
 3308 03b2 04        		.byte	0x4
 3309 03b3 E403      		.uleb128 .LVL40-.Ltext0
 3310 03b5 8604      		.uleb128 .LVL41-.Ltext0
 3311 03b7 0B        		.uleb128 0xb
 3312 03b8 71        		.byte	0x71
 3313 03b9 00        		.sleb128 0
 3314 03ba 44        		.byte	0x44
 3315 03bb 1E        		.byte	0x1e
 3316 03bc 03        		.byte	0x3
 3317 03bd 0000 0000 		.long	task_tab
 3318 03c1 22        		.byte	0x22
 3319 03c2 9F        		.byte	0x9f
 3320 03c3 00        		.byte	0
 3321               	.LVUS14:


 3322 03c4 00        		.uleb128 .LVU170
 3323 03c5 00        		.uleb128 0
 3324               	.LLST14:
 3325 03c6 04        		.byte	0x4
 3326 03c7 9404      		.uleb128 .LVL43-.Ltext0
 3327 03c9 AE04      		.uleb128 .LFE8-.Ltext0
 3328 03cb 01        		.uleb128 0x1
 3329 03cc 50        		.byte	0x50
 3330 03cd 00        		.byte	0
 3331               	.LVUS15:
 3332 03ce 01        		.uleb128 .LVU173
 3333 03cf 01        		.uleb128 .LVU179
 3334               	.LLST15:
 3335 03d0 04        		.byte	0x4
 3336 03d1 9604      		.uleb128 .LVL44-.Ltext0
 3337 03d3 AC04      		.uleb128 .LVL45-.Ltext0
 3338 03d5 0B        		.uleb128 0xb
 3339 03d6 70        		.byte	0x70
 3340 03d7 00        		.sleb128 0
 3341 03d8 44        		.byte	0x44
 3342 03d9 1E        		.byte	0x1e
 3343 03da 03        		.byte	0x3
 3344 03db 0000 0000 		.long	task_tab
 3345 03df 22        		.byte	0x22
 3346 03e0 9F        		.byte	0x9f
 3347 03e1 00        		.byte	0
 3348               	.LVUS17:
 3349 03e2 02        		.uleb128 .LVU182
 3350 03e3 01        		.uleb128 .LVU194
 3351 03e4 00        		.uleb128 .LVU198
 3352 03e5 01        		.uleb128 .LVU199
 3353               	.LLST17:
 3354 03e6 04        		.byte	0x4
 3355 03e7 AE04      		.uleb128 .LVL46-.Ltext0
 3356 03e9 D004      		.uleb128 .LVL49-.Ltext0
 3357 03eb 06        		.uleb128 0x6
 3358 03ec 03        		.byte	0x3
 3359 03ed 0000 0000 		.long	ready
 3360 03f1 9F        		.byte	0x9f
 3361 03f2 04        		.byte	0x4
 3362 03f3 D804      		.uleb128 .LVL50-.Ltext0
 3363 03f5 D804      		.uleb128 .LVL50-.Ltext0
 3364 03f7 06        		.uleb128 0x6
 3365 03f8 03        		.byte	0x3
 3366 03f9 0000 0000 		.long	ready
 3367 03fd 9F        		.byte	0x9f
 3368 03fe 00        		.byte	0
 3369               	.LVUS18:
 3370 03ff 00        		.uleb128 .LVU185
 3371 0400 01        		.uleb128 .LVU194
 3372 0401 00        		.uleb128 .LVU198
 3373 0402 01        		.uleb128 .LVU199
 3374               	.LLST18:
 3375 0403 04        		.byte	0x4
 3376 0404 B404      		.uleb128 .LVL47-.Ltext0
 3377 0406 D004      		.uleb128 .LVL49-.Ltext0
 3378 0408 01        		.uleb128 0x1


 3379 0409 50        		.byte	0x50
 3380 040a 04        		.byte	0x4
 3381 040b D804      		.uleb128 .LVL50-.Ltext0
 3382 040d D804      		.uleb128 .LVL50-.Ltext0
 3383 040f 01        		.uleb128 0x1
 3384 0410 50        		.byte	0x50
 3385 0411 00        		.byte	0
 3386               	.LVUS19:
 3387 0412 01        		.uleb128 .LVU188
 3388 0413 00        		.uleb128 .LVU198
 3389               	.LLST19:
 3390 0414 04        		.byte	0x4
 3391 0415 B604      		.uleb128 .LVL48-.Ltext0
 3392 0417 D804      		.uleb128 .LVL50-.Ltext0
 3393 0419 0B        		.uleb128 0xb
 3394 041a 70        		.byte	0x70
 3395 041b 00        		.sleb128 0
 3396 041c 44        		.byte	0x44
 3397 041d 1E        		.byte	0x1e
 3398 041e 03        		.byte	0x3
 3399 041f 0000 0000 		.long	task_tab
 3400 0423 22        		.byte	0x22
 3401 0424 9F        		.byte	0x9f
 3402 0425 00        		.byte	0
 3403               	.Ldebug_loc3:
 3404               		.section	.debug_aranges,"",@progbits
 3405 0000 0000 001C 		.long	0x1c
 3406 0004 0002      		.word	0x2
 3407 0006 0000 0000 		.long	.Ldebug_info0
 3408 000a 04        		.byte	0x4
 3409 000b 00        		.byte	0
 3410 000c 0000      		.word	0
 3411 000e 0000      		.word	0
 3412 0010 0000 0000 		.long	.Ltext0
 3413 0014 0000 03DA 		.long	.Letext0-.Ltext0
 3414 0018 0000 0000 		.long	0
 3415 001c 0000 0000 		.long	0
 3416               		.section	.debug_rnglists,"",@progbits
 3417               	.Ldebug_ranges0:
 3418 0000 0000 004A 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 3419               	.Ldebug_ranges2:
 3420 0004 0005      		.word	0x5
 3421 0006 04        		.byte	0x4
 3422 0007 00        		.byte	0
 3423 0008 0000 0000 		.long	0
 3424               	.LLRL5:
 3425 000c 04        		.byte	0x4
 3426 000d D201      		.uleb128 .LBB24-.Ltext0
 3427 000f E401      		.uleb128 .LBE24-.Ltext0
 3428 0011 04        		.byte	0x4
 3429 0012 EA01      		.uleb128 .LBB28-.Ltext0
 3430 0014 AA02      		.uleb128 .LBE28-.Ltext0
 3431 0016 00        		.byte	0
 3432               	.LLRL16:
 3433 0017 04        		.byte	0x4
 3434 0018 AE04      		.uleb128 .LBB37-.Ltext0
 3435 001a D004      		.uleb128 .LBE37-.Ltext0


 3436 001c 04        		.byte	0x4
 3437 001d D804      		.uleb128 .LBB41-.Ltext0
 3438 001f D804      		.uleb128 .LBE41-.Ltext0
 3439 0021 00        		.byte	0
 3440               	.LLRL20:
 3441 0022 04        		.byte	0x4
 3442 0023 E204      		.uleb128 .LBB50-.Ltext0
 3443 0025 FC04      		.uleb128 .LBE50-.Ltext0
 3444 0027 04        		.byte	0x4
 3445 0028 AA05      		.uleb128 .LBB62-.Ltext0
 3446 002a F005      		.uleb128 .LBE62-.Ltext0
 3447 002c 00        		.byte	0
 3448               	.LLRL24:
 3449 002d 04        		.byte	0x4
 3450 002e FC04      		.uleb128 .LBB54-.Ltext0
 3451 0030 A205      		.uleb128 .LBE54-.Ltext0
 3452 0032 04        		.byte	0x4
 3453 0033 F005      		.uleb128 .LBB63-.Ltext0
 3454 0035 FA05      		.uleb128 .LBE63-.Ltext0
 3455 0037 00        		.byte	0
 3456               	.LLRL25:
 3457 0038 04        		.byte	0x4
 3458 0039 FC04      		.uleb128 .LBB56-.Ltext0
 3459 003b 9C05      		.uleb128 .LBE56-.Ltext0
 3460 003d 04        		.byte	0x4
 3461 003e F005      		.uleb128 .LBB60-.Ltext0
 3462 0040 F805      		.uleb128 .LBE60-.Ltext0
 3463 0042 00        		.byte	0
 3464               	.LLRL33:
 3465 0043 04        		.byte	0x4
 3466 0044 D406      		.uleb128 .LBB67-.Ltext0
 3467 0046 E206      		.uleb128 .LBE67-.Ltext0
 3468 0048 04        		.byte	0x4
 3469 0049 E606      		.uleb128 .LBB71-.Ltext0
 3470 004b AC07      		.uleb128 .LBE71-.Ltext0
 3471 004d 00        		.byte	0
 3472               	.Ldebug_ranges3:
 3473               		.section	.debug_line,"",@progbits
 3474               	.Ldebug_line0:
 3475 0000 0000 0577 		.section	.debug_str,"MS",@progbits,1
 3475      0003 0000 
 3475      0037 0201 
 3475      FB0E 0D00 
 3475      0101 0101 
 3476               	.LASF26:
 3477 0000 7374 6163 		.string	"stacks"
 3477      6B73 00
 3478               	.LASF19:
 3479 0007 6E65 7874 		.string	"next"
 3479      00
 3480               	.LASF47:
 3481 000c 696E 745F 		.string	"int_ssp"
 3481      7373 7000 
 3482               	.LASF54:
 3483 0014 6D74 6B5F 		.string	"mtk_c.c"
 3483      632E 6300 
 3484               	.LASF32:


 3485 001c 6669 7273 		.string	"first_task"
 3485      745F 7461 
 3485      736B 00
 3486               	.LASF11:
 3487 0027 636F 756E 		.string	"count"
 3487      7400 
 3488               	.LASF16:
 3489 002d 7374 6163 		.string	"stack_ptr"
 3489      6B5F 7074 
 3489      7200 
 3490               	.LASF34:
 3491 0037 7076 5F68 		.string	"pv_handler"
 3491      616E 646C 
 3491      6572 00
 3492               	.LASF20:
 3493 0042 5443 425F 		.string	"TCB_TYPE"
 3493      5459 5045 
 3493      00
 3494               	.LASF18:
 3495 004b 7374 6174 		.string	"status"
 3495      7573 00
 3496               	.LASF28:
 3497 0052 6E65 775F 		.string	"new_task"
 3497      7461 736B 
 3497      00
 3498               	.LASF46:
 3499 005b 696E 6974 		.string	"init_stack"
 3499      5F73 7461 
 3499      636B 00
 3500               	.LASF55:
 3501 0066 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/2_multitask-curnel_compiled"
 3501      652F 7374 
 3501      7564 656E 
 3501      7473 2F35 
 3501      3233 3335 
 3502               	.LASF48:
 3503 00a9 7368 6F72 		.string	"short_ssp"
 3503      745F 7373 
 3503      7000 
 3504               	.LASF58:
 3505 00b3 5F5F 6275 		.string	"__builtin_puts"
 3505      696C 7469 
 3505      6E5F 7075 
 3505      7473 00
 3506               	.LASF49:
 3507 00c2 7365 745F 		.string	"set_task"
 3507      7461 736B 
 3507      00
 3508               	.LASF1:
 3509 00cb 756E 7369 		.string	"unsigned char"
 3509      676E 6564 
 3509      2063 6861 
 3509      7200 
 3510               	.LASF14:
 3511 00d9 5345 4D41 		.string	"SEMAPHORE_TYPE"
 3511      5048 4F52 
 3511      455F 5459 


 3511      5045 00
 3512               	.LASF45:
 3513 00e8 7265 6D6F 		.string	"removeq"
 3513      7665 7100 
 3514               	.LASF5:
 3515 00f0 6C6F 6E67 		.string	"long unsigned int"
 3515      2075 6E73 
 3515      6967 6E65 
 3515      6420 696E 
 3515      7400 
 3516               	.LASF43:
 3517 0102 6164 6471 		.string	"addq"
 3517      00
 3518               	.LASF3:
 3519 0107 7368 6F72 		.string	"short unsigned int"
 3519      7420 756E 
 3519      7369 676E 
 3519      6564 2069 
 3519      6E74 00
 3520               	.LASF15:
 3521 011a 7461 736B 		.string	"task_addr"
 3521      5F61 6464 
 3521      7200 
 3522               	.LASF17:
 3523 0124 7072 696F 		.string	"priority"
 3523      7269 7479 
 3523      00
 3524               	.LASF21:
 3525 012d 7573 7461 		.string	"ustack"
 3525      636B 00
 3526               	.LASF27:
 3527 0134 6375 7272 		.string	"curr_task"
 3527      5F74 6173 
 3527      6B00 
 3528               	.LASF24:
 3529 013e 7365 6D61 		.string	"semaphore"
 3529      7068 6F72 
 3529      6500 
 3530               	.LASF29:
 3531 0148 6E65 7874 		.string	"next_task"
 3531      5F74 6173 
 3531      6B00 
 3532               	.LASF2:
 3533 0152 7368 6F72 		.string	"short int"
 3533      7420 696E 
 3533      7400 
 3534               	.LASF31:
 3535 015c 7377 7463 		.string	"swtch"
 3535      6800 
 3536               	.LASF53:
 3537 0162 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 3537      4331 3720 
 3537      3131 2E34 
 3537      2E30 202D 
 3537      6D63 7075 
 3538               	.LASF9:
 3539 01a6 756E 7369 		.string	"unsigned int"


 3539      676E 6564 
 3539      2069 6E74 
 3539      00
 3540               	.LASF37:
 3541 01b3 765F 626F 		.string	"v_body"
 3541      6479 00
 3542               	.LASF30:
 3543 01ba 7265 6164 		.string	"ready"
 3543      7900 
 3544               	.LASF7:
 3545 01c0 6C6F 6E67 		.string	"long long unsigned int"
 3545      206C 6F6E 
 3545      6720 756E 
 3545      7369 676E 
 3545      6564 2069 
 3546               	.LASF13:
 3547 01d7 5441 534B 		.string	"TASK_ID_TYPE"
 3547      5F49 445F 
 3547      5459 5045 
 3547      00
 3548               	.LASF12:
 3549 01e4 7461 736B 		.string	"task_list"
 3549      5F6C 6973 
 3549      7400 
 3550               	.LASF41:
 3551 01ee 725F 6964 		.string	"r_id"
 3551      00
 3552               	.LASF52:
 3553 01f3 696E 6974 		.string	"init_kernel"
 3553      5F6B 6572 
 3553      6E65 6C00 
 3554               	.LASF8:
 3555 01ff 6C6F 6E67 		.string	"long double"
 3555      2064 6F75 
 3555      626C 6500 
 3556               	.LASF40:
 3557 020b 705F 626F 		.string	"p_body"
 3557      6479 00
 3558               	.LASF6:
 3559 0212 6C6F 6E67 		.string	"long long int"
 3559      206C 6F6E 
 3559      6720 696E 
 3559      7400 
 3560               	.LASF10:
 3561 0220 6368 6172 		.string	"char"
 3561      00
 3562               	.LASF42:
 3563 0225 7461 736B 		.string	"task_ptr"
 3563      5F70 7472 
 3563      00
 3564               	.LASF36:
 3565 022e 7761 6B65 		.string	"wakeup"
 3565      7570 00
 3566               	.LASF44:
 3567 0235 7175 655F 		.string	"que_ptr"
 3567      7074 7200 
 3568               	.LASF51:


 3569 023d 6265 6769 		.string	"begin_sch"
 3569      6E5F 7363 
 3569      6800 
 3570               	.LASF22:
 3571 0247 7373 7461 		.string	"sstack"
 3571      636B 00
 3572               	.LASF38:
 3573 024e 735F 6964 		.string	"s_id"
 3573      00
 3574               	.LASF4:
 3575 0253 6C6F 6E67 		.string	"long int"
 3575      2069 6E74 
 3575      00
 3576               	.LASF33:
 3577 025c 696E 6974 		.string	"init_timer"
 3577      5F74 696D 
 3577      6572 00
 3578               	.LASF57:
 3579 0267 7075 7473 		.string	"puts"
 3579      00
 3580               	.LASF35:
 3581 026c 7761 6B65 		.string	"wakeup_id"
 3581      7570 5F69 
 3581      6400 
 3582               	.LASF0:
 3583 0276 7369 676E 		.string	"signed char"
 3583      6564 2063 
 3583      6861 7200 
 3584               	.LASF23:
 3585 0282 5354 4143 		.string	"STACK_TYPE"
 3585      4B5F 5459 
 3585      5045 00
 3586               	.LASF39:
 3587 028d 736C 6565 		.string	"sleep"
 3587      7000 
 3588               	.LASF50:
 3589 0293 7573 6572 		.string	"usertask_ptr"
 3589      7461 736B 
 3589      5F70 7472 
 3589      00
 3590               	.LASF56:
 3591 02a0 7363 6865 		.string	"sched"
 3591      6400 
 3592               	.LASF25:
 3593 02a6 7461 736B 		.string	"task_tab"
 3593      5F74 6162 
 3593      00
 3594               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	
  44               	***************
  45               	**システムコール番号
  46               	***************
  47               	.equ SYSCALL_NUM_GETSTRING,     1
  48               	.equ SYSCALL_NUM_PUTSTRING,     2
  49               	.equ SYSCALL_NUM_RESET_TIMER,   3
  50               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global outbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	outbyte:


   8 0000 48E7 F040 		movem.l %d0-%d3/%a1, -(%sp)
   9               	
  10               	outbyte_loop:
  11               	
  12 0004 224F      		movea.l	%sp, %a1
  13 0006 741B      		move.l	#27,   %d2	/*4xレジスタ5個+PC分4*/
  14 0008 D3C2      		adda.l	%d2,   %a1
  15 000a 13D1 0000 		move.b	(%a1), outbyte_BUF
  15      0000 
  16               	
  17 0010 7002      		move.l 	#SYSCALL_NUM_PUTSTRING,%D0
  18 0012 7200      		move.l 	#0,     %d1 | ch = ch
  19 0014 243C 0000 		move.l 	#outbyte_BUF,  %d2 | p  = #BUF
  19      0000 
  20 001a 7601      		move.l 	#1,    %d3 | size = 1
  21 001c 4E40      		trap #0
  22               	
  23 001e 0C80 0000 		cmpi.l 	#0, %d0
  23      0000 
  24 0024 6700 FFDE 		beq 	outbyte_loop
  25 0028 4CDF 020F 		movem.l (%sp)+, %d0-%d3/%a1
  26 002c 4E75      		rts
  27               		
  28               	.section .bss
  29               	.even
  30               	
  31               	outbyte_BUF:
  32 0000 00        		.ds.b 1
  33 0001 00        		.even




   1               	#NO_APP
   2               		.file	"test2.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.section	.rodata.str1.1,"aMS",@progbits,1
   7               	.LC0:
   8 0000 5265 6164 		.string	"Ready Queue: "
   8      7920 5175 
   8      6575 653A 
   8      2000 
   9               	.LC1:
  10 000e 2564 2000 		.string	"%d "
  11               		.text
  12               		.align	2
  13               		.globl	display_ready_queue
  14               		.type	display_ready_queue, @function
  15               	display_ready_queue:
  16               	.LFB3:
  17               		.file 1 "test2.c"
   1:test2.c       **** #include "mtk_c.h"
   2:test2.c       **** #include <stdio.h>
   3:test2.c       **** 
   4:test2.c       **** void display_ready_queue() {
  18               		.loc 1 4 28 view -0
  19               		.cfi_startproc
  20 0000 48E7 2030 		movem.l #8240,-(%sp)
  21               		.cfi_def_cfa_offset 16
  22               		.cfi_offset 2, -16
  23               		.cfi_offset 10, -12
  24               		.cfi_offset 11, -8
   5:test2.c       ****     TASK_ID_TYPE temp = ready;
  25               		.loc 1 5 5 view .LVU1
  26               		.loc 1 5 18 is_stmt 0 view .LVU2
  27 0004 2439 0000 		move.l ready,%d2
  27      0000 
  28               	.LVL0:
   6:test2.c       ****     printf("Ready Queue: ");
  29               		.loc 1 6 5 is_stmt 1 view .LVU3
  30 000a 4879 0000 		pea .LC0
  30      0000 
  31               		.cfi_def_cfa_offset 20
  32 0010 45F9 0000 		lea printf,%a2
  32      0000 
  33 0016 4E92      		jsr (%a2)
  34               	.LVL1:
   7:test2.c       ****     while (temp != NULLTASKID) {
  35               		.loc 1 7 5 view .LVU4
  36               		.loc 1 7 17 view .LVU5
  37 0018 588F      		addq.l #4,%sp
  38               		.cfi_def_cfa_offset 16
  39 001a 4A82      		tst.l %d2
  40 001c 6724      		jeq .L2
  41 001e 47F9 0000 		lea task_tab,%a3
  41      0000 
  42               	.L3:
   8:test2.c       ****         printf("%d ", temp);


  43               		.loc 1 8 9 view .LVU6
  44 0024 2F02      		move.l %d2,-(%sp)
  45               		.cfi_def_cfa_offset 20
  46 0026 4879 0000 		pea .LC1
  46      0000 
  47               		.cfi_def_cfa_offset 24
  48 002c 4E92      		jsr (%a2)
  49               	.LVL2:
   9:test2.c       ****         temp = task_tab[temp].next;
  50               		.loc 1 9 9 view .LVU7
  51               		.loc 1 9 14 is_stmt 0 view .LVU8
  52 002e 2002      		move.l %d2,%d0
  53 0030 D082      		add.l %d2,%d0
  54 0032 D080      		add.l %d0,%d0
  55 0034 D082      		add.l %d2,%d0
  56 0036 D080      		add.l %d0,%d0
  57 0038 D080      		add.l %d0,%d0
  58 003a 2433 0810 		move.l 16(%a3,%d0.l),%d2
  59               	.LVL3:
   7:test2.c       ****     while (temp != NULLTASKID) {
  60               		.loc 1 7 17 is_stmt 1 view .LVU9
  61 003e 508F      		addq.l #8,%sp
  62               		.cfi_def_cfa_offset 16
  63 0040 66E2      		jne .L3
  64               	.L2:
  10:test2.c       ****     }
  11:test2.c       ****     printf("\n");
  65               		.loc 1 11 5 view .LVU10
  66 0042 4878 000A 		pea 10.w
  67               		.cfi_def_cfa_offset 20
  68 0046 4EB9 0000 		jsr putchar
  68      0000 
  69               	.LVL4:
  12:test2.c       **** }
  70               		.loc 1 12 1 is_stmt 0 view .LVU11
  71 004c 588F      		addq.l #4,%sp
  72               		.cfi_def_cfa_offset 16
  73 004e 4CDF 0C04 		movem.l (%sp)+,#3076
  74               	.LVL5:
  75               		.loc 1 12 1 view .LVU12
  76 0052 4E75      		rts
  77               		.cfi_endproc
  78               	.LFE3:
  79               		.size	display_ready_queue, .-display_ready_queue
  80               		.section	.rodata.str1.1
  81               	.LC2:
  82 0012 5B74 6173 		.string	"[task1]"
  82      6B31 5D00 
  83               	.LC3:
  84 001a 7365 6D61 		.string	"semaphore[0].count = %d\n semaphore[0].task_list = %d\n"
  84      7068 6F72 
  84      655B 305D 
  84      2E63 6F75 
  84      6E74 203D 
  85               	.LC4:
  86 0050 7365 6D61 		.string	"semaphore[1].count = %d\n semaphore[1].task_list = %d\n"
  86      7068 6F72 


  86      655B 315D 
  86      2E63 6F75 
  86      6E74 203D 
  87               	.LC5:
  88 0086 7365 6D61 		.string	"semaphore[2].count = %d\n semaphore[2].task_list = %d\n"
  88      7068 6F72 
  88      655B 325D 
  88      2E63 6F75 
  88      6E74 203D 
  89               		.text
  90               		.align	2
  91               		.globl	task1
  92               		.type	task1, @function
  93               	task1:
  94               	.LFB4:
  13:test2.c       **** 
  14:test2.c       **** void task1() {
  95               		.loc 1 14 14 is_stmt 1 view -0
  96               		.cfi_startproc
  97 0054 48E7 383E 		movem.l #14398,-(%sp)
  98               		.cfi_def_cfa_offset 36
  99               		.cfi_offset 2, -36
 100               		.cfi_offset 3, -32
 101               		.cfi_offset 4, -28
 102               		.cfi_offset 10, -24
 103               		.cfi_offset 11, -20
 104               		.cfi_offset 12, -16
 105               		.cfi_offset 13, -12
 106               		.cfi_offset 14, -8
  15:test2.c       ****     display_ready_queue();
 107               		.loc 1 15 5 view .LVU14
 108 0058 4EBA FFA6 		jsr display_ready_queue
 109               	.LVL6:
 110 005c 263C 0000 		move.l #P,%d3
 110      0000 
 111 0062 243C 0000 		move.l #puts,%d2
 111      0000 
 112 0068 45F9 0000 		lea printf,%a2
 112      0000 
 113 006e 47F9 0000 		lea task_tab,%a3
 113      0000 
 114 0074 4DF9 0000 		lea putchar,%a6
 114      0000 
 115 007a 4BF9 0000 		lea semaphore,%a5
 115      0000 
 116 0080 49F9 0000 		lea V,%a4
 116      0000 
  16:test2.c       ****     while(1) {
 117               		.loc 1 16 5 view .LVU15
  17:test2.c       ****         P(0);
 118               		.loc 1 17 9 view .LVU16
 119 0086 42A7      		clr.l -(%sp)
 120               		.cfi_def_cfa_offset 40
 121 0088 2043      		move.l %d3,%a0
 122 008a 4E90      		jsr (%a0)
 123               	.LVL7:
  18:test2.c       ****         printf("[task1]\n");


 124               		.loc 1 18 9 view .LVU17
 125 008c 4879 0000 		pea .LC2
 125      0000 
 126               		.cfi_def_cfa_offset 44
 127 0092 2042      		move.l %d2,%a0
 128 0094 4E90      		jsr (%a0)
 129               	.LVL8:
  19:test2.c       ****         display_ready_queue();
 130               		.loc 1 19 9 view .LVU18
 131               	.LBB4:
 132               	.LBI4:
   4:test2.c       ****     printf("Ready Queue: ");
 133               		.loc 1 4 6 view .LVU19
 134               	.LBB5:
   5:test2.c       ****     printf("Ready Queue: ");
 135               		.loc 1 5 5 view .LVU20
   5:test2.c       ****     printf("Ready Queue: ");
 136               		.loc 1 5 18 is_stmt 0 view .LVU21
 137 0096 2839 0000 		move.l ready,%d4
 137      0000 
 138               	.LVL9:
   6:test2.c       ****     while (temp != NULLTASKID) {
 139               		.loc 1 6 5 is_stmt 1 view .LVU22
 140 009c 4879 0000 		pea .LC0
 140      0000 
 141               		.cfi_def_cfa_offset 48
 142 00a2 4E92      		jsr (%a2)
 143               	.LVL10:
   7:test2.c       ****         printf("%d ", temp);
 144               		.loc 1 7 5 view .LVU23
   7:test2.c       ****         printf("%d ", temp);
 145               		.loc 1 7 17 view .LVU24
 146 00a4 4FEF 000C 		lea (12,%sp),%sp
 147               		.cfi_def_cfa_offset 36
 148 00a8 4A84      		tst.l %d4
 149 00aa 671E      		jeq .L11
 150               	.L12:
   8:test2.c       ****         temp = task_tab[temp].next;
 151               		.loc 1 8 9 view .LVU25
 152 00ac 2F04      		move.l %d4,-(%sp)
 153               		.cfi_def_cfa_offset 40
 154 00ae 4879 0000 		pea .LC1
 154      0000 
 155               		.cfi_def_cfa_offset 44
 156 00b4 4E92      		jsr (%a2)
 157               	.LVL11:
   9:test2.c       ****     }
 158               		.loc 1 9 9 view .LVU26
   9:test2.c       ****     }
 159               		.loc 1 9 14 is_stmt 0 view .LVU27
 160 00b6 2004      		move.l %d4,%d0
 161 00b8 D084      		add.l %d4,%d0
 162 00ba D080      		add.l %d0,%d0
 163 00bc D084      		add.l %d4,%d0
 164 00be D080      		add.l %d0,%d0
 165 00c0 D080      		add.l %d0,%d0
 166 00c2 2833 0810 		move.l 16(%a3,%d0.l),%d4


 167               	.LVL12:
   7:test2.c       ****         printf("%d ", temp);
 168               		.loc 1 7 17 is_stmt 1 view .LVU28
 169 00c6 508F      		addq.l #8,%sp
 170               		.cfi_def_cfa_offset 36
 171 00c8 66E2      		jne .L12
 172               	.L11:
  11:test2.c       **** }
 173               		.loc 1 11 5 view .LVU29
 174 00ca 4878 000A 		pea 10.w
 175               		.cfi_def_cfa_offset 40
 176 00ce 4E96      		jsr (%a6)
 177               	.LVL13:
  11:test2.c       **** }
 178               		.loc 1 11 5 is_stmt 0 view .LVU30
 179               	.LBE5:
 180               	.LBE4:
  20:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 181               		.loc 1 20 9 is_stmt 1 view .LVU31
 182 00d0 2F39 0000 		move.l semaphore+4,-(%sp)
 182      0000 
 183               		.cfi_def_cfa_offset 44
 184 00d6 2F15      		move.l (%a5),-(%sp)
 185               		.cfi_def_cfa_offset 48
 186 00d8 4879 0000 		pea .LC3
 186      0000 
 187               		.cfi_def_cfa_offset 52
 188 00de 4E92      		jsr (%a2)
 189               	.LVL14:
  21:test2.c       ****                 semaphore[0].count, semaphore[0].task_list);
  22:test2.c       ****         printf("semaphore[1].count = %d\n semaphore[1].task_list = %d\n",
 190               		.loc 1 22 9 view .LVU32
 191 00e0 2F39 0000 		move.l semaphore+12,-(%sp)
 191      0000 
 192               		.cfi_def_cfa_offset 56
 193 00e6 2F39 0000 		move.l semaphore+8,-(%sp)
 193      0000 
 194               		.cfi_def_cfa_offset 60
 195 00ec 4879 0000 		pea .LC4
 195      0000 
 196               		.cfi_def_cfa_offset 64
 197 00f2 4E92      		jsr (%a2)
 198               	.LVL15:
  23:test2.c       ****                 semaphore[1].count, semaphore[1].task_list);
  24:test2.c       ****         printf("semaphore[2].count = %d\n semaphore[2].task_list = %d\n",
 199               		.loc 1 24 9 view .LVU33
 200 00f4 2F39 0000 		move.l semaphore+20,-(%sp)
 200      0000 
 201               		.cfi_def_cfa_offset 68
 202 00fa 2F39 0000 		move.l semaphore+16,-(%sp)
 202      0000 
 203               		.cfi_def_cfa_offset 72
 204 0100 4879 0000 		pea .LC5
 204      0000 
 205               		.cfi_def_cfa_offset 76
 206 0106 4E92      		jsr (%a2)
 207               	.LVL16:


  25:test2.c       ****                 semaphore[2].count, semaphore[2].task_list);
  26:test2.c       ****         V(0);
 208               		.loc 1 26 9 view .LVU34
 209 0108 4FEF 0024 		lea (36,%sp),%sp
 210               		.cfi_def_cfa_offset 40
 211 010c 4297      		clr.l (%sp)
 212 010e 4E94      		jsr (%a4)
 213               	.LVL17:
  16:test2.c       ****         P(0);
 214               		.loc 1 16 10 view .LVU35
 215               		.loc 1 26 9 is_stmt 0 view .LVU36
 216 0110 588F      		addq.l #4,%sp
 217               		.cfi_def_cfa_offset 36
  16:test2.c       ****         P(0);
 218               		.loc 1 16 5 is_stmt 1 view .LVU37
  17:test2.c       ****         printf("[task1]\n");
 219               		.loc 1 17 9 view .LVU38
 220 0112 42A7      		clr.l -(%sp)
 221               		.cfi_def_cfa_offset 40
 222 0114 2043      		move.l %d3,%a0
 223 0116 4E90      		jsr (%a0)
 224               	.LVL18:
  18:test2.c       ****         display_ready_queue();
 225               		.loc 1 18 9 view .LVU39
 226 0118 4879 0000 		pea .LC2
 226      0000 
 227               		.cfi_def_cfa_offset 44
 228 011e 2042      		move.l %d2,%a0
 229 0120 4E90      		jsr (%a0)
 230               	.LVL19:
  19:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 231               		.loc 1 19 9 view .LVU40
 232               	.LBB7:
   4:test2.c       ****     TASK_ID_TYPE temp = ready;
 233               		.loc 1 4 6 view .LVU41
 234               	.LBB6:
   5:test2.c       ****     printf("Ready Queue: ");
 235               		.loc 1 5 5 view .LVU42
   5:test2.c       ****     printf("Ready Queue: ");
 236               		.loc 1 5 18 is_stmt 0 view .LVU43
 237 0122 2839 0000 		move.l ready,%d4
 237      0000 
 238               	.LVL20:
   6:test2.c       ****     while (temp != NULLTASKID) {
 239               		.loc 1 6 5 is_stmt 1 view .LVU44
 240 0128 4879 0000 		pea .LC0
 240      0000 
 241               		.cfi_def_cfa_offset 48
 242 012e 4E92      		jsr (%a2)
 243               	.LVL21:
   7:test2.c       ****         printf("%d ", temp);
 244               		.loc 1 7 5 view .LVU45
   7:test2.c       ****         printf("%d ", temp);
 245               		.loc 1 7 17 view .LVU46
 246 0130 4FEF 000C 		lea (12,%sp),%sp
 247               		.cfi_def_cfa_offset 36
 248 0134 4A84      		tst.l %d4


 249 0136 6600 FF74 		jne .L12
 250 013a 608E      		jra .L11
 251               	.LBE6:
 252               	.LBE7:
 253               		.cfi_endproc
 254               	.LFE4:
 255               		.size	task1, .-task1
 256               		.section	.rodata.str1.1
 257               	.LC6:
 258 00bc 5B74 6173 		.string	"[task2]"
 258      6B32 5D00 
 259               		.text
 260               		.align	2
 261               		.globl	task2
 262               		.type	task2, @function
 263               	task2:
 264               	.LFB5:
  27:test2.c       ****     }
  28:test2.c       **** }
  29:test2.c       **** 
  30:test2.c       **** void task2() {
 265               		.loc 1 30 14 view -0
 266               		.cfi_startproc
 267 013c 48E7 383E 		movem.l #14398,-(%sp)
 268               		.cfi_def_cfa_offset 36
 269               		.cfi_offset 2, -36
 270               		.cfi_offset 3, -32
 271               		.cfi_offset 4, -28
 272               		.cfi_offset 10, -24
 273               		.cfi_offset 11, -20
 274               		.cfi_offset 12, -16
 275               		.cfi_offset 13, -12
 276               		.cfi_offset 14, -8
  31:test2.c       ****     display_ready_queue();
 277               		.loc 1 31 5 view .LVU48
 278 0140 4EBA FEBE 		jsr display_ready_queue
 279               	.LVL22:
 280 0144 263C 0000 		move.l #P,%d3
 280      0000 
 281 014a 243C 0000 		move.l #puts,%d2
 281      0000 
 282 0150 45F9 0000 		lea printf,%a2
 282      0000 
 283 0156 47F9 0000 		lea task_tab,%a3
 283      0000 
 284 015c 4DF9 0000 		lea putchar,%a6
 284      0000 
 285 0162 4BF9 0000 		lea semaphore,%a5
 285      0000 
 286 0168 49F9 0000 		lea V,%a4
 286      0000 
  32:test2.c       ****     while(1) {
 287               		.loc 1 32 5 view .LVU49
  33:test2.c       ****         P(0);
 288               		.loc 1 33 9 view .LVU50
 289 016e 42A7      		clr.l -(%sp)
 290               		.cfi_def_cfa_offset 40


 291 0170 2043      		move.l %d3,%a0
 292 0172 4E90      		jsr (%a0)
 293               	.LVL23:
  34:test2.c       ****         printf("[task2]\n");
 294               		.loc 1 34 9 view .LVU51
 295 0174 4879 0000 		pea .LC6
 295      0000 
 296               		.cfi_def_cfa_offset 44
 297 017a 2042      		move.l %d2,%a0
 298 017c 4E90      		jsr (%a0)
 299               	.LVL24:
  35:test2.c       ****         display_ready_queue();
 300               		.loc 1 35 9 view .LVU52
 301               	.LBB10:
 302               	.LBI10:
   4:test2.c       ****     TASK_ID_TYPE temp = ready;
 303               		.loc 1 4 6 view .LVU53
 304               	.LBB11:
   5:test2.c       ****     printf("Ready Queue: ");
 305               		.loc 1 5 5 view .LVU54
   5:test2.c       ****     printf("Ready Queue: ");
 306               		.loc 1 5 18 is_stmt 0 view .LVU55
 307 017e 2839 0000 		move.l ready,%d4
 307      0000 
 308               	.LVL25:
   6:test2.c       ****     while (temp != NULLTASKID) {
 309               		.loc 1 6 5 is_stmt 1 view .LVU56
 310 0184 4879 0000 		pea .LC0
 310      0000 
 311               		.cfi_def_cfa_offset 48
 312 018a 4E92      		jsr (%a2)
 313               	.LVL26:
   7:test2.c       ****         printf("%d ", temp);
 314               		.loc 1 7 5 view .LVU57
   7:test2.c       ****         printf("%d ", temp);
 315               		.loc 1 7 17 view .LVU58
 316 018c 4FEF 000C 		lea (12,%sp),%sp
 317               		.cfi_def_cfa_offset 36
 318 0190 4A84      		tst.l %d4
 319 0192 671E      		jeq .L21
 320               	.L22:
   8:test2.c       ****         temp = task_tab[temp].next;
 321               		.loc 1 8 9 view .LVU59
 322 0194 2F04      		move.l %d4,-(%sp)
 323               		.cfi_def_cfa_offset 40
 324 0196 4879 0000 		pea .LC1
 324      0000 
 325               		.cfi_def_cfa_offset 44
 326 019c 4E92      		jsr (%a2)
 327               	.LVL27:
   9:test2.c       ****     }
 328               		.loc 1 9 9 view .LVU60
   9:test2.c       ****     }
 329               		.loc 1 9 14 is_stmt 0 view .LVU61
 330 019e 2004      		move.l %d4,%d0
 331 01a0 D084      		add.l %d4,%d0
 332 01a2 D080      		add.l %d0,%d0


 333 01a4 D084      		add.l %d4,%d0
 334 01a6 D080      		add.l %d0,%d0
 335 01a8 D080      		add.l %d0,%d0
 336 01aa 2833 0810 		move.l 16(%a3,%d0.l),%d4
 337               	.LVL28:
   7:test2.c       ****         printf("%d ", temp);
 338               		.loc 1 7 17 is_stmt 1 view .LVU62
 339 01ae 508F      		addq.l #8,%sp
 340               		.cfi_def_cfa_offset 36
 341 01b0 66E2      		jne .L22
 342               	.L21:
  11:test2.c       **** }
 343               		.loc 1 11 5 view .LVU63
 344 01b2 4878 000A 		pea 10.w
 345               		.cfi_def_cfa_offset 40
 346 01b6 4E96      		jsr (%a6)
 347               	.LVL29:
  11:test2.c       **** }
 348               		.loc 1 11 5 is_stmt 0 view .LVU64
 349               	.LBE11:
 350               	.LBE10:
  36:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 351               		.loc 1 36 9 is_stmt 1 view .LVU65
 352 01b8 2F39 0000 		move.l semaphore+4,-(%sp)
 352      0000 
 353               		.cfi_def_cfa_offset 44
 354 01be 2F15      		move.l (%a5),-(%sp)
 355               		.cfi_def_cfa_offset 48
 356 01c0 4879 0000 		pea .LC3
 356      0000 
 357               		.cfi_def_cfa_offset 52
 358 01c6 4E92      		jsr (%a2)
 359               	.LVL30:
  37:test2.c       ****                 semaphore[0].count, semaphore[0].task_list);
  38:test2.c       ****         printf("semaphore[1].count = %d\n semaphore[1].task_list = %d\n",
 360               		.loc 1 38 9 view .LVU66
 361 01c8 2F39 0000 		move.l semaphore+12,-(%sp)
 361      0000 
 362               		.cfi_def_cfa_offset 56
 363 01ce 2F39 0000 		move.l semaphore+8,-(%sp)
 363      0000 
 364               		.cfi_def_cfa_offset 60
 365 01d4 4879 0000 		pea .LC4
 365      0000 
 366               		.cfi_def_cfa_offset 64
 367 01da 4E92      		jsr (%a2)
 368               	.LVL31:
  39:test2.c       ****                 semaphore[1].count, semaphore[1].task_list);
  40:test2.c       ****         printf("semaphore[2].count = %d\n semaphore[2].task_list = %d\n",
 369               		.loc 1 40 9 view .LVU67
 370 01dc 2F39 0000 		move.l semaphore+20,-(%sp)
 370      0000 
 371               		.cfi_def_cfa_offset 68
 372 01e2 2F39 0000 		move.l semaphore+16,-(%sp)
 372      0000 
 373               		.cfi_def_cfa_offset 72
 374 01e8 4879 0000 		pea .LC5


 374      0000 
 375               		.cfi_def_cfa_offset 76
 376 01ee 4E92      		jsr (%a2)
 377               	.LVL32:
  41:test2.c       ****                 semaphore[2].count, semaphore[2].task_list);
  42:test2.c       ****         V(0);
 378               		.loc 1 42 9 view .LVU68
 379 01f0 4FEF 0024 		lea (36,%sp),%sp
 380               		.cfi_def_cfa_offset 40
 381 01f4 4297      		clr.l (%sp)
 382 01f6 4E94      		jsr (%a4)
 383               	.LVL33:
  32:test2.c       ****         P(0);
 384               		.loc 1 32 10 view .LVU69
 385               		.loc 1 42 9 is_stmt 0 view .LVU70
 386 01f8 588F      		addq.l #4,%sp
 387               		.cfi_def_cfa_offset 36
  32:test2.c       ****         P(0);
 388               		.loc 1 32 5 is_stmt 1 view .LVU71
  33:test2.c       ****         printf("[task2]\n");
 389               		.loc 1 33 9 view .LVU72
 390 01fa 42A7      		clr.l -(%sp)
 391               		.cfi_def_cfa_offset 40
 392 01fc 2043      		move.l %d3,%a0
 393 01fe 4E90      		jsr (%a0)
 394               	.LVL34:
  34:test2.c       ****         display_ready_queue();
 395               		.loc 1 34 9 view .LVU73
 396 0200 4879 0000 		pea .LC6
 396      0000 
 397               		.cfi_def_cfa_offset 44
 398 0206 2042      		move.l %d2,%a0
 399 0208 4E90      		jsr (%a0)
 400               	.LVL35:
  35:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 401               		.loc 1 35 9 view .LVU74
 402               	.LBB13:
   4:test2.c       ****     printf("Ready Queue: ");
 403               		.loc 1 4 6 view .LVU75
 404               	.LBB12:
   5:test2.c       ****     printf("Ready Queue: ");
 405               		.loc 1 5 5 view .LVU76
   5:test2.c       ****     printf("Ready Queue: ");
 406               		.loc 1 5 18 is_stmt 0 view .LVU77
 407 020a 2839 0000 		move.l ready,%d4
 407      0000 
 408               	.LVL36:
   6:test2.c       ****     while (temp != NULLTASKID) {
 409               		.loc 1 6 5 is_stmt 1 view .LVU78
 410 0210 4879 0000 		pea .LC0
 410      0000 
 411               		.cfi_def_cfa_offset 48
 412 0216 4E92      		jsr (%a2)
 413               	.LVL37:
   7:test2.c       ****         printf("%d ", temp);
 414               		.loc 1 7 5 view .LVU79
   7:test2.c       ****         printf("%d ", temp);


 415               		.loc 1 7 17 view .LVU80
 416 0218 4FEF 000C 		lea (12,%sp),%sp
 417               		.cfi_def_cfa_offset 36
 418 021c 4A84      		tst.l %d4
 419 021e 6600 FF74 		jne .L22
 420 0222 608E      		jra .L21
 421               	.LBE12:
 422               	.LBE13:
 423               		.cfi_endproc
 424               	.LFE5:
 425               		.size	task2, .-task2
 426               		.section	.rodata.str1.1
 427               	.LC7:
 428 00c4 5B74 6173 		.string	"[task3]"
 428      6B33 5D00 
 429               		.text
 430               		.align	2
 431               		.globl	task3
 432               		.type	task3, @function
 433               	task3:
 434               	.LFB6:
  43:test2.c       ****     }
  44:test2.c       **** }
  45:test2.c       **** 
  46:test2.c       **** void task3() {
 435               		.loc 1 46 14 view -0
 436               		.cfi_startproc
 437 0224 48E7 383E 		movem.l #14398,-(%sp)
 438               		.cfi_def_cfa_offset 36
 439               		.cfi_offset 2, -36
 440               		.cfi_offset 3, -32
 441               		.cfi_offset 4, -28
 442               		.cfi_offset 10, -24
 443               		.cfi_offset 11, -20
 444               		.cfi_offset 12, -16
 445               		.cfi_offset 13, -12
 446               		.cfi_offset 14, -8
  47:test2.c       ****     display_ready_queue();
 447               		.loc 1 47 5 view .LVU82
 448 0228 4EBA FDD6 		jsr display_ready_queue
 449               	.LVL38:
 450 022c 263C 0000 		move.l #P,%d3
 450      0000 
 451 0232 243C 0000 		move.l #puts,%d2
 451      0000 
 452 0238 45F9 0000 		lea printf,%a2
 452      0000 
 453 023e 47F9 0000 		lea task_tab,%a3
 453      0000 
 454 0244 4DF9 0000 		lea putchar,%a6
 454      0000 
 455 024a 4BF9 0000 		lea semaphore,%a5
 455      0000 
 456 0250 49F9 0000 		lea V,%a4
 456      0000 
  48:test2.c       ****     while(1) {
 457               		.loc 1 48 5 view .LVU83


  49:test2.c       ****         P(1);
 458               		.loc 1 49 9 view .LVU84
 459 0256 4878 0001 		pea 1.w
 460               		.cfi_def_cfa_offset 40
 461 025a 2043      		move.l %d3,%a0
 462 025c 4E90      		jsr (%a0)
 463               	.LVL39:
  50:test2.c       ****         printf("[task3]\n");
 464               		.loc 1 50 9 view .LVU85
 465 025e 4879 0000 		pea .LC7
 465      0000 
 466               		.cfi_def_cfa_offset 44
 467 0264 2042      		move.l %d2,%a0
 468 0266 4E90      		jsr (%a0)
 469               	.LVL40:
  51:test2.c       ****         display_ready_queue();
 470               		.loc 1 51 9 view .LVU86
 471               	.LBB16:
 472               	.LBI16:
   4:test2.c       ****     TASK_ID_TYPE temp = ready;
 473               		.loc 1 4 6 view .LVU87
 474               	.LBB17:
   5:test2.c       ****     printf("Ready Queue: ");
 475               		.loc 1 5 5 view .LVU88
   5:test2.c       ****     printf("Ready Queue: ");
 476               		.loc 1 5 18 is_stmt 0 view .LVU89
 477 0268 2839 0000 		move.l ready,%d4
 477      0000 
 478               	.LVL41:
   6:test2.c       ****     while (temp != NULLTASKID) {
 479               		.loc 1 6 5 is_stmt 1 view .LVU90
 480 026e 4879 0000 		pea .LC0
 480      0000 
 481               		.cfi_def_cfa_offset 48
 482 0274 4E92      		jsr (%a2)
 483               	.LVL42:
   7:test2.c       ****         printf("%d ", temp);
 484               		.loc 1 7 5 view .LVU91
   7:test2.c       ****         printf("%d ", temp);
 485               		.loc 1 7 17 view .LVU92
 486 0276 4FEF 000C 		lea (12,%sp),%sp
 487               		.cfi_def_cfa_offset 36
 488 027a 4A84      		tst.l %d4
 489 027c 671E      		jeq .L31
 490               	.L32:
   8:test2.c       ****         temp = task_tab[temp].next;
 491               		.loc 1 8 9 view .LVU93
 492 027e 2F04      		move.l %d4,-(%sp)
 493               		.cfi_def_cfa_offset 40
 494 0280 4879 0000 		pea .LC1
 494      0000 
 495               		.cfi_def_cfa_offset 44
 496 0286 4E92      		jsr (%a2)
 497               	.LVL43:
   9:test2.c       ****     }
 498               		.loc 1 9 9 view .LVU94
   9:test2.c       ****     }


 499               		.loc 1 9 14 is_stmt 0 view .LVU95
 500 0288 2004      		move.l %d4,%d0
 501 028a D084      		add.l %d4,%d0
 502 028c D080      		add.l %d0,%d0
 503 028e D084      		add.l %d4,%d0
 504 0290 D080      		add.l %d0,%d0
 505 0292 D080      		add.l %d0,%d0
 506 0294 2833 0810 		move.l 16(%a3,%d0.l),%d4
 507               	.LVL44:
   7:test2.c       ****         printf("%d ", temp);
 508               		.loc 1 7 17 is_stmt 1 view .LVU96
 509 0298 508F      		addq.l #8,%sp
 510               		.cfi_def_cfa_offset 36
 511 029a 66E2      		jne .L32
 512               	.L31:
  11:test2.c       **** }
 513               		.loc 1 11 5 view .LVU97
 514 029c 4878 000A 		pea 10.w
 515               		.cfi_def_cfa_offset 40
 516 02a0 4E96      		jsr (%a6)
 517               	.LVL45:
  11:test2.c       **** }
 518               		.loc 1 11 5 is_stmt 0 view .LVU98
 519               	.LBE17:
 520               	.LBE16:
  52:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 521               		.loc 1 52 9 is_stmt 1 view .LVU99
 522 02a2 2F39 0000 		move.l semaphore+4,-(%sp)
 522      0000 
 523               		.cfi_def_cfa_offset 44
 524 02a8 2F15      		move.l (%a5),-(%sp)
 525               		.cfi_def_cfa_offset 48
 526 02aa 4879 0000 		pea .LC3
 526      0000 
 527               		.cfi_def_cfa_offset 52
 528 02b0 4E92      		jsr (%a2)
 529               	.LVL46:
  53:test2.c       **** 				semaphore[0].count, semaphore[0].task_list);
  54:test2.c       ****         printf("semaphore[1].count = %d\n semaphore[1].task_list = %d\n",
 530               		.loc 1 54 9 view .LVU100
 531 02b2 2F39 0000 		move.l semaphore+12,-(%sp)
 531      0000 
 532               		.cfi_def_cfa_offset 56
 533 02b8 2F39 0000 		move.l semaphore+8,-(%sp)
 533      0000 
 534               		.cfi_def_cfa_offset 60
 535 02be 4879 0000 		pea .LC4
 535      0000 
 536               		.cfi_def_cfa_offset 64
 537 02c4 4E92      		jsr (%a2)
 538               	.LVL47:
  55:test2.c       ****                 semaphore[1].count, semaphore[1].task_list);
  56:test2.c       ****         printf("semaphore[2].count = %d\n semaphore[2].task_list = %d\n",
 539               		.loc 1 56 9 view .LVU101
 540 02c6 2F39 0000 		move.l semaphore+20,-(%sp)
 540      0000 
 541               		.cfi_def_cfa_offset 68


 542 02cc 2F39 0000 		move.l semaphore+16,-(%sp)
 542      0000 
 543               		.cfi_def_cfa_offset 72
 544 02d2 4879 0000 		pea .LC5
 544      0000 
 545               		.cfi_def_cfa_offset 76
 546 02d8 4E92      		jsr (%a2)
 547               	.LVL48:
  57:test2.c       ****                 semaphore[2].count, semaphore[2].task_list);
  58:test2.c       ****         V(1);
 548               		.loc 1 58 9 view .LVU102
 549 02da 4FEF 0028 		lea (40,%sp),%sp
 550               		.cfi_def_cfa_offset 36
 551 02de 4878 0001 		pea 1.w
 552               		.cfi_def_cfa_offset 40
 553 02e2 4E94      		jsr (%a4)
 554               	.LVL49:
  48:test2.c       ****         P(1);
 555               		.loc 1 48 10 view .LVU103
 556               		.loc 1 58 9 is_stmt 0 view .LVU104
 557 02e4 588F      		addq.l #4,%sp
 558               		.cfi_def_cfa_offset 36
  48:test2.c       ****         P(1);
 559               		.loc 1 48 5 is_stmt 1 view .LVU105
  49:test2.c       ****         printf("[task3]\n");
 560               		.loc 1 49 9 view .LVU106
 561 02e6 4878 0001 		pea 1.w
 562               		.cfi_def_cfa_offset 40
 563 02ea 2043      		move.l %d3,%a0
 564 02ec 4E90      		jsr (%a0)
 565               	.LVL50:
  50:test2.c       ****         display_ready_queue();
 566               		.loc 1 50 9 view .LVU107
 567 02ee 4879 0000 		pea .LC7
 567      0000 
 568               		.cfi_def_cfa_offset 44
 569 02f4 2042      		move.l %d2,%a0
 570 02f6 4E90      		jsr (%a0)
 571               	.LVL51:
  51:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 572               		.loc 1 51 9 view .LVU108
 573               	.LBB19:
   4:test2.c       ****     TASK_ID_TYPE temp = ready;
 574               		.loc 1 4 6 view .LVU109
 575               	.LBB18:
   5:test2.c       ****     printf("Ready Queue: ");
 576               		.loc 1 5 5 view .LVU110
   5:test2.c       ****     printf("Ready Queue: ");
 577               		.loc 1 5 18 is_stmt 0 view .LVU111
 578 02f8 2839 0000 		move.l ready,%d4
 578      0000 
 579               	.LVL52:
   6:test2.c       ****     while (temp != NULLTASKID) {
 580               		.loc 1 6 5 is_stmt 1 view .LVU112
 581 02fe 4879 0000 		pea .LC0
 581      0000 
 582               		.cfi_def_cfa_offset 48


 583 0304 4E92      		jsr (%a2)
 584               	.LVL53:
   7:test2.c       ****         printf("%d ", temp);
 585               		.loc 1 7 5 view .LVU113
   7:test2.c       ****         printf("%d ", temp);
 586               		.loc 1 7 17 view .LVU114
 587 0306 4FEF 000C 		lea (12,%sp),%sp
 588               		.cfi_def_cfa_offset 36
 589 030a 4A84      		tst.l %d4
 590 030c 6600 FF70 		jne .L32
 591 0310 608A      		jra .L31
 592               	.LBE18:
 593               	.LBE19:
 594               		.cfi_endproc
 595               	.LFE6:
 596               		.size	task3, .-task3
 597               		.section	.rodata.str1.1
 598               	.LC8:
 599 00cc 5B74 6173 		.string	"[task4]"
 599      6B34 5D00 
 600               		.text
 601               		.align	2
 602               		.globl	task4
 603               		.type	task4, @function
 604               	task4:
 605               	.LFB7:
  59:test2.c       ****     }
  60:test2.c       **** }
  61:test2.c       **** 
  62:test2.c       **** void task4() {
 606               		.loc 1 62 14 view -0
 607               		.cfi_startproc
 608 0312 48E7 383E 		movem.l #14398,-(%sp)
 609               		.cfi_def_cfa_offset 36
 610               		.cfi_offset 2, -36
 611               		.cfi_offset 3, -32
 612               		.cfi_offset 4, -28
 613               		.cfi_offset 10, -24
 614               		.cfi_offset 11, -20
 615               		.cfi_offset 12, -16
 616               		.cfi_offset 13, -12
 617               		.cfi_offset 14, -8
  63:test2.c       ****     display_ready_queue();
 618               		.loc 1 63 5 view .LVU116
 619 0316 4EBA FCE8 		jsr display_ready_queue
 620               	.LVL54:
 621 031a 263C 0000 		move.l #P,%d3
 621      0000 
 622 0320 243C 0000 		move.l #puts,%d2
 622      0000 
 623 0326 45F9 0000 		lea printf,%a2
 623      0000 
 624 032c 47F9 0000 		lea task_tab,%a3
 624      0000 
 625 0332 4DF9 0000 		lea putchar,%a6
 625      0000 
 626 0338 4BF9 0000 		lea semaphore,%a5


 626      0000 
 627 033e 49F9 0000 		lea V,%a4
 627      0000 
  64:test2.c       ****     while(1) {
 628               		.loc 1 64 5 view .LVU117
  65:test2.c       ****         P(1);
 629               		.loc 1 65 9 view .LVU118
 630 0344 4878 0001 		pea 1.w
 631               		.cfi_def_cfa_offset 40
 632 0348 2043      		move.l %d3,%a0
 633 034a 4E90      		jsr (%a0)
 634               	.LVL55:
  66:test2.c       ****         printf("[task4]\n");
 635               		.loc 1 66 9 view .LVU119
 636 034c 4879 0000 		pea .LC8
 636      0000 
 637               		.cfi_def_cfa_offset 44
 638 0352 2042      		move.l %d2,%a0
 639 0354 4E90      		jsr (%a0)
 640               	.LVL56:
  67:test2.c       ****         display_ready_queue();
 641               		.loc 1 67 9 view .LVU120
 642               	.LBB22:
 643               	.LBI22:
   4:test2.c       ****     printf("Ready Queue: ");
 644               		.loc 1 4 6 view .LVU121
 645               	.LBB23:
   5:test2.c       ****     printf("Ready Queue: ");
 646               		.loc 1 5 5 view .LVU122
   5:test2.c       ****     printf("Ready Queue: ");
 647               		.loc 1 5 18 is_stmt 0 view .LVU123
 648 0356 2839 0000 		move.l ready,%d4
 648      0000 
 649               	.LVL57:
   6:test2.c       ****     while (temp != NULLTASKID) {
 650               		.loc 1 6 5 is_stmt 1 view .LVU124
 651 035c 4879 0000 		pea .LC0
 651      0000 
 652               		.cfi_def_cfa_offset 48
 653 0362 4E92      		jsr (%a2)
 654               	.LVL58:
   7:test2.c       ****         printf("%d ", temp);
 655               		.loc 1 7 5 view .LVU125
   7:test2.c       ****         printf("%d ", temp);
 656               		.loc 1 7 17 view .LVU126
 657 0364 4FEF 000C 		lea (12,%sp),%sp
 658               		.cfi_def_cfa_offset 36
 659 0368 4A84      		tst.l %d4
 660 036a 671E      		jeq .L41
 661               	.L42:
   8:test2.c       ****         temp = task_tab[temp].next;
 662               		.loc 1 8 9 view .LVU127
 663 036c 2F04      		move.l %d4,-(%sp)
 664               		.cfi_def_cfa_offset 40
 665 036e 4879 0000 		pea .LC1
 665      0000 
 666               		.cfi_def_cfa_offset 44


 667 0374 4E92      		jsr (%a2)
 668               	.LVL59:
   9:test2.c       ****     }
 669               		.loc 1 9 9 view .LVU128
   9:test2.c       ****     }
 670               		.loc 1 9 14 is_stmt 0 view .LVU129
 671 0376 2004      		move.l %d4,%d0
 672 0378 D084      		add.l %d4,%d0
 673 037a D080      		add.l %d0,%d0
 674 037c D084      		add.l %d4,%d0
 675 037e D080      		add.l %d0,%d0
 676 0380 D080      		add.l %d0,%d0
 677 0382 2833 0810 		move.l 16(%a3,%d0.l),%d4
 678               	.LVL60:
   7:test2.c       ****         printf("%d ", temp);
 679               		.loc 1 7 17 is_stmt 1 view .LVU130
 680 0386 508F      		addq.l #8,%sp
 681               		.cfi_def_cfa_offset 36
 682 0388 66E2      		jne .L42
 683               	.L41:
  11:test2.c       **** }
 684               		.loc 1 11 5 view .LVU131
 685 038a 4878 000A 		pea 10.w
 686               		.cfi_def_cfa_offset 40
 687 038e 4E96      		jsr (%a6)
 688               	.LVL61:
  11:test2.c       **** }
 689               		.loc 1 11 5 is_stmt 0 view .LVU132
 690               	.LBE23:
 691               	.LBE22:
  68:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 692               		.loc 1 68 9 is_stmt 1 view .LVU133
 693 0390 2F39 0000 		move.l semaphore+4,-(%sp)
 693      0000 
 694               		.cfi_def_cfa_offset 44
 695 0396 2F15      		move.l (%a5),-(%sp)
 696               		.cfi_def_cfa_offset 48
 697 0398 4879 0000 		pea .LC3
 697      0000 
 698               		.cfi_def_cfa_offset 52
 699 039e 4E92      		jsr (%a2)
 700               	.LVL62:
  69:test2.c       **** 				semaphore[0].count, semaphore[0].task_list);
  70:test2.c       ****         printf("semaphore[1].count = %d\n semaphore[1].task_list = %d\n",
 701               		.loc 1 70 9 view .LVU134
 702 03a0 2F39 0000 		move.l semaphore+12,-(%sp)
 702      0000 
 703               		.cfi_def_cfa_offset 56
 704 03a6 2F39 0000 		move.l semaphore+8,-(%sp)
 704      0000 
 705               		.cfi_def_cfa_offset 60
 706 03ac 4879 0000 		pea .LC4
 706      0000 
 707               		.cfi_def_cfa_offset 64
 708 03b2 4E92      		jsr (%a2)
 709               	.LVL63:
  71:test2.c       **** 				semaphore[1].count, semaphore[1].task_list);


  72:test2.c       ****         printf("semaphore[2].count = %d\n semaphore[2].task_list = %d\n",
 710               		.loc 1 72 9 view .LVU135
 711 03b4 2F39 0000 		move.l semaphore+20,-(%sp)
 711      0000 
 712               		.cfi_def_cfa_offset 68
 713 03ba 2F39 0000 		move.l semaphore+16,-(%sp)
 713      0000 
 714               		.cfi_def_cfa_offset 72
 715 03c0 4879 0000 		pea .LC5
 715      0000 
 716               		.cfi_def_cfa_offset 76
 717 03c6 4E92      		jsr (%a2)
 718               	.LVL64:
  73:test2.c       **** 				semaphore[2].count, semaphore[2].task_list);
  74:test2.c       ****         V(1);
 719               		.loc 1 74 9 view .LVU136
 720 03c8 4FEF 0028 		lea (40,%sp),%sp
 721               		.cfi_def_cfa_offset 36
 722 03cc 4878 0001 		pea 1.w
 723               		.cfi_def_cfa_offset 40
 724 03d0 4E94      		jsr (%a4)
 725               	.LVL65:
  64:test2.c       ****         P(1);
 726               		.loc 1 64 10 view .LVU137
 727               		.loc 1 74 9 is_stmt 0 view .LVU138
 728 03d2 588F      		addq.l #4,%sp
 729               		.cfi_def_cfa_offset 36
  64:test2.c       ****         P(1);
 730               		.loc 1 64 5 is_stmt 1 view .LVU139
  65:test2.c       ****         printf("[task4]\n");
 731               		.loc 1 65 9 view .LVU140
 732 03d4 4878 0001 		pea 1.w
 733               		.cfi_def_cfa_offset 40
 734 03d8 2043      		move.l %d3,%a0
 735 03da 4E90      		jsr (%a0)
 736               	.LVL66:
  66:test2.c       ****         display_ready_queue();
 737               		.loc 1 66 9 view .LVU141
 738 03dc 4879 0000 		pea .LC8
 738      0000 
 739               		.cfi_def_cfa_offset 44
 740 03e2 2042      		move.l %d2,%a0
 741 03e4 4E90      		jsr (%a0)
 742               	.LVL67:
  67:test2.c       ****         printf("semaphore[0].count = %d\n semaphore[0].task_list = %d\n",
 743               		.loc 1 67 9 view .LVU142
 744               	.LBB25:
   4:test2.c       ****     TASK_ID_TYPE temp = ready;
 745               		.loc 1 4 6 view .LVU143
 746               	.LBB24:
   5:test2.c       ****     printf("Ready Queue: ");
 747               		.loc 1 5 5 view .LVU144
   5:test2.c       ****     printf("Ready Queue: ");
 748               		.loc 1 5 18 is_stmt 0 view .LVU145
 749 03e6 2839 0000 		move.l ready,%d4
 749      0000 
 750               	.LVL68:


   6:test2.c       ****     while (temp != NULLTASKID) {
 751               		.loc 1 6 5 is_stmt 1 view .LVU146
 752 03ec 4879 0000 		pea .LC0
 752      0000 
 753               		.cfi_def_cfa_offset 48
 754 03f2 4E92      		jsr (%a2)
 755               	.LVL69:
   7:test2.c       ****         printf("%d ", temp);
 756               		.loc 1 7 5 view .LVU147
   7:test2.c       ****         printf("%d ", temp);
 757               		.loc 1 7 17 view .LVU148
 758 03f4 4FEF 000C 		lea (12,%sp),%sp
 759               		.cfi_def_cfa_offset 36
 760 03f8 4A84      		tst.l %d4
 761 03fa 6600 FF70 		jne .L42
 762 03fe 608A      		jra .L41
 763               	.LBE24:
 764               	.LBE25:
 765               		.cfi_endproc
 766               	.LFE7:
 767               		.size	task4, .-task4
 768               		.section	.text.startup,"ax",@progbits
 769               		.align	2
 770               		.globl	main
 771               		.type	main, @function
 772               	main:
 773               	.LFB8:
  75:test2.c       ****     }
  76:test2.c       **** }
  77:test2.c       **** 
  78:test2.c       **** void main(void) {
 774               		.loc 1 78 17 view -0
 775               		.cfi_startproc
 776 0000 2F0A      		move.l %a2,-(%sp)
 777               		.cfi_def_cfa_offset 8
 778               		.cfi_offset 10, -8
  79:test2.c       ****     // ハードウェア初期化
  80:test2.c       ****     init_kernel();
 779               		.loc 1 80 5 view .LVU150
 780 0002 4EB9 0000 		jsr init_kernel
 780      0000 
 781               	.LVL70:
  81:test2.c       **** 
  82:test2.c       ****     // タスクの初期化と登録
  83:test2.c       ****     set_task(task1);
 782               		.loc 1 83 5 view .LVU151
 783 0008 4879 0000 		pea task1
 783      0000 
 784               		.cfi_def_cfa_offset 12
 785 000e 45F9 0000 		lea set_task,%a2
 785      0000 
 786 0014 4E92      		jsr (%a2)
 787               	.LVL71:
  84:test2.c       ****     set_task(task2);
 788               		.loc 1 84 5 view .LVU152
 789 0016 4879 0000 		pea task2
 789      0000 


 790               		.cfi_def_cfa_offset 16
 791 001c 4E92      		jsr (%a2)
 792               	.LVL72:
  85:test2.c       ****     set_task(task3);
 793               		.loc 1 85 5 view .LVU153
 794 001e 4879 0000 		pea task3
 794      0000 
 795               		.cfi_def_cfa_offset 20
 796 0024 4E92      		jsr (%a2)
 797               	.LVL73:
  86:test2.c       ****     set_task(task4);
 798               		.loc 1 86 5 view .LVU154
 799 0026 4879 0000 		pea task4
 799      0000 
 800               		.cfi_def_cfa_offset 24
 801 002c 4E92      		jsr (%a2)
 802               	.LVL74:
  87:test2.c       ****     display_ready_queue();
 803               		.loc 1 87 5 view .LVU155
 804 002e 4EB9 0000 		jsr display_ready_queue
 804      0000 
 805               	.LVL75:
  88:test2.c       **** 
  89:test2.c       ****     // マルチタスク処理の開始
  90:test2.c       ****     begin_sch();
 806               		.loc 1 90 5 view .LVU156
 807 0034 4FEF 0010 		lea (16,%sp),%sp
 808               		.cfi_def_cfa_offset 8
  91:test2.c       **** }
 809               		.loc 1 91 1 is_stmt 0 view .LVU157
 810 0038 245F      		move.l (%sp)+,%a2
  90:test2.c       **** }
 811               		.loc 1 90 5 view .LVU158
 812 003a 4EF9 0000 		jra begin_sch
 812      0000 
 813               	.LVL76:
 814               		.cfi_endproc
 815               	.LFE8:
 816               		.size	main, .-main
 817               		.text
 818               	.Letext0:
 819               		.file 2 "mtk_c.h"
 820               		.file 3 "<built-in>"
 821               		.file 4 "/usr/local/m68k-elf/include/stdio.h"
 822               		.section	.debug_info,"",@progbits
 823               	.Ldebug_info0:
 824 0000 0000 0545 		.long	0x545
 825 0004 0005      		.word	0x5
 826 0006 01        		.byte	0x1
 827 0007 04        		.byte	0x4
 828 0008 0000 0000 		.long	.Ldebug_abbrev0
 829 000c 13        		.uleb128 0x13
 830 000d 0000 0000 		.long	.LASF37
 831 0011 1D        		.byte	0x1d
 832 0012 0000 0000 		.long	.LASF38
 833 0016 0000 0000 		.long	.LASF39
 834 001a 0000 0000 		.long	.LLRL9


 835 001e 0000 0000 		.long	0
 836 0022 0000 0000 		.long	.Ldebug_line0
 837 0026 0A        		.uleb128 0xa
 838 0027 0000 0000 		.long	.LASF2
 839 002b 14        		.byte	0x14
 840 002c 0D        		.byte	0xd
 841 002d 0000 0031 		.long	0x31
 842 0031 14        		.uleb128 0x14
 843 0032 04        		.byte	0x4
 844 0033 05        		.byte	0x5
 845 0034 696E 7400 		.string	"int"
 846 0038 0D        		.uleb128 0xd
 847 0039 08        		.byte	0x8
 848 003a 16        		.byte	0x16
 849 003b 0000 0058 		.long	0x58
 850 003f 03        		.uleb128 0x3
 851 0040 0000 0000 		.long	.LASF0
 852 0044 17        		.byte	0x17
 853 0045 0F        		.byte	0xf
 854 0046 0000 0031 		.long	0x31
 855 004a 00        		.byte	0
 856 004b 03        		.uleb128 0x3
 857 004c 0000 0000 		.long	.LASF1
 858 0050 18        		.byte	0x18
 859 0051 0F        		.byte	0xf
 860 0052 0000 0026 		.long	0x26
 861 0056 04        		.byte	0x4
 862 0057 00        		.byte	0
 863 0058 0A        		.uleb128 0xa
 864 0059 0000 0000 		.long	.LASF3
 865 005d 19        		.byte	0x19
 866 005e 03        		.byte	0x3
 867 005f 0000 0038 		.long	0x38
 868 0063 0D        		.uleb128 0xd
 869 0064 14        		.byte	0x14
 870 0065 1B        		.byte	0x1b
 871 0066 0000 00A7 		.long	0xa7
 872 006a 03        		.uleb128 0x3
 873 006b 0000 0000 		.long	.LASF4
 874 006f 1C        		.byte	0x1c
 875 0070 0E        		.byte	0xe
 876 0071 0000 00AE 		.long	0xae
 877 0075 00        		.byte	0
 878 0076 03        		.uleb128 0x3
 879 0077 0000 0000 		.long	.LASF5
 880 007b 1D        		.byte	0x1d
 881 007c 0D        		.byte	0xd
 882 007d 0000 00B3 		.long	0xb3
 883 0081 04        		.byte	0x4
 884 0082 03        		.uleb128 0x3
 885 0083 0000 0000 		.long	.LASF6
 886 0087 1E        		.byte	0x1e
 887 0088 0F        		.byte	0xf
 888 0089 0000 0031 		.long	0x31
 889 008d 08        		.byte	0x8
 890 008e 03        		.uleb128 0x3
 891 008f 0000 0000 		.long	.LASF7


 892 0093 1F        		.byte	0x1f
 893 0094 0F        		.byte	0xf
 894 0095 0000 0031 		.long	0x31
 895 0099 0C        		.byte	0xc
 896 009a 03        		.uleb128 0x3
 897 009b 0000 0000 		.long	.LASF8
 898 009f 20        		.byte	0x20
 899 00a0 0F        		.byte	0xf
 900 00a1 0000 0026 		.long	0x26
 901 00a5 10        		.byte	0x10
 902 00a6 00        		.byte	0
 903 00a7 15        		.uleb128 0x15
 904 00a8 0000 00AE 		.long	0xae
 905 00ac 05        		.uleb128 0x5
 906 00ad 00        		.byte	0
 907 00ae 0E        		.uleb128 0xe
 908 00af 0000 00A7 		.long	0xa7
 909 00b3 16        		.uleb128 0x16
 910 00b4 04        		.byte	0x4
 911 00b5 0A        		.uleb128 0xa
 912 00b6 0000 0000 		.long	.LASF9
 913 00ba 21        		.byte	0x21
 914 00bb 03        		.byte	0x3
 915 00bc 0000 0063 		.long	0x63
 916 00c0 02        		.uleb128 0x2
 917 00c1 04        		.byte	0x4
 918 00c2 07        		.byte	0x7
 919 00c3 0000 0000 		.long	.LASF10
 920 00c7 02        		.uleb128 0x2
 921 00c8 01        		.byte	0x1
 922 00c9 06        		.byte	0x6
 923 00ca 0000 0000 		.long	.LASF11
 924 00ce 17        		.uleb128 0x17
 925 00cf 0000 00C7 		.long	0xc7
 926 00d3 0F        		.uleb128 0xf
 927 00d4 0000 0058 		.long	0x58
 928 00d8 0000 00E3 		.long	0xe3
 929 00dc 10        		.uleb128 0x10
 930 00dd 0000 00C0 		.long	0xc0
 931 00e1 02        		.byte	0x2
 932 00e2 00        		.byte	0
 933 00e3 0B        		.uleb128 0xb
 934 00e4 0000 0000 		.long	.LASF12
 935 00e8 2B        		.byte	0x2b
 936 00e9 18        		.byte	0x18
 937 00ea 0000 00D3 		.long	0xd3
 938 00ee 0F        		.uleb128 0xf
 939 00ef 0000 00B5 		.long	0xb5
 940 00f3 0000 00FE 		.long	0xfe
 941 00f7 10        		.uleb128 0x10
 942 00f8 0000 00C0 		.long	0xc0
 943 00fc 05        		.byte	0x5
 944 00fd 00        		.byte	0
 945 00fe 0B        		.uleb128 0xb
 946 00ff 0000 0000 		.long	.LASF13
 947 0103 2C        		.byte	0x2c
 948 0104 16        		.byte	0x16


 949 0105 0000 00EE 		.long	0xee
 950 0109 0B        		.uleb128 0xb
 951 010a 0000 0000 		.long	.LASF14
 952 010e 32        		.byte	0x32
 953 010f 15        		.byte	0x15
 954 0110 0000 0026 		.long	0x26
 955 0114 02        		.uleb128 0x2
 956 0115 01        		.byte	0x1
 957 0116 06        		.byte	0x6
 958 0117 0000 0000 		.long	.LASF15
 959 011b 02        		.uleb128 0x2
 960 011c 01        		.byte	0x1
 961 011d 08        		.byte	0x8
 962 011e 0000 0000 		.long	.LASF16
 963 0122 02        		.uleb128 0x2
 964 0123 02        		.byte	0x2
 965 0124 05        		.byte	0x5
 966 0125 0000 0000 		.long	.LASF17
 967 0129 02        		.uleb128 0x2
 968 012a 02        		.byte	0x2
 969 012b 07        		.byte	0x7
 970 012c 0000 0000 		.long	.LASF18
 971 0130 02        		.uleb128 0x2
 972 0131 04        		.byte	0x4
 973 0132 05        		.byte	0x5
 974 0133 0000 0000 		.long	.LASF19
 975 0137 02        		.uleb128 0x2
 976 0138 08        		.byte	0x8
 977 0139 05        		.byte	0x5
 978 013a 0000 0000 		.long	.LASF20
 979 013e 02        		.uleb128 0x2
 980 013f 08        		.byte	0x8
 981 0140 07        		.byte	0x7
 982 0141 0000 0000 		.long	.LASF21
 983 0145 02        		.uleb128 0x2
 984 0146 0C        		.byte	0xc
 985 0147 04        		.byte	0x4
 986 0148 0000 0000 		.long	.LASF22
 987 014c 02        		.uleb128 0x2
 988 014d 04        		.byte	0x4
 989 014e 07        		.byte	0x7
 990 014f 0000 0000 		.long	.LASF23
 991 0153 0E        		.uleb128 0xe
 992 0154 0000 00CE 		.long	0xce
 993 0158 11        		.uleb128 0x11
 994 0159 0000 0000 		.long	.LASF24
 995 015d 3E        		.byte	0x3e
 996 015e 0000 0164 		.long	0x164
 997 0162 05        		.uleb128 0x5
 998 0163 00        		.byte	0
 999 0164 18        		.uleb128 0x18
 1000 0165 0000 0000 		.long	.LASF40
 1001 0169 02        		.byte	0x2
 1002 016a 3C        		.byte	0x3c
 1003 016b 06        		.byte	0x6
 1004 016c 0000 0176 		.long	0x176
 1005 0170 06        		.uleb128 0x6


 1006 0171 0000 00AE 		.long	0xae
 1007 0175 00        		.byte	0
 1008 0176 11        		.uleb128 0x11
 1009 0177 0000 0000 		.long	.LASF25
 1010 017b 3B        		.byte	0x3b
 1011 017c 0000 0182 		.long	0x182
 1012 0180 05        		.uleb128 0x5
 1013 0181 00        		.byte	0
 1014 0182 12        		.uleb128 0x12
 1015 0183 5600      		.string	"V"
 1016 0185 5A        		.byte	0x5a
 1017 0186 0000 0031 		.long	0x31
 1018 018a 0000 0194 		.long	0x194
 1019 018e 06        		.uleb128 0x6
 1020 018f 0000 0031 		.long	0x31
 1021 0193 00        		.byte	0
 1022 0194 12        		.uleb128 0x12
 1023 0195 5000      		.string	"P"
 1024 0197 59        		.byte	0x59
 1025 0198 0000 0031 		.long	0x31
 1026 019c 0000 01A6 		.long	0x1a6
 1027 01a0 06        		.uleb128 0x6
 1028 01a1 0000 0031 		.long	0x31
 1029 01a5 00        		.byte	0
 1030 01a6 19        		.uleb128 0x19
 1031 01a7 0000 0000 		.long	.LASF26
 1032 01ab 04        		.byte	0x4
 1033 01ac CE        		.byte	0xce
 1034 01ad 05        		.byte	0x5
 1035 01ae 0000 0031 		.long	0x31
 1036 01b2 0000 01BD 		.long	0x1bd
 1037 01b6 06        		.uleb128 0x6
 1038 01b7 0000 0153 		.long	0x153
 1039 01bb 05        		.uleb128 0x5
 1040 01bc 00        		.byte	0
 1041 01bd 1A        		.uleb128 0x1a
 1042 01be 0000 0000 		.long	.LASF41
 1043 01c2 01        		.byte	0x1
 1044 01c3 4E        		.byte	0x4e
 1045 01c4 06        		.byte	0x6
 1046 01c5 0000 0000 		.long	.LFB8
 1047 01c9 0000 0040 		.long	.LFE8-.LFB8
 1048 01cd 01        		.uleb128 0x1
 1049 01ce 9C        		.byte	0x9c
 1050 01cf 0000 0213 		.long	0x213
 1051 01d3 01        		.uleb128 0x1
 1052 01d4 0000 0000 		.long	.LVL70
 1053 01d8 0000 0176 		.long	0x176
 1054 01dc 01        		.uleb128 0x1
 1055 01dd 0000 0000 		.long	.LVL71
 1056 01e1 0000 0164 		.long	0x164
 1057 01e5 01        		.uleb128 0x1
 1058 01e6 0000 0000 		.long	.LVL72
 1059 01ea 0000 0164 		.long	0x164
 1060 01ee 01        		.uleb128 0x1
 1061 01ef 0000 0000 		.long	.LVL73
 1062 01f3 0000 0164 		.long	0x164


 1063 01f7 01        		.uleb128 0x1
 1064 01f8 0000 0000 		.long	.LVL74
 1065 01fc 0000 0164 		.long	0x164
 1066 0200 01        		.uleb128 0x1
 1067 0201 0000 0000 		.long	.LVL75
 1068 0205 0000 04D7 		.long	0x4d7
 1069 0209 1B        		.uleb128 0x1b
 1070 020a 0000 0000 		.long	.LVL76
 1071 020e 0000 0158 		.long	0x158
 1072 0212 00        		.byte	0
 1073 0213 07        		.uleb128 0x7
 1074 0214 0000 0000 		.long	.LASF27
 1075 0218 3E        		.byte	0x3e
 1076 0219 0000 0000 		.long	.LFB7
 1077 021d 0000 00EE 		.long	.LFE7-.LFB7
 1078 0221 01        		.uleb128 0x1
 1079 0222 9C        		.byte	0x9c
 1080 0223 0000 02C4 		.long	0x2c4
 1081 0227 08        		.uleb128 0x8
 1082 0228 0000 04D7 		.long	0x4d7
 1083 022c 0000 0000 		.long	.LBI22
 1084 0230 01        		.byte	.LVU121
 1085 0231 0000 0000 		.long	.LLRL7
 1086 0235 43        		.byte	0x43
 1087 0236 0000 0272 		.long	0x272
 1088 023a 09        		.uleb128 0x9
 1089 023b 0000 0000 		.long	.LLRL7
 1090 023f 04        		.uleb128 0x4
 1091 0240 0000 04E4 		.long	0x4e4
 1092 0244 0000 0000 		.long	.LLST8
 1093 0248 0000 0000 		.long	.LVUS8
 1094 024c 01        		.uleb128 0x1
 1095 024d 0000 0000 		.long	.LVL58
 1096 0251 0000 052D 		.long	0x52d
 1097 0255 01        		.uleb128 0x1
 1098 0256 0000 0000 		.long	.LVL59
 1099 025a 0000 052D 		.long	0x52d
 1100 025e 01        		.uleb128 0x1
 1101 025f 0000 0000 		.long	.LVL61
 1102 0263 0000 0536 		.long	0x536
 1103 0267 01        		.uleb128 0x1
 1104 0268 0000 0000 		.long	.LVL69
 1105 026c 0000 052D 		.long	0x52d
 1106 0270 00        		.byte	0
 1107 0271 00        		.byte	0
 1108 0272 01        		.uleb128 0x1
 1109 0273 0000 0000 		.long	.LVL54
 1110 0277 0000 04D7 		.long	0x4d7
 1111 027b 01        		.uleb128 0x1
 1112 027c 0000 0000 		.long	.LVL55
 1113 0280 0000 0194 		.long	0x194
 1114 0284 01        		.uleb128 0x1
 1115 0285 0000 0000 		.long	.LVL56
 1116 0289 0000 053F 		.long	0x53f
 1117 028d 01        		.uleb128 0x1
 1118 028e 0000 0000 		.long	.LVL62
 1119 0292 0000 052D 		.long	0x52d


 1120 0296 01        		.uleb128 0x1
 1121 0297 0000 0000 		.long	.LVL63
 1122 029b 0000 052D 		.long	0x52d
 1123 029f 01        		.uleb128 0x1
 1124 02a0 0000 0000 		.long	.LVL64
 1125 02a4 0000 052D 		.long	0x52d
 1126 02a8 01        		.uleb128 0x1
 1127 02a9 0000 0000 		.long	.LVL65
 1128 02ad 0000 0182 		.long	0x182
 1129 02b1 01        		.uleb128 0x1
 1130 02b2 0000 0000 		.long	.LVL66
 1131 02b6 0000 0194 		.long	0x194
 1132 02ba 01        		.uleb128 0x1
 1133 02bb 0000 0000 		.long	.LVL67
 1134 02bf 0000 053F 		.long	0x53f
 1135 02c3 00        		.byte	0
 1136 02c4 07        		.uleb128 0x7
 1137 02c5 0000 0000 		.long	.LASF28
 1138 02c9 2E        		.byte	0x2e
 1139 02ca 0000 0000 		.long	.LFB6
 1140 02ce 0000 00EE 		.long	.LFE6-.LFB6
 1141 02d2 01        		.uleb128 0x1
 1142 02d3 9C        		.byte	0x9c
 1143 02d4 0000 0375 		.long	0x375
 1144 02d8 08        		.uleb128 0x8
 1145 02d9 0000 04D7 		.long	0x4d7
 1146 02dd 0000 0000 		.long	.LBI16
 1147 02e1 01        		.byte	.LVU87
 1148 02e2 0000 0000 		.long	.LLRL5
 1149 02e6 33        		.byte	0x33
 1150 02e7 0000 0323 		.long	0x323
 1151 02eb 09        		.uleb128 0x9
 1152 02ec 0000 0000 		.long	.LLRL5
 1153 02f0 04        		.uleb128 0x4
 1154 02f1 0000 04E4 		.long	0x4e4
 1155 02f5 0000 0000 		.long	.LLST6
 1156 02f9 0000 0000 		.long	.LVUS6
 1157 02fd 01        		.uleb128 0x1
 1158 02fe 0000 0000 		.long	.LVL42
 1159 0302 0000 052D 		.long	0x52d
 1160 0306 01        		.uleb128 0x1
 1161 0307 0000 0000 		.long	.LVL43
 1162 030b 0000 052D 		.long	0x52d
 1163 030f 01        		.uleb128 0x1
 1164 0310 0000 0000 		.long	.LVL45
 1165 0314 0000 0536 		.long	0x536
 1166 0318 01        		.uleb128 0x1
 1167 0319 0000 0000 		.long	.LVL53
 1168 031d 0000 052D 		.long	0x52d
 1169 0321 00        		.byte	0
 1170 0322 00        		.byte	0
 1171 0323 01        		.uleb128 0x1
 1172 0324 0000 0000 		.long	.LVL38
 1173 0328 0000 04D7 		.long	0x4d7
 1174 032c 01        		.uleb128 0x1
 1175 032d 0000 0000 		.long	.LVL39
 1176 0331 0000 0194 		.long	0x194


 1177 0335 01        		.uleb128 0x1
 1178 0336 0000 0000 		.long	.LVL40
 1179 033a 0000 053F 		.long	0x53f
 1180 033e 01        		.uleb128 0x1
 1181 033f 0000 0000 		.long	.LVL46
 1182 0343 0000 052D 		.long	0x52d
 1183 0347 01        		.uleb128 0x1
 1184 0348 0000 0000 		.long	.LVL47
 1185 034c 0000 052D 		.long	0x52d
 1186 0350 01        		.uleb128 0x1
 1187 0351 0000 0000 		.long	.LVL48
 1188 0355 0000 052D 		.long	0x52d
 1189 0359 01        		.uleb128 0x1
 1190 035a 0000 0000 		.long	.LVL49
 1191 035e 0000 0182 		.long	0x182
 1192 0362 01        		.uleb128 0x1
 1193 0363 0000 0000 		.long	.LVL50
 1194 0367 0000 0194 		.long	0x194
 1195 036b 01        		.uleb128 0x1
 1196 036c 0000 0000 		.long	.LVL51
 1197 0370 0000 053F 		.long	0x53f
 1198 0374 00        		.byte	0
 1199 0375 07        		.uleb128 0x7
 1200 0376 0000 0000 		.long	.LASF29
 1201 037a 1E        		.byte	0x1e
 1202 037b 0000 0000 		.long	.LFB5
 1203 037f 0000 00E8 		.long	.LFE5-.LFB5
 1204 0383 01        		.uleb128 0x1
 1205 0384 9C        		.byte	0x9c
 1206 0385 0000 0426 		.long	0x426
 1207 0389 08        		.uleb128 0x8
 1208 038a 0000 04D7 		.long	0x4d7
 1209 038e 0000 0000 		.long	.LBI10
 1210 0392 01        		.byte	.LVU53
 1211 0393 0000 0000 		.long	.LLRL3
 1212 0397 23        		.byte	0x23
 1213 0398 0000 03D4 		.long	0x3d4
 1214 039c 09        		.uleb128 0x9
 1215 039d 0000 0000 		.long	.LLRL3
 1216 03a1 04        		.uleb128 0x4
 1217 03a2 0000 04E4 		.long	0x4e4
 1218 03a6 0000 0000 		.long	.LLST4
 1219 03aa 0000 0000 		.long	.LVUS4
 1220 03ae 01        		.uleb128 0x1
 1221 03af 0000 0000 		.long	.LVL26
 1222 03b3 0000 052D 		.long	0x52d
 1223 03b7 01        		.uleb128 0x1
 1224 03b8 0000 0000 		.long	.LVL27
 1225 03bc 0000 052D 		.long	0x52d
 1226 03c0 01        		.uleb128 0x1
 1227 03c1 0000 0000 		.long	.LVL29
 1228 03c5 0000 0536 		.long	0x536
 1229 03c9 01        		.uleb128 0x1
 1230 03ca 0000 0000 		.long	.LVL37
 1231 03ce 0000 052D 		.long	0x52d
 1232 03d2 00        		.byte	0
 1233 03d3 00        		.byte	0


 1234 03d4 01        		.uleb128 0x1
 1235 03d5 0000 0000 		.long	.LVL22
 1236 03d9 0000 04D7 		.long	0x4d7
 1237 03dd 01        		.uleb128 0x1
 1238 03de 0000 0000 		.long	.LVL23
 1239 03e2 0000 0194 		.long	0x194
 1240 03e6 01        		.uleb128 0x1
 1241 03e7 0000 0000 		.long	.LVL24
 1242 03eb 0000 053F 		.long	0x53f
 1243 03ef 01        		.uleb128 0x1
 1244 03f0 0000 0000 		.long	.LVL30
 1245 03f4 0000 052D 		.long	0x52d
 1246 03f8 01        		.uleb128 0x1
 1247 03f9 0000 0000 		.long	.LVL31
 1248 03fd 0000 052D 		.long	0x52d
 1249 0401 01        		.uleb128 0x1
 1250 0402 0000 0000 		.long	.LVL32
 1251 0406 0000 052D 		.long	0x52d
 1252 040a 01        		.uleb128 0x1
 1253 040b 0000 0000 		.long	.LVL33
 1254 040f 0000 0182 		.long	0x182
 1255 0413 01        		.uleb128 0x1
 1256 0414 0000 0000 		.long	.LVL34
 1257 0418 0000 0194 		.long	0x194
 1258 041c 01        		.uleb128 0x1
 1259 041d 0000 0000 		.long	.LVL35
 1260 0421 0000 053F 		.long	0x53f
 1261 0425 00        		.byte	0
 1262 0426 07        		.uleb128 0x7
 1263 0427 0000 0000 		.long	.LASF30
 1264 042b 0E        		.byte	0xe
 1265 042c 0000 0000 		.long	.LFB4
 1266 0430 0000 00E8 		.long	.LFE4-.LFB4
 1267 0434 01        		.uleb128 0x1
 1268 0435 9C        		.byte	0x9c
 1269 0436 0000 04D7 		.long	0x4d7
 1270 043a 08        		.uleb128 0x8
 1271 043b 0000 04D7 		.long	0x4d7
 1272 043f 0000 0000 		.long	.LBI4
 1273 0443 01        		.byte	.LVU19
 1274 0444 0000 0000 		.long	.LLRL1
 1275 0448 13        		.byte	0x13
 1276 0449 0000 0485 		.long	0x485
 1277 044d 09        		.uleb128 0x9
 1278 044e 0000 0000 		.long	.LLRL1
 1279 0452 04        		.uleb128 0x4
 1280 0453 0000 04E4 		.long	0x4e4
 1281 0457 0000 0000 		.long	.LLST2
 1282 045b 0000 0000 		.long	.LVUS2
 1283 045f 01        		.uleb128 0x1
 1284 0460 0000 0000 		.long	.LVL10
 1285 0464 0000 052D 		.long	0x52d
 1286 0468 01        		.uleb128 0x1
 1287 0469 0000 0000 		.long	.LVL11
 1288 046d 0000 052D 		.long	0x52d
 1289 0471 01        		.uleb128 0x1
 1290 0472 0000 0000 		.long	.LVL13


 1291 0476 0000 0536 		.long	0x536
 1292 047a 01        		.uleb128 0x1
 1293 047b 0000 0000 		.long	.LVL21
 1294 047f 0000 052D 		.long	0x52d
 1295 0483 00        		.byte	0
 1296 0484 00        		.byte	0
 1297 0485 01        		.uleb128 0x1
 1298 0486 0000 0000 		.long	.LVL6
 1299 048a 0000 04D7 		.long	0x4d7
 1300 048e 01        		.uleb128 0x1
 1301 048f 0000 0000 		.long	.LVL7
 1302 0493 0000 0194 		.long	0x194
 1303 0497 01        		.uleb128 0x1
 1304 0498 0000 0000 		.long	.LVL8
 1305 049c 0000 053F 		.long	0x53f
 1306 04a0 01        		.uleb128 0x1
 1307 04a1 0000 0000 		.long	.LVL14
 1308 04a5 0000 052D 		.long	0x52d
 1309 04a9 01        		.uleb128 0x1
 1310 04aa 0000 0000 		.long	.LVL15
 1311 04ae 0000 052D 		.long	0x52d
 1312 04b2 01        		.uleb128 0x1
 1313 04b3 0000 0000 		.long	.LVL16
 1314 04b7 0000 052D 		.long	0x52d
 1315 04bb 01        		.uleb128 0x1
 1316 04bc 0000 0000 		.long	.LVL17
 1317 04c0 0000 0182 		.long	0x182
 1318 04c4 01        		.uleb128 0x1
 1319 04c5 0000 0000 		.long	.LVL18
 1320 04c9 0000 0194 		.long	0x194
 1321 04cd 01        		.uleb128 0x1
 1322 04ce 0000 0000 		.long	.LVL19
 1323 04d2 0000 053F 		.long	0x53f
 1324 04d6 00        		.byte	0
 1325 04d7 1C        		.uleb128 0x1c
 1326 04d8 0000 0000 		.long	.LASF31
 1327 04dc 01        		.byte	0x1
 1328 04dd 04        		.byte	0x4
 1329 04de 06        		.byte	0x6
 1330 04df 01        		.byte	0x1
 1331 04e0 0000 04F1 		.long	0x4f1
 1332 04e4 1D        		.uleb128 0x1d
 1333 04e5 0000 0000 		.long	.LASF42
 1334 04e9 01        		.byte	0x1
 1335 04ea 05        		.byte	0x5
 1336 04eb 12        		.byte	0x12
 1337 04ec 0000 0026 		.long	0x26
 1338 04f0 00        		.byte	0
 1339 04f1 1E        		.uleb128 0x1e
 1340 04f2 0000 04D7 		.long	0x4d7
 1341 04f6 0000 0000 		.long	.LFB3
 1342 04fa 0000 0054 		.long	.LFE3-.LFB3
 1343 04fe 01        		.uleb128 0x1
 1344 04ff 9C        		.byte	0x9c
 1345 0500 0000 052D 		.long	0x52d
 1346 0504 04        		.uleb128 0x4
 1347 0505 0000 04E4 		.long	0x4e4


 1348 0509 0000 0000 		.long	.LLST0
 1349 050d 0000 0000 		.long	.LVUS0
 1350 0511 01        		.uleb128 0x1
 1351 0512 0000 0000 		.long	.LVL1
 1352 0516 0000 052D 		.long	0x52d
 1353 051a 01        		.uleb128 0x1
 1354 051b 0000 0000 		.long	.LVL2
 1355 051f 0000 052D 		.long	0x52d
 1356 0523 01        		.uleb128 0x1
 1357 0524 0000 0000 		.long	.LVL4
 1358 0528 0000 0536 		.long	0x536
 1359 052c 00        		.byte	0
 1360 052d 0C        		.uleb128 0xc
 1361 052e 0000 0000 		.long	.LASF26
 1362 0532 0000 0000 		.long	.LASF33
 1363 0536 0C        		.uleb128 0xc
 1364 0537 0000 0000 		.long	.LASF32
 1365 053b 0000 0000 		.long	.LASF34
 1366 053f 0C        		.uleb128 0xc
 1367 0540 0000 0000 		.long	.LASF35
 1368 0544 0000 0000 		.long	.LASF36
 1369 0548 00        		.byte	0
 1370               		.section	.debug_abbrev,"",@progbits
 1371               	.Ldebug_abbrev0:
 1372 0000 01        		.uleb128 0x1
 1373 0001 48        		.uleb128 0x48
 1374 0002 00        		.byte	0
 1375 0003 7D        		.uleb128 0x7d
 1376 0004 01        		.uleb128 0x1
 1377 0005 7F        		.uleb128 0x7f
 1378 0006 13        		.uleb128 0x13
 1379 0007 00        		.byte	0
 1380 0008 00        		.byte	0
 1381 0009 02        		.uleb128 0x2
 1382 000a 24        		.uleb128 0x24
 1383 000b 00        		.byte	0
 1384 000c 0B        		.uleb128 0xb
 1385 000d 0B        		.uleb128 0xb
 1386 000e 3E        		.uleb128 0x3e
 1387 000f 0B        		.uleb128 0xb
 1388 0010 03        		.uleb128 0x3
 1389 0011 0E        		.uleb128 0xe
 1390 0012 00        		.byte	0
 1391 0013 00        		.byte	0
 1392 0014 03        		.uleb128 0x3
 1393 0015 0D        		.uleb128 0xd
 1394 0016 00        		.byte	0
 1395 0017 03        		.uleb128 0x3
 1396 0018 0E        		.uleb128 0xe
 1397 0019 3A        		.uleb128 0x3a
 1398 001a 21        		.uleb128 0x21
 1399 001b 02        		.sleb128 2
 1400 001c 3B        		.uleb128 0x3b
 1401 001d 0B        		.uleb128 0xb
 1402 001e 39        		.uleb128 0x39
 1403 001f 0B        		.uleb128 0xb
 1404 0020 49        		.uleb128 0x49


 1405 0021 13        		.uleb128 0x13
 1406 0022 38        		.uleb128 0x38
 1407 0023 0B        		.uleb128 0xb
 1408 0024 00        		.byte	0
 1409 0025 00        		.byte	0
 1410 0026 04        		.uleb128 0x4
 1411 0027 34        		.uleb128 0x34
 1412 0028 00        		.byte	0
 1413 0029 31        		.uleb128 0x31
 1414 002a 13        		.uleb128 0x13
 1415 002b 02        		.uleb128 0x2
 1416 002c 17        		.uleb128 0x17
 1417 002d B742      		.uleb128 0x2137
 1418 002f 17        		.uleb128 0x17
 1419 0030 00        		.byte	0
 1420 0031 00        		.byte	0
 1421 0032 05        		.uleb128 0x5
 1422 0033 18        		.uleb128 0x18
 1423 0034 00        		.byte	0
 1424 0035 00        		.byte	0
 1425 0036 00        		.byte	0
 1426 0037 06        		.uleb128 0x6
 1427 0038 05        		.uleb128 0x5
 1428 0039 00        		.byte	0
 1429 003a 49        		.uleb128 0x49
 1430 003b 13        		.uleb128 0x13
 1431 003c 00        		.byte	0
 1432 003d 00        		.byte	0
 1433 003e 07        		.uleb128 0x7
 1434 003f 2E        		.uleb128 0x2e
 1435 0040 01        		.byte	0x1
 1436 0041 3F        		.uleb128 0x3f
 1437 0042 19        		.uleb128 0x19
 1438 0043 03        		.uleb128 0x3
 1439 0044 0E        		.uleb128 0xe
 1440 0045 3A        		.uleb128 0x3a
 1441 0046 21        		.uleb128 0x21
 1442 0047 01        		.sleb128 1
 1443 0048 3B        		.uleb128 0x3b
 1444 0049 0B        		.uleb128 0xb
 1445 004a 39        		.uleb128 0x39
 1446 004b 21        		.uleb128 0x21
 1447 004c 06        		.sleb128 6
 1448 004d 11        		.uleb128 0x11
 1449 004e 01        		.uleb128 0x1
 1450 004f 12        		.uleb128 0x12
 1451 0050 06        		.uleb128 0x6
 1452 0051 40        		.uleb128 0x40
 1453 0052 18        		.uleb128 0x18
 1454 0053 7A        		.uleb128 0x7a
 1455 0054 19        		.uleb128 0x19
 1456 0055 01        		.uleb128 0x1
 1457 0056 13        		.uleb128 0x13
 1458 0057 00        		.byte	0
 1459 0058 00        		.byte	0
 1460 0059 08        		.uleb128 0x8
 1461 005a 1D        		.uleb128 0x1d


 1462 005b 01        		.byte	0x1
 1463 005c 31        		.uleb128 0x31
 1464 005d 13        		.uleb128 0x13
 1465 005e 52        		.uleb128 0x52
 1466 005f 01        		.uleb128 0x1
 1467 0060 B842      		.uleb128 0x2138
 1468 0062 0B        		.uleb128 0xb
 1469 0063 55        		.uleb128 0x55
 1470 0064 17        		.uleb128 0x17
 1471 0065 58        		.uleb128 0x58
 1472 0066 21        		.uleb128 0x21
 1473 0067 01        		.sleb128 1
 1474 0068 59        		.uleb128 0x59
 1475 0069 0B        		.uleb128 0xb
 1476 006a 57        		.uleb128 0x57
 1477 006b 21        		.uleb128 0x21
 1478 006c 09        		.sleb128 9
 1479 006d 01        		.uleb128 0x1
 1480 006e 13        		.uleb128 0x13
 1481 006f 00        		.byte	0
 1482 0070 00        		.byte	0
 1483 0071 09        		.uleb128 0x9
 1484 0072 0B        		.uleb128 0xb
 1485 0073 01        		.byte	0x1
 1486 0074 55        		.uleb128 0x55
 1487 0075 17        		.uleb128 0x17
 1488 0076 00        		.byte	0
 1489 0077 00        		.byte	0
 1490 0078 0A        		.uleb128 0xa
 1491 0079 16        		.uleb128 0x16
 1492 007a 00        		.byte	0
 1493 007b 03        		.uleb128 0x3
 1494 007c 0E        		.uleb128 0xe
 1495 007d 3A        		.uleb128 0x3a
 1496 007e 21        		.uleb128 0x21
 1497 007f 02        		.sleb128 2
 1498 0080 3B        		.uleb128 0x3b
 1499 0081 0B        		.uleb128 0xb
 1500 0082 39        		.uleb128 0x39
 1501 0083 0B        		.uleb128 0xb
 1502 0084 49        		.uleb128 0x49
 1503 0085 13        		.uleb128 0x13
 1504 0086 00        		.byte	0
 1505 0087 00        		.byte	0
 1506 0088 0B        		.uleb128 0xb
 1507 0089 34        		.uleb128 0x34
 1508 008a 00        		.byte	0
 1509 008b 03        		.uleb128 0x3
 1510 008c 0E        		.uleb128 0xe
 1511 008d 3A        		.uleb128 0x3a
 1512 008e 21        		.uleb128 0x21
 1513 008f 02        		.sleb128 2
 1514 0090 3B        		.uleb128 0x3b
 1515 0091 0B        		.uleb128 0xb
 1516 0092 39        		.uleb128 0x39
 1517 0093 0B        		.uleb128 0xb
 1518 0094 49        		.uleb128 0x49


 1519 0095 13        		.uleb128 0x13
 1520 0096 3F        		.uleb128 0x3f
 1521 0097 19        		.uleb128 0x19
 1522 0098 3C        		.uleb128 0x3c
 1523 0099 19        		.uleb128 0x19
 1524 009a 00        		.byte	0
 1525 009b 00        		.byte	0
 1526 009c 0C        		.uleb128 0xc
 1527 009d 2E        		.uleb128 0x2e
 1528 009e 00        		.byte	0
 1529 009f 3F        		.uleb128 0x3f
 1530 00a0 19        		.uleb128 0x19
 1531 00a1 3C        		.uleb128 0x3c
 1532 00a2 19        		.uleb128 0x19
 1533 00a3 6E        		.uleb128 0x6e
 1534 00a4 0E        		.uleb128 0xe
 1535 00a5 03        		.uleb128 0x3
 1536 00a6 0E        		.uleb128 0xe
 1537 00a7 3A        		.uleb128 0x3a
 1538 00a8 21        		.uleb128 0x21
 1539 00a9 03        		.sleb128 3
 1540 00aa 3B        		.uleb128 0x3b
 1541 00ab 21        		.uleb128 0x21
 1542 00ac 00        		.sleb128 0
 1543 00ad 00        		.byte	0
 1544 00ae 00        		.byte	0
 1545 00af 0D        		.uleb128 0xd
 1546 00b0 13        		.uleb128 0x13
 1547 00b1 01        		.byte	0x1
 1548 00b2 0B        		.uleb128 0xb
 1549 00b3 0B        		.uleb128 0xb
 1550 00b4 3A        		.uleb128 0x3a
 1551 00b5 21        		.uleb128 0x21
 1552 00b6 02        		.sleb128 2
 1553 00b7 3B        		.uleb128 0x3b
 1554 00b8 0B        		.uleb128 0xb
 1555 00b9 39        		.uleb128 0x39
 1556 00ba 21        		.uleb128 0x21
 1557 00bb 09        		.sleb128 9
 1558 00bc 01        		.uleb128 0x1
 1559 00bd 13        		.uleb128 0x13
 1560 00be 00        		.byte	0
 1561 00bf 00        		.byte	0
 1562 00c0 0E        		.uleb128 0xe
 1563 00c1 0F        		.uleb128 0xf
 1564 00c2 00        		.byte	0
 1565 00c3 0B        		.uleb128 0xb
 1566 00c4 21        		.uleb128 0x21
 1567 00c5 04        		.sleb128 4
 1568 00c6 49        		.uleb128 0x49
 1569 00c7 13        		.uleb128 0x13
 1570 00c8 00        		.byte	0
 1571 00c9 00        		.byte	0
 1572 00ca 0F        		.uleb128 0xf
 1573 00cb 01        		.uleb128 0x1
 1574 00cc 01        		.byte	0x1
 1575 00cd 49        		.uleb128 0x49


 1576 00ce 13        		.uleb128 0x13
 1577 00cf 01        		.uleb128 0x1
 1578 00d0 13        		.uleb128 0x13
 1579 00d1 00        		.byte	0
 1580 00d2 00        		.byte	0
 1581 00d3 10        		.uleb128 0x10
 1582 00d4 21        		.uleb128 0x21
 1583 00d5 00        		.byte	0
 1584 00d6 49        		.uleb128 0x49
 1585 00d7 13        		.uleb128 0x13
 1586 00d8 2F        		.uleb128 0x2f
 1587 00d9 0B        		.uleb128 0xb
 1588 00da 00        		.byte	0
 1589 00db 00        		.byte	0
 1590 00dc 11        		.uleb128 0x11
 1591 00dd 2E        		.uleb128 0x2e
 1592 00de 01        		.byte	0x1
 1593 00df 3F        		.uleb128 0x3f
 1594 00e0 19        		.uleb128 0x19
 1595 00e1 03        		.uleb128 0x3
 1596 00e2 0E        		.uleb128 0xe
 1597 00e3 3A        		.uleb128 0x3a
 1598 00e4 21        		.uleb128 0x21
 1599 00e5 02        		.sleb128 2
 1600 00e6 3B        		.uleb128 0x3b
 1601 00e7 0B        		.uleb128 0xb
 1602 00e8 39        		.uleb128 0x39
 1603 00e9 21        		.uleb128 0x21
 1604 00ea 06        		.sleb128 6
 1605 00eb 3C        		.uleb128 0x3c
 1606 00ec 19        		.uleb128 0x19
 1607 00ed 01        		.uleb128 0x1
 1608 00ee 13        		.uleb128 0x13
 1609 00ef 00        		.byte	0
 1610 00f0 00        		.byte	0
 1611 00f1 12        		.uleb128 0x12
 1612 00f2 2E        		.uleb128 0x2e
 1613 00f3 01        		.byte	0x1
 1614 00f4 3F        		.uleb128 0x3f
 1615 00f5 19        		.uleb128 0x19
 1616 00f6 03        		.uleb128 0x3
 1617 00f7 08        		.uleb128 0x8
 1618 00f8 3A        		.uleb128 0x3a
 1619 00f9 21        		.uleb128 0x21
 1620 00fa 02        		.sleb128 2
 1621 00fb 3B        		.uleb128 0x3b
 1622 00fc 0B        		.uleb128 0xb
 1623 00fd 39        		.uleb128 0x39
 1624 00fe 21        		.uleb128 0x21
 1625 00ff 0C        		.sleb128 12
 1626 0100 27        		.uleb128 0x27
 1627 0101 19        		.uleb128 0x19
 1628 0102 49        		.uleb128 0x49
 1629 0103 13        		.uleb128 0x13
 1630 0104 3C        		.uleb128 0x3c
 1631 0105 19        		.uleb128 0x19
 1632 0106 01        		.uleb128 0x1


 1633 0107 13        		.uleb128 0x13
 1634 0108 00        		.byte	0
 1635 0109 00        		.byte	0
 1636 010a 13        		.uleb128 0x13
 1637 010b 11        		.uleb128 0x11
 1638 010c 01        		.byte	0x1
 1639 010d 25        		.uleb128 0x25
 1640 010e 0E        		.uleb128 0xe
 1641 010f 13        		.uleb128 0x13
 1642 0110 0B        		.uleb128 0xb
 1643 0111 03        		.uleb128 0x3
 1644 0112 0E        		.uleb128 0xe
 1645 0113 1B        		.uleb128 0x1b
 1646 0114 0E        		.uleb128 0xe
 1647 0115 55        		.uleb128 0x55
 1648 0116 17        		.uleb128 0x17
 1649 0117 11        		.uleb128 0x11
 1650 0118 01        		.uleb128 0x1
 1651 0119 10        		.uleb128 0x10
 1652 011a 17        		.uleb128 0x17
 1653 011b 00        		.byte	0
 1654 011c 00        		.byte	0
 1655 011d 14        		.uleb128 0x14
 1656 011e 24        		.uleb128 0x24
 1657 011f 00        		.byte	0
 1658 0120 0B        		.uleb128 0xb
 1659 0121 0B        		.uleb128 0xb
 1660 0122 3E        		.uleb128 0x3e
 1661 0123 0B        		.uleb128 0xb
 1662 0124 03        		.uleb128 0x3
 1663 0125 08        		.uleb128 0x8
 1664 0126 00        		.byte	0
 1665 0127 00        		.byte	0
 1666 0128 15        		.uleb128 0x15
 1667 0129 15        		.uleb128 0x15
 1668 012a 01        		.byte	0x1
 1669 012b 01        		.uleb128 0x1
 1670 012c 13        		.uleb128 0x13
 1671 012d 00        		.byte	0
 1672 012e 00        		.byte	0
 1673 012f 16        		.uleb128 0x16
 1674 0130 0F        		.uleb128 0xf
 1675 0131 00        		.byte	0
 1676 0132 0B        		.uleb128 0xb
 1677 0133 0B        		.uleb128 0xb
 1678 0134 00        		.byte	0
 1679 0135 00        		.byte	0
 1680 0136 17        		.uleb128 0x17
 1681 0137 26        		.uleb128 0x26
 1682 0138 00        		.byte	0
 1683 0139 49        		.uleb128 0x49
 1684 013a 13        		.uleb128 0x13
 1685 013b 00        		.byte	0
 1686 013c 00        		.byte	0
 1687 013d 18        		.uleb128 0x18
 1688 013e 2E        		.uleb128 0x2e
 1689 013f 01        		.byte	0x1


 1690 0140 3F        		.uleb128 0x3f
 1691 0141 19        		.uleb128 0x19
 1692 0142 03        		.uleb128 0x3
 1693 0143 0E        		.uleb128 0xe
 1694 0144 3A        		.uleb128 0x3a
 1695 0145 0B        		.uleb128 0xb
 1696 0146 3B        		.uleb128 0x3b
 1697 0147 0B        		.uleb128 0xb
 1698 0148 39        		.uleb128 0x39
 1699 0149 0B        		.uleb128 0xb
 1700 014a 27        		.uleb128 0x27
 1701 014b 19        		.uleb128 0x19
 1702 014c 3C        		.uleb128 0x3c
 1703 014d 19        		.uleb128 0x19
 1704 014e 01        		.uleb128 0x1
 1705 014f 13        		.uleb128 0x13
 1706 0150 00        		.byte	0
 1707 0151 00        		.byte	0
 1708 0152 19        		.uleb128 0x19
 1709 0153 2E        		.uleb128 0x2e
 1710 0154 01        		.byte	0x1
 1711 0155 3F        		.uleb128 0x3f
 1712 0156 19        		.uleb128 0x19
 1713 0157 03        		.uleb128 0x3
 1714 0158 0E        		.uleb128 0xe
 1715 0159 3A        		.uleb128 0x3a
 1716 015a 0B        		.uleb128 0xb
 1717 015b 3B        		.uleb128 0x3b
 1718 015c 0B        		.uleb128 0xb
 1719 015d 39        		.uleb128 0x39
 1720 015e 0B        		.uleb128 0xb
 1721 015f 27        		.uleb128 0x27
 1722 0160 19        		.uleb128 0x19
 1723 0161 49        		.uleb128 0x49
 1724 0162 13        		.uleb128 0x13
 1725 0163 3C        		.uleb128 0x3c
 1726 0164 19        		.uleb128 0x19
 1727 0165 01        		.uleb128 0x1
 1728 0166 13        		.uleb128 0x13
 1729 0167 00        		.byte	0
 1730 0168 00        		.byte	0
 1731 0169 1A        		.uleb128 0x1a
 1732 016a 2E        		.uleb128 0x2e
 1733 016b 01        		.byte	0x1
 1734 016c 3F        		.uleb128 0x3f
 1735 016d 19        		.uleb128 0x19
 1736 016e 03        		.uleb128 0x3
 1737 016f 0E        		.uleb128 0xe
 1738 0170 3A        		.uleb128 0x3a
 1739 0171 0B        		.uleb128 0xb
 1740 0172 3B        		.uleb128 0x3b
 1741 0173 0B        		.uleb128 0xb
 1742 0174 39        		.uleb128 0x39
 1743 0175 0B        		.uleb128 0xb
 1744 0176 27        		.uleb128 0x27
 1745 0177 19        		.uleb128 0x19
 1746 0178 11        		.uleb128 0x11


 1747 0179 01        		.uleb128 0x1
 1748 017a 12        		.uleb128 0x12
 1749 017b 06        		.uleb128 0x6
 1750 017c 40        		.uleb128 0x40
 1751 017d 18        		.uleb128 0x18
 1752 017e 7A        		.uleb128 0x7a
 1753 017f 19        		.uleb128 0x19
 1754 0180 01        		.uleb128 0x1
 1755 0181 13        		.uleb128 0x13
 1756 0182 00        		.byte	0
 1757 0183 00        		.byte	0
 1758 0184 1B        		.uleb128 0x1b
 1759 0185 48        		.uleb128 0x48
 1760 0186 00        		.byte	0
 1761 0187 7D        		.uleb128 0x7d
 1762 0188 01        		.uleb128 0x1
 1763 0189 8201      		.uleb128 0x82
 1764 018b 19        		.uleb128 0x19
 1765 018c 7F        		.uleb128 0x7f
 1766 018d 13        		.uleb128 0x13
 1767 018e 00        		.byte	0
 1768 018f 00        		.byte	0
 1769 0190 1C        		.uleb128 0x1c
 1770 0191 2E        		.uleb128 0x2e
 1771 0192 01        		.byte	0x1
 1772 0193 3F        		.uleb128 0x3f
 1773 0194 19        		.uleb128 0x19
 1774 0195 03        		.uleb128 0x3
 1775 0196 0E        		.uleb128 0xe
 1776 0197 3A        		.uleb128 0x3a
 1777 0198 0B        		.uleb128 0xb
 1778 0199 3B        		.uleb128 0x3b
 1779 019a 0B        		.uleb128 0xb
 1780 019b 39        		.uleb128 0x39
 1781 019c 0B        		.uleb128 0xb
 1782 019d 20        		.uleb128 0x20
 1783 019e 0B        		.uleb128 0xb
 1784 019f 01        		.uleb128 0x1
 1785 01a0 13        		.uleb128 0x13
 1786 01a1 00        		.byte	0
 1787 01a2 00        		.byte	0
 1788 01a3 1D        		.uleb128 0x1d
 1789 01a4 34        		.uleb128 0x34
 1790 01a5 00        		.byte	0
 1791 01a6 03        		.uleb128 0x3
 1792 01a7 0E        		.uleb128 0xe
 1793 01a8 3A        		.uleb128 0x3a
 1794 01a9 0B        		.uleb128 0xb
 1795 01aa 3B        		.uleb128 0x3b
 1796 01ab 0B        		.uleb128 0xb
 1797 01ac 39        		.uleb128 0x39
 1798 01ad 0B        		.uleb128 0xb
 1799 01ae 49        		.uleb128 0x49
 1800 01af 13        		.uleb128 0x13
 1801 01b0 00        		.byte	0
 1802 01b1 00        		.byte	0
 1803 01b2 1E        		.uleb128 0x1e


 1804 01b3 2E        		.uleb128 0x2e
 1805 01b4 01        		.byte	0x1
 1806 01b5 31        		.uleb128 0x31
 1807 01b6 13        		.uleb128 0x13
 1808 01b7 11        		.uleb128 0x11
 1809 01b8 01        		.uleb128 0x1
 1810 01b9 12        		.uleb128 0x12
 1811 01ba 06        		.uleb128 0x6
 1812 01bb 40        		.uleb128 0x40
 1813 01bc 18        		.uleb128 0x18
 1814 01bd 7A        		.uleb128 0x7a
 1815 01be 19        		.uleb128 0x19
 1816 01bf 01        		.uleb128 0x1
 1817 01c0 13        		.uleb128 0x13
 1818 01c1 00        		.byte	0
 1819 01c2 00        		.byte	0
 1820 01c3 00        		.byte	0
 1821               		.section	.debug_loclists,"",@progbits
 1822 0000 0000 006B 		.long	.Ldebug_loc3-.Ldebug_loc2
 1823               	.Ldebug_loc2:
 1824 0004 0005      		.word	0x5
 1825 0006 04        		.byte	0x4
 1826 0007 00        		.byte	0
 1827 0008 0000 0000 		.long	0
 1828               	.Ldebug_loc0:
 1829               	.LVUS8:
 1830 000c 00        		.uleb128 .LVU124
 1831 000d 00        		.uleb128 .LVU132
 1832 000e 00        		.uleb128 .LVU146
 1833 000f 00        		.uleb128 0
 1834               	.LLST8:
 1835 0010 06        		.byte	0x6
 1836 0011 0000 0000 		.long	.LVL57
 1837 0015 04        		.byte	0x4
 1838 0016 00        		.uleb128 .LVL57-.LVL57
 1839 0017 34        		.uleb128 .LVL61-.LVL57
 1840 0018 01        		.uleb128 0x1
 1841 0019 54        		.byte	0x54
 1842 001a 04        		.byte	0x4
 1843 001b 9001      		.uleb128 .LVL68-.LVL57
 1844 001d A401      		.uleb128 .LFE7-.LVL57
 1845 001f 01        		.uleb128 0x1
 1846 0020 54        		.byte	0x54
 1847 0021 00        		.byte	0
 1848               	.LVUS6:
 1849 0022 00        		.uleb128 .LVU90
 1850 0023 00        		.uleb128 .LVU98
 1851 0024 00        		.uleb128 .LVU112
 1852 0025 00        		.uleb128 0
 1853               	.LLST6:
 1854 0026 06        		.byte	0x6
 1855 0027 0000 0000 		.long	.LVL41
 1856 002b 04        		.byte	0x4
 1857 002c 00        		.uleb128 .LVL41-.LVL41
 1858 002d 34        		.uleb128 .LVL45-.LVL41
 1859 002e 01        		.uleb128 0x1
 1860 002f 54        		.byte	0x54


 1861 0030 04        		.byte	0x4
 1862 0031 9001      		.uleb128 .LVL52-.LVL41
 1863 0033 A401      		.uleb128 .LFE6-.LVL41
 1864 0035 01        		.uleb128 0x1
 1865 0036 54        		.byte	0x54
 1866 0037 00        		.byte	0
 1867               	.LVUS4:
 1868 0038 00        		.uleb128 .LVU56
 1869 0039 00        		.uleb128 .LVU64
 1870 003a 00        		.uleb128 .LVU78
 1871 003b 00        		.uleb128 0
 1872               	.LLST4:
 1873 003c 06        		.byte	0x6
 1874 003d 0000 0000 		.long	.LVL25
 1875 0041 04        		.byte	0x4
 1876 0042 00        		.uleb128 .LVL25-.LVL25
 1877 0043 34        		.uleb128 .LVL29-.LVL25
 1878 0044 01        		.uleb128 0x1
 1879 0045 54        		.byte	0x54
 1880 0046 04        		.byte	0x4
 1881 0047 8C01      		.uleb128 .LVL36-.LVL25
 1882 0049 A001      		.uleb128 .LFE5-.LVL25
 1883 004b 01        		.uleb128 0x1
 1884 004c 54        		.byte	0x54
 1885 004d 00        		.byte	0
 1886               	.LVUS2:
 1887 004e 00        		.uleb128 .LVU22
 1888 004f 00        		.uleb128 .LVU30
 1889 0050 00        		.uleb128 .LVU44
 1890 0051 00        		.uleb128 0
 1891               	.LLST2:
 1892 0052 06        		.byte	0x6
 1893 0053 0000 0000 		.long	.LVL9
 1894 0057 04        		.byte	0x4
 1895 0058 00        		.uleb128 .LVL9-.LVL9
 1896 0059 34        		.uleb128 .LVL13-.LVL9
 1897 005a 01        		.uleb128 0x1
 1898 005b 54        		.byte	0x54
 1899 005c 04        		.byte	0x4
 1900 005d 8C01      		.uleb128 .LVL20-.LVL9
 1901 005f A001      		.uleb128 .LFE4-.LVL9
 1902 0061 01        		.uleb128 0x1
 1903 0062 54        		.byte	0x54
 1904 0063 00        		.byte	0
 1905               	.LVUS0:
 1906 0064 00        		.uleb128 .LVU3
 1907 0065 00        		.uleb128 .LVU12
 1908               	.LLST0:
 1909 0066 08        		.byte	0x8
 1910 0067 0000 0000 		.long	.LVL0
 1911 006b 48        		.uleb128 .LVL5-.LVL0
 1912 006c 01        		.uleb128 0x1
 1913 006d 52        		.byte	0x52
 1914 006e 00        		.byte	0
 1915               	.Ldebug_loc3:
 1916               		.section	.debug_aranges,"",@progbits
 1917 0000 0000 0024 		.long	0x24


 1918 0004 0002      		.word	0x2
 1919 0006 0000 0000 		.long	.Ldebug_info0
 1920 000a 04        		.byte	0x4
 1921 000b 00        		.byte	0
 1922 000c 0000      		.word	0
 1923 000e 0000      		.word	0
 1924 0010 0000 0000 		.long	.Ltext0
 1925 0014 0000 0400 		.long	.Letext0-.Ltext0
 1926 0018 0000 0000 		.long	.LFB8
 1927 001c 0000 0040 		.long	.LFE8-.LFB8
 1928 0020 0000 0000 		.long	0
 1929 0024 0000 0000 		.long	0
 1930               		.section	.debug_rnglists,"",@progbits
 1931               	.Ldebug_ranges0:
 1932 0000 0000 004E 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 1933               	.Ldebug_ranges2:
 1934 0004 0005      		.word	0x5
 1935 0006 04        		.byte	0x4
 1936 0007 00        		.byte	0
 1937 0008 0000 0000 		.long	0
 1938               	.LLRL1:
 1939 000c 05        		.byte	0x5
 1940 000d 0000 0000 		.long	.LBB4
 1941 0011 04        		.byte	0x4
 1942 0012 00        		.uleb128 .LBB4-.LBB4
 1943 0013 3A        		.uleb128 .LBE4-.LBB4
 1944 0014 04        		.byte	0x4
 1945 0015 8C01      		.uleb128 .LBB7-.LBB4
 1946 0017 A601      		.uleb128 .LBE7-.LBB4
 1947 0019 00        		.byte	0
 1948               	.LLRL3:
 1949 001a 05        		.byte	0x5
 1950 001b 0000 0000 		.long	.LBB10
 1951 001f 04        		.byte	0x4
 1952 0020 00        		.uleb128 .LBB10-.LBB10
 1953 0021 3A        		.uleb128 .LBE10-.LBB10
 1954 0022 04        		.byte	0x4
 1955 0023 8C01      		.uleb128 .LBB13-.LBB10
 1956 0025 A601      		.uleb128 .LBE13-.LBB10
 1957 0027 00        		.byte	0
 1958               	.LLRL5:
 1959 0028 05        		.byte	0x5
 1960 0029 0000 0000 		.long	.LBB16
 1961 002d 04        		.byte	0x4
 1962 002e 00        		.uleb128 .LBB16-.LBB16
 1963 002f 3A        		.uleb128 .LBE16-.LBB16
 1964 0030 04        		.byte	0x4
 1965 0031 9001      		.uleb128 .LBB19-.LBB16
 1966 0033 AA01      		.uleb128 .LBE19-.LBB16
 1967 0035 00        		.byte	0
 1968               	.LLRL7:
 1969 0036 05        		.byte	0x5
 1970 0037 0000 0000 		.long	.LBB22
 1971 003b 04        		.byte	0x4
 1972 003c 00        		.uleb128 .LBB22-.LBB22
 1973 003d 3A        		.uleb128 .LBE22-.LBB22
 1974 003e 04        		.byte	0x4


 1975 003f 9001      		.uleb128 .LBB25-.LBB22
 1976 0041 AA01      		.uleb128 .LBE25-.LBB22
 1977 0043 00        		.byte	0
 1978               	.LLRL9:
 1979 0044 07        		.byte	0x7
 1980 0045 0000 0000 		.long	.Ltext0
 1981 0049 8008      		.uleb128 .Letext0-.Ltext0
 1982 004b 07        		.byte	0x7
 1983 004c 0000 0000 		.long	.LFB8
 1984 0050 40        		.uleb128 .LFE8-.LFB8
 1985 0051 00        		.byte	0
 1986               	.Ldebug_ranges3:
 1987               		.section	.debug_line,"",@progbits
 1988               	.Ldebug_line0:
 1989 0000 0000 026F 		.section	.debug_str,"MS",@progbits,1
 1989      0003 0000 
 1989      005E 0201 
 1989      FB0E 0D00 
 1989      0101 0101 
 1990               	.LASF8:
 1991 0000 6E65 7874 		.string	"next"
 1991      00
 1992               	.LASF39:
 1993 0005 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/2_multitask-curnel_compiled"
 1993      652F 7374 
 1993      7564 656E 
 1993      7473 2F35 
 1993      3233 3335 
 1994               	.LASF0:
 1995 0048 636F 756E 		.string	"count"
 1995      7400 
 1996               	.LASF18:
 1997 004e 7368 6F72 		.string	"short unsigned int"
 1997      7420 756E 
 1997      7369 676E 
 1997      6564 2069 
 1997      6E74 00
 1998               	.LASF9:
 1999 0061 5443 425F 		.string	"TCB_TYPE"
 1999      5459 5045 
 1999      00
 2000               	.LASF34:
 2001 006a 5F5F 6275 		.string	"__builtin_putchar"
 2001      696C 7469 
 2001      6E5F 7075 
 2001      7463 6861 
 2001      7200 
 2002               	.LASF7:
 2003 007c 7374 6174 		.string	"status"
 2003      7573 00
 2004               	.LASF12:
 2005 0083 7365 6D61 		.string	"semaphore"
 2005      7068 6F72 
 2005      6500 
 2006               	.LASF36:
 2007 008d 5F5F 6275 		.string	"__builtin_puts"
 2007      696C 7469 


 2007      6E5F 7075 
 2007      7473 00
 2008               	.LASF40:
 2009 009c 7365 745F 		.string	"set_task"
 2009      7461 736B 
 2009      00
 2010               	.LASF16:
 2011 00a5 756E 7369 		.string	"unsigned char"
 2011      676E 6564 
 2011      2063 6861 
 2011      7200 
 2012               	.LASF3:
 2013 00b3 5345 4D41 		.string	"SEMAPHORE_TYPE"
 2013      5048 4F52 
 2013      455F 5459 
 2013      5045 00
 2014               	.LASF1:
 2015 00c2 7461 736B 		.string	"task_list"
 2015      5F6C 6973 
 2015      7400 
 2016               	.LASF14:
 2017 00cc 7265 6164 		.string	"ready"
 2017      7900 
 2018               	.LASF42:
 2019 00d2 7465 6D70 		.string	"temp"
 2019      00
 2020               	.LASF28:
 2021 00d7 7461 736B 		.string	"task3"
 2021      3300 
 2022               	.LASF38:
 2023 00dd 7465 7374 		.string	"test2.c"
 2023      322E 6300 
 2024               	.LASF4:
 2025 00e5 7461 736B 		.string	"task_addr"
 2025      5F61 6464 
 2025      7200 
 2026               	.LASF32:
 2027 00ef 7075 7463 		.string	"putchar"
 2027      6861 7200 
 2028               	.LASF6:
 2029 00f7 7072 696F 		.string	"priority"
 2029      7269 7479 
 2029      00
 2030               	.LASF10:
 2031 0100 6C6F 6E67 		.string	"long unsigned int"
 2031      2075 6E73 
 2031      6967 6E65 
 2031      6420 696E 
 2031      7400 
 2032               	.LASF5:
 2033 0112 7374 6163 		.string	"stack_ptr"
 2033      6B5F 7074 
 2033      7200 
 2034               	.LASF37:
 2035 011c 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 2035      4331 3720 
 2035      3131 2E34 


 2035      2E30 202D 
 2035      6D63 7075 
 2036               	.LASF41:
 2037 0160 6D61 696E 		.string	"main"
 2037      00
 2038               	.LASF23:
 2039 0165 756E 7369 		.string	"unsigned int"
 2039      676E 6564 
 2039      2069 6E74 
 2039      00
 2040               	.LASF21:
 2041 0172 6C6F 6E67 		.string	"long long unsigned int"
 2041      206C 6F6E 
 2041      6720 756E 
 2041      7369 676E 
 2041      6564 2069 
 2042               	.LASF2:
 2043 0189 5441 534B 		.string	"TASK_ID_TYPE"
 2043      5F49 445F 
 2043      5459 5045 
 2043      00
 2044               	.LASF25:
 2045 0196 696E 6974 		.string	"init_kernel"
 2045      5F6B 6572 
 2045      6E65 6C00 
 2046               	.LASF33:
 2047 01a2 5F5F 6275 		.string	"__builtin_printf"
 2047      696C 7469 
 2047      6E5F 7072 
 2047      696E 7466 
 2047      00
 2048               	.LASF22:
 2049 01b3 6C6F 6E67 		.string	"long double"
 2049      2064 6F75 
 2049      626C 6500 
 2050               	.LASF30:
 2051 01bf 7461 736B 		.string	"task1"
 2051      3100 
 2052               	.LASF29:
 2053 01c5 7461 736B 		.string	"task2"
 2053      3200 
 2054               	.LASF20:
 2055 01cb 6C6F 6E67 		.string	"long long int"
 2055      206C 6F6E 
 2055      6720 696E 
 2055      7400 
 2056               	.LASF27:
 2057 01d9 7461 736B 		.string	"task4"
 2057      3400 
 2058               	.LASF26:
 2059 01df 7072 696E 		.string	"printf"
 2059      7466 00
 2060               	.LASF17:
 2061 01e6 7368 6F72 		.string	"short int"
 2061      7420 696E 
 2061      7400 
 2062               	.LASF24:


 2063 01f0 6265 6769 		.string	"begin_sch"
 2063      6E5F 7363 
 2063      6800 
 2064               	.LASF31:
 2065 01fa 6469 7370 		.string	"display_ready_queue"
 2065      6C61 795F 
 2065      7265 6164 
 2065      795F 7175 
 2065      6575 6500 
 2066               	.LASF19:
 2067 020e 6C6F 6E67 		.string	"long int"
 2067      2069 6E74 
 2067      00
 2068               	.LASF11:
 2069 0217 6368 6172 		.string	"char"
 2069      00
 2070               	.LASF35:
 2071 021c 7075 7473 		.string	"puts"
 2071      00
 2072               	.LASF15:
 2073 0221 7369 676E 		.string	"signed char"
 2073      6564 2063 
 2073      6861 7200 
 2074               	.LASF13:
 2075 022d 7461 736B 		.string	"task_tab"
 2075      5F74 6162 
 2075      00
 2076               		.ident	"GCC: (GNU) 11.4.0"


