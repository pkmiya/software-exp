

   1               	        .data
   2               	        .align 2
   3               	environ:
   4 0000 0000 0000 	        .long 0
   5               	 	.align	2
   6               	
   7               	.extern main
   8               	.extern exit
   9               	.extern monitor_begin
  10               	.extern hardware_init_hook
  11               	.extern software_init_hook
  12               	.extern atexit
  13               	.extern __do_global_dtors
  14               	.extern __bss_start
  15               	.extern _end
  16               	
  17               	.global start
  18               	
  19               	.text
  20               	.even
  21               		/* See if user supplied their own stack (__stack != 0).  If not, then
  22               		 * default to using the value of %sp as set by the ROM monitor.
  23               		 */
  24 0000 207C 0000 		movel	#__stack, %a0
  24      0000 
  25 0006 B1FC 0000 		cmpl	#0, %a0
  25      0000 
  26 000c 6702      		jbeq    1f
  27 000e 2E48      		movel	%a0, %sp
  28               	1:
  29               		/* set up initial stack frame */
  30 0010 4E56 FFF8 		link	%a6, #-8
  31               	
  32               		/* zero out the bss section */
  33 0014 223C 0000 		movel	#__bss_start, %d1
  33      0000 
  34 001a 203C 0000 		movel	#_end, %d0
  34      0000 
  35 0020 B280      		cmpl	%d0, %d1
  36 0022 6712      		jbeq	3f
  37 0024 2041      		movl	%d1, %a0
  38 0026 9081      		subl	%d1, %d0
  39 0028 5380      		subql	#1, %d0
  40               	2:
  41 002a 4218      		clrb	(%a0)+
  42 002c 51C8 FFFC 		dbra	%d0, 2b
  43 0030 4240      		clrw	%d0
  44 0032 5380      		subql	#1, %d0
  45 0034 64F4      		jbcc	2b
  46               	3:
  47               		/* jmp monitor initialize after making up  bss */
  48 0036 4EF9 0000 		jmp	monitor_begin
  48      0000 
  49               	start:
  50               		/* monitor returns here.
  51               		 * re-setup stack for C programs.
  52               	         * See if user supplied their own stack (__stack != 0).  If not, then


  53               		 * default to using the value of %sp as set by the ROM monitor.
  54               		 */
  55 003c 207C 0000 		movel	#__stack, %a0
  55      0000 
  56 0042 B1FC 0000 		cmpl	#0, %a0
  56      0000 
  57 0048 6702      		jbeq    skip
  58 004a 2E48      		movel	%a0, %sp
  59               	skip:
  60               		/* set up initial stack frame */
  61 004c 4E56 FFF8 		link	%a6, #-8
  62               	
  63               		/*
  64               		 * initialize target specific stuff. Only execute these
  65               		 * functions it they exist.
  66               		 */
  67 0050 41F9 0000 		lea	hardware_init_hook, %a0
  67      0000 
  68 0056 B1FC 0000 		cmpl	#0, %a0
  68      0000 
  69 005c 6702      		jbeq	4f
  70 005e 4E90      		jsr     (%a0)
  71               	4:
  72 0060 41F9 0000 		lea	software_init_hook, %a0
  72      0000 
  73 0066 B1FC 0000 		cmpl	#0, %a0
  73      0000 
  74 006c 6702      		jbeq	5f
  75 006e 4E90      		jsr     (%a0)
  76               	5:
  77               	
  78               		/*
  79               		 * call the main routine from the application to get it going.
  80               		 * main (argc, argv, environ)
  81               		 * we pass argv as a pointer to NULL.
  82               		 */
  83               	
  84               		/* put __do_global_dtors in the atexit list so 
  85               		 * the destructors get run */
  86               	/* 
  87               		movel	#__do_global_dtors,(%sp)
  88               		jsr	atexit
  89               		movel	#__FINI_SECTION__,(%sp)
  90               		jsr	atexit
  91               		jsr	__INIT_SECTION__
  92               	*/
  93               		
  94               		** setup argv, argc and jump into main
  95 0070 4878 0000 	        pea     0
  96 0074 4879 0000 	        pea     environ
  96      0000 
  97 007a 486F 0004 	        pea     %sp@(4)
  98 007e 4878 0000 	        pea     0
  99 0082 4EB9 0000 		jsr	main
  99      0000 
 100 0088 2F00      		movel	%d0, %sp@-
 101               	


 102 008a 4EB9 0000 	        jsr     exit
 102      0000 
 103               	.even




   1               	** EECS-Exp II/III software-exp-I
   2               	** v1.0 / 2023-11-15
   3               	** Group 4
   4               	** 1TE21022R Seo Ichika, 	1TE21143S Miyata Yusaku, 	1TE21940P Saitoh Koshi
   5               	** 1TE21913T Takeishi Kota,	1TE21033K Goto Aoto,		1TE21057R Morokuma Haruto
   6               	
   7               	** INDEX
   8               	** STEP 1: 初期化ルーチン
   9               	** STEP 4-2: INTERUT INTERFACE
  10               	** STEP 6-3: INTERGET INTERFACE
  11               	** STEP 0-1: キューの初期化ルーチン(1/2)
  12               	** STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチン 
  13               	** STEP 4-1: INTERPUT
  14               	** STEP 5-1: PUTSTRING
  15               	** STEP 6-1: GETSTRING
  16               	** STEP 6-2: INTERGET
  17               	** STEP 7: タイマ制御部
  18               	** STEP 8: システムコールインタフェース
  19               	** STEP 0-1: キューの初期化ルーチン(2/2)
  20               	
  21               	/* STEP 1: 初期化ルーチンの作成 */
  22               	***************************************************************
  23               	**各種レジスタ定義
  24               	***************************************************************
  25               	***************
  26               	**レジスタ群の先頭
  27               	***************
  28               	.equ REGBASE,   0xFFF000          | DMAPを使用．
  29               	.equ IOBASE,    0x00d00000
  30               	***************
  31               	**割り込み関係のレジスタ
  32               	***************
  33               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  34               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  35               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  36               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  37               	***************
  38               	**タイマ関係のレジスタ
  39               	***************
  40               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  41               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  42               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  43               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  44               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  45               	***************
  46               	** UART1（送受信）関係のレジスタ
  47               	***************
  48               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  49               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  50               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  51               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  52               	***************
  53               	** LED
  54               	***************
  55               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  56               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  57               	.equ LED5,      IOBASE+0x000002b


  58               	.equ LED4,      IOBASE+0x0000029
  59               	.equ LED3,      IOBASE+0x000003f
  60               	.equ LED2,      IOBASE+0x000003d
  61               	.equ LED1,      IOBASE+0x000003b
  62               	.equ LED0,      IOBASE+0x0000039
  63               	
  64               	
  65               	***************
  66               	**システムコール番号
  67               	***************
  68               	.equ SYSCALL_NUM_GETSTRING,     1
  69               	.equ SYSCALL_NUM_PUTSTRING,     2
  70               	.equ SYSCALL_NUM_RESET_TIMER,   3
  71               	.equ SYSCALL_NUM_SET_TIMER,     4
  72               	
  73               	
  74               	***************************************************************
  75               	**スタック領域の確保
  76               	***************************************************************
  77               	.section .bss
  78               	.even
  79               	SYS_STK:
  80 0000 0000 0000 		.ds.b   0x4000  |システムスタック領域
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  80      0000 0000 
  81               		.even
  82               	SYS_STK_TOP:        |システムスタック領域の最後尾
  83               	task_p:
  84 4000 0000 0000 		.ds.l 1         |タイマ用
  85               	
  86               	***************************************************************
  87               	**初期化**内部デバイスレジスタには特定の値が設定されている．
  88               	**その理由を知るには，付録Bにある各レジスタの仕様を参照すること．
  89               	***************************************************************
  90               	.section .text
  91               	.even
  92               	.extern start
  93               	.global monitor_begin
  94               	monitor_begin:
  95               	boot:
  96               		*スーパーバイザ&各種設定を行っている最中の割込禁止
  97 0000 46FC 2700 		move.w #0x2700,%SR
  98 0004 4FF9 0000 		lea.l  SYS_STK_TOP, %SP | Set SSP
  98      0000 
  99               	
 100               	
 101               		****************
 102               		**割り込みコントローラの初期化
 103               		****************
 104 000a 13FC 0040 		move.b #0x40, IVR       |ユーザ割り込みベクタ番号を
 104      00FF F300 
 105               					| 0x40+levelに設定.
 106 0012 23FC 00FF 		move.l #0x00ffffff, IMR  |全割り込みマスク|**割り込みを許可
 106      FFFF 00FF 
 106      F304 


 107               	
 108               		****************
 109               		**送受信(UART1)関係の初期化(割り込みレベルは4に固定されている)
 110               		****************
 111 001c 33FC 0000 		move.w #0x0000, USTCNT1 |リセット
 111      00FF F900 
 112 0024 33FC E10C 		move.w #0xE10C, USTCNT1 |送受信可能,パリティなし, 1 stop, 8 bit,
 112      00FF F900 
 113               					|送受信割り込み禁止
 114 002c 33FC 0038 		move.w #0x0038, UBAUD1  | baud rate = 230400 bps
 114      00FF F902 
 115               	
 116               		****************
 117               		**タイマ関係の初期化(割り込みレベルは6に固定されている)
 118               		*****************
 119 0034 33FC 0004 		move.w #0x0004, TCTL1   | restart,割り込み不可,|システムクロックの1/16を単位と
 119      00FF F600 
 120               		|タイマ使用停止
 121               	
 122               	    *****************
 123               	    ** キューの初期化
 124               	    *****************
 125 003c 4EBA 00E6 		jsr INIT_Q
 126               	
 127               		****************
 128               		**割り込み処理ルーチンの初期化
 129               		****************
 130 0040 21FC 0000 		move.l #INTERFACE, 0x110			/* level 4, (64+4)*4 */ 
 130      0000 0110 
 131 0048 21FC 0000 		move.l #timer_interface, 0x118		/* level 6, (64+6)*4 */
 131      0000 0118 
 132 0050 21FC 0000 		move.l #SYSCALL_INTERFACE, 0x080	/* trap #0 割り込みベクタ設定 */
 132      0000 0080 
 133 0058 23FC 00FF 		move.l #0x00ff3ff9, IMR				/* 割り込み許可*/
 133      3FF9 00FF 
 133      F304 
 134 0062 46FC 2000 		move.w #0x2000,%SR					/* 走行レベルを0にする */
 135               	
 136 0066 4EF9 0000 		jmp start
 136      0000 
 137 006c 6000 0002 		bra MAIN
 138               	
 139               		
 140               	****************************************************************
 141               	***プログラム領域
 142               	****************************************************************
 143               	.section .text
 144               	.even
 145               	MAIN:
 146               		**走行モードとレベルの設定(「ユーザモード」への移行処理)
 147 0070 46FC 0000 		move.w #0x0000, %SR  | USER MODE, LEVEL 0
 148 0074 4FF9 0000 		lea.l USR_STK_TOP,%SP  | user stackの設定
 148      0000 
 149               		**システムコールによるRESET_TIMERの起動
 150 007a 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 151 007c 4E40      		trap   #0
 152               		**システムコールによるSET_TIMERの起動


 153 007e 7004      		move.l #SYSCALL_NUM_SET_TIMER, %D0
 154 0080 323C C350 		move.w #50000, %D1
 155 0084 243C 0000 		move.l #TT,    %D2
 155      0000 
 156 008a 4E40      		trap #0
 157               		
 158               	******************************
 159               	* sys_GETSTRING, sys_PUTSTRINGのテスト
 160               	*ターミナルの入力をエコーバックする
 161               	******************************
 162               	LOOP:
 163 008c 7001      		move.l #SYSCALL_NUM_GETSTRING, %D0
 164 008e 7200      		move.l #0,   %D1        | ch    = 0
 165 0090 243C 0000 		move.l #BUF, %D2        | p    = #BUF
 165      0000 
 166 0096 263C 0000 		move.l #256, %D3        | size = 256
 166      0100 
 167 009c 4E40      		trap #0
 168 009e 2600      		move.l %D0, %D3         | size = %D0 (length of given string)
 169 00a0 7002      		move.l #SYSCALL_NUM_PUTSTRING, %D0
 170 00a2 7200      		move.l #0,  %D1         | ch = 0
 171 00a4 243C 0000 		move.l #BUF,%D2         | p  = #BUF
 171      0000 
 172 00aa 4E40      		trap #0
 173 00ac 6000 FFDE 		bra LOOP
 174               	
 175               	******************************
 176               	*タイマのテスト
 177               	* ’******’を表示し改行する．
 178               	*５回実行すると，RESET_TIMERをする．
 179               	******************************
 180               	TT:
 181 00b0 48E7 FFFE 		movem.l %D0-%D7/%A0-%A6,-(%SP)
 182 00b4 0C79 0005 		cmpi.w #5,TTC            | TTCカウンタで5回実行したかどうか数える
 182      0000 0000 
 183 00bc 6700 001C 		beq TTKILL               | 5回実行したら，タイマを止める
 184 00c0 7002      		move.l #SYSCALL_NUM_PUTSTRING,%D0
 185 00c2 7200      		move.l #0,    %D1        | ch = 0
 186 00c4 243C 0000 		move.l #TMSG, %D2        | p  = #TMSG
 186      0000 
 187 00ca 7608      		move.l #8,    %D3        | size = 8
 188 00cc 4E40      		trap #0
 189 00ce 0679 0001 		addi.w #1,TTC            | TTCカウンタを1つ増やして
 189      0000 0000 
 190 00d6 6000 0006 		bra TTEND                |そのまま戻る
 191               	TTKILL:
 192 00da 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%D0
 193 00dc 4E40      		trap #0
 194               	TTEND:
 195 00de 4CDF 7FFF 		movem.l (%SP)+,%D0-%D7/%A0-%A6
 196 00e2 4E75      		rts
 197               	
 198               	
 199               	****************************************************************
 200               	***初期値のあるデータ領域
 201               	****************************************************************
 202               	.section .data


 203               	TMSG:
 204 0000 2A2A 2A2A 		.ascii  "******\r\n"      | \r:行頭へ(キャリッジリターン)
 204      2A2A 0D0A 
 205               		.even                     | \n:次の行へ(ラインフィード)
 206               	TTC:
 207 0008 0000      		.dc.w  0
 208               		.even
 209               	
 210               	****************************************************************
 211               	***初期値の無いデータ領域
 212               	****************************************************************
 213               	.section .bss
 214               	BUF:
 215 4004 0000 0000 		.ds.b 256           | BUF[256]
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 215      0000 0000 
 216               		.even
 217               	USR_STK:
 218 4104 0000 0000 		.ds.b 0x4000        |ユーザスタック領域
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 218      0000 0000 
 219               		.even
 220               	USR_STK_TOP:            |ユーザスタック領域の最後尾
 221               	
 222               	
 223               	.section .text
 224               	.even
 225               	
 226               	/* STEP 4-2: INTERUT INTERFACE, STEP 6-3: INTERGET INTERFACE */
 227               	** ここから送受信割り込みインタフェース
 228               	** 担当：齊藤
 229               	
 230               	********************************
 231               	**送受信割り込みインターフェース
 232               	********************************　
 233               	
 234               	***************************************************************************************************
 235               	**【手順説明】
 236               	** 受信レジスタ URX1 を %D3.W にコピー
 237               	** %D3.W の下位 8bit(データ部分) を %D2.B にコピー
 238               	** 今起こっている割り込みが，受信割り込みであるかを，%D3.W の 第 13 ビ
 239               	** 受信割り込みであった場合，チャンネル ch = %D1.L =0, データ data = %D2.B と
 240               	** 今起こっている 割り込みが，送信割り込みであるかを，送信レジスタ U
 241               	** 送信割り込みであった場合，ch=%D1.L=0 として INTERPUT を呼び出す
 242               	***************************************************************************************************
 243               	
 244               	***************************************************************************************************
 245               	**【受信＆送信レジスタの説明】
 246               	** UTX1 15bit 0:送信FIFOが空でない（INTERPUTで送信キューからOUTQ） 1:送信FIFOが
 247               	** URX1 13bit 0:受信FIFOが空              				 1:受信FIFOにデータがある（INTERGETで
 248               	***************************************************************************************************
 249               	
 250               	INTERFACE:


 251 00e4 48E7 7080 		movem.l %d1-%d3/%a0, -(%sp)
 252               	INTERGET_INTERFACE:
 253 00e8 3639 00FF 		move.w  URX1, %d3	|URX1をd3にコピー
 253      F904 
 254 00ee 1403      		move.b  %d3, %d2    |d3の下位8bitをコピー 　data = %d2.b
 255 00f0 0243 2000 		andi.w  #0x2000,%d3	|13ビット目をチェック（bit13=1なら%d3が0x2000となる）
 256 00f4 0C43 2000 		cmpi.w  #0x2000,%d3	|%d3が0x2000であるかチェック
 257 00f8 6600 000C 		bne     INTERPUT_INTERFACE |13ビット目が１だったら受信割込
 258 00fc 7200      		move.l  #0, %d1 	|受信割り込みだったので、ch=%d1.l=0としてINTERGETを呼び出す
 259 00fe 4EBA 0228 		jsr     INTERGET        
 260 0102 6000 001A 		bra	INTERFACE_FINISH
 261               	INTERPUT_INTERFACE:
 262 0106 3639 00FF 		move.w  UTX1, %d3
 262      F906 
 263 010c 0243 8000 		andi.w  #0x8000, %d3
 264 0110 0C43 0000 		cmpi.w  #0x0000, %d3 
 265 0114 6700 0008 		beq    INTERFACE_FINISH |UTX1 15bit = 0（送信FIFOが空でない）INTERPUT_FINISHへ
 266 0118 7200      		move.l #0, %d1        	|送信割り込みだったので、ch=%d1.l=0としてINTERPUTを呼び
 267 011a 4EBA 0126 		jsr    INTERPUT 
 268               	INTERFACE_FINISH:
 269 011e 4CDF 010E 		movem.l (%sp)+, %d1-%d3/%a0
 270 0122 4E73      		rte
 271               		
 272               	
 273               	/* STEP 0-1: キューの初期化ルーチン */
 274               	** (2) 送信キュー・受信キューの両方について，キューのデータ用および
 275               	INIT_Q:	
 276 0124 48E7 00C0 		movem.l %a0-%a1 ,-(%sp)
 277               	
 278               	/* キュー0の初期化 */
 279 0128 207C 0000 		movea.l	#Que0, %a0		/*構造体Que0の先頭アドレス*/
 279      0000 
 280 012e 227C 0000 		move.l  #top, %a1	
 280      000A 
 281 0134 D3C8      		add.l	%a0, %a1 		/*a1でキュー０の先頭番地を指定*/
 282 0136 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 283 013a 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 284 013e 117C 0000 		move.b	#0, s(%a0) 		/*カウンタの初期化*/
 284      0008 
 285               	
 286               	    /* キュー1の初期化 */
 287 0144 207C 0000 		movea.l #Que1, %a0 		/*構造体Que１の先頭アドレス*/
 287      0000 
 288 014a 227C 0000 		move.l  #top, %a1
 288      000A 
 289 0150 D3C8      		add.l   %a0, %a1 		/*a1でキュー1の先頭番地を指定*/
 290 0152 2149 0000 		move.l  %a1, out(%a0) 	/*enqueポインタ初期化*/
 291 0156 2149 0004 		move.l  %a1, in(%a0) 	/*dequeポインタ初期化*/
 292 015a 117C 0000 		move.b  #0, s(%a0) 		/*カウンタの初期化*/	
 292      0008 
 293               	
 294 0160 4CDF 0300 		movem.l (%sp)+, %a0-%a1
 295 0164 4E75      		rts
 296               	
 297               	
 298               	/* STEP 0-2: キューへの入力(INQ), 出力(OUTQ) ルーチンの作成 */
 299               	** INQ(no, data)


 300               	** argument:    (1) cue number no = %d0
 301               	**              (2) 8-bit data to write = %d1
 302               	** return:      result flag = %d0 (0: failure, 1: success)
 303               	
 304               	/* (1) */
 305               	INQ:						/* キューへの入力 */
 306 0166 40E7      		move.w	%sr, -(%sp)		/* (1) 現走行レベルの退避 */
 307 0168 46FC 2700 		move.w	#0x2700, %sr	/* (2) 割り込み禁止 */
 308 016c 48E7 00F0 		movem.l	%a0-%a3, -(%sp)	/* レジスタの退避 */
 309 0170 207C 0000 		movea.l	#Que0, %a0		/* キュー0参照用アドレス */
 309      0000 
 310 0176 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 310      0000 
 311 017c 6700 0008 		beq	INQ_CHECK       	/*キュー1を使用*/
 312 0180 207C 0000 		movea.l	#Que1, %a0		/* キュー1参照用アドレス */
 312      0000 
 313               	/* (3) */
 314               	INQ_CHECK:
 315 0186 0C68 0100 		cmpi.w	#256 ,s(%a0)	/* s == 256 ?：キュー内のデータの個数を確認 */
 315      0008 
 316 018c 6600 0008 		bne	INQ_START			/* true:  キューが一杯でなければ書き込み可能 */
 317 0190 7000      		moveq.l	#0, %d0			/* false: (3-1) %D0 を0（失敗：queue full）に設定：書き込み失敗 
 318 0192 6000 0038 		bra	INQ_END             /* false: (3-2) (7)へ */
 319               	/* (4), (5-2) */
 320               	INQ_START:
 321               	/* (4) m[in] = data */
 322 0196 2268 0004 		movea.l	in(%a0), %a1	/* 書き込み先アドレスを格納 */
 323 019a 1281      		move.b	%d1, (%a1)		/* 書き込み処理 */
 324 019c 2448      		movea.l	%a0, %a2
 325 019e D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 325      010A 
 326               	
 327               	    /* (5) if (in == bottom) */
 328 01a4 B5E8 0004 		cmpa.l	in(%a0), %a2	/* 書き込んだ位置がキューの末尾か確認 */
 329 01a8 6700 000E 		beq	INQ_TOP
 330               	
 331               		/* (5-2) else in++  */
 332 01ac 06A8 0000 		addi.l	#1, in(%a0)		/* 書き込み位置のアドレスを1加算 */
 332      0001 0004 
 333 01b4 6000 000E 		bra	INQ_SUCCESS
 334               	
 335               	/* (5-1) */
 336               	INQ_TOP:
 337               	/*  (5-1) in=top */
 338 01b8 267C 0000 		move.l	#top, %a3
 338      000A 
 339 01be D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 340 01c0 214B 0004 		move.l	%a3, in(%a0)	/* 書き込み位置をキューの先頭に移動 */
 341               	/* (6) */
 342               	INQ_SUCCESS:
 343               	/* s++, %D0 を1（成功）に設定 */
 344 01c4 0668 0001 		addi.w	#1, s(%a0)		/* 個数を1加算 */
 344      0008 
 345 01ca 7001      		moveq.l	#1, %d0			/* 書き込み成功 */
 346               	
 347               	/* (7) */
 348               	INQ_END:	


 349 01cc 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 350 01d0 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 351 01d2 4E75      		rts
 352               	
 353               	**************************************************
 354               	***a0:選択された構造体の先頭アドレス（変更不可）
 355               	***a1:構造体の先頭アドレスのコピー（変更可
 356               	***************************************************
 357               	
 358               	** OUTQ(no, data)
 359               	** argument:    cue number no = %d0
 360               	** return:      (1) result flag = %d0 (0: failure, 1: success)
 361               	**              (2) 8-bit data to read = %d1
 362               		
 363               	/* (1), (2) */	
 364               	OUTQ:
 365 01d4 40E7      		move.w	%sr, -(%sp) 	/* (1) 現走行レベルの退避 */
 366 01d6 46FC 2700 		move.w	#0x2700, %sr 	/* (2) 割り込み禁止 */
 367 01da 48E7 00F0 		movem.l %a0-%a3, -(%sp) /* レジスタ退避 */
 368 01de 207C 0000 		movea.l #Que0, %a0		/* キュー0参照用アドレス */
 368      0000 
 369               	
 370               	    /* Que0 or Que1 */
 371 01e4 0C80 0000 		cmpi.l	#0, %d0	        /* キュー番号の確認 */
 371      0000 
 372 01ea 6700 0008 		beq	OUTQ_CHECK      	/* キュー0を使用 */
 373               		              			/* キュー1を使用 */
 374 01ee 207C 0000 		movea.l #Que1, %a0		/* キュー1参照用アドレス */
 374      0000 
 375               	/* (3) */	
 376               	OUTQ_CHECK:
 377               	/* (3) s == 0 ならば%D0 を0（失敗：queue empty）に設定し，(7) へ */
 378 01f4 0C68 0000 		cmpi.w	#0, s(%a0)      /* キュー内のデータの個数を確認 */
 378      0008 
 379 01fa 6600 0008 		bne	OUTQ_START      	/* キューが一杯でなければ読み出し可能 */
 380 01fe 7000      		moveq.l	 #0, %d0 		/*失敗*/
 381 0200 6000 0038 		bra	OUTQ_END
 382               	/* (4), (5-2) */
 383               	OUTQ_START:
 384 0204 2268 0000 		movea.l out(%a0), %a1   /* 読み出し先アドレスを格納*/
 385 0208 1211      		move.b  (%a1), %d1      /* (4) data = m[out]；読み出し処理*/
 386 020a 2448      		movea.l	%a0, %a2
 387 020c D5FC 0000 		adda.l	#bottom, %a2	/* キューの末尾のアドレスを格納 */
 387      010A 
 388               	
 389               	    /* (5) if (out == bottom) */
 390 0212 B5E8 0000 		cmpa.l	out(%a0), %a2	/* 読み込んだ位置がキューの末尾か確認 */
 391 0216 6700 000E 		beq	OUTQ_TOP
 392               	
 393               		/* (5-2) else out++  */
 394 021a 06A8 0000 		addi.l	#1, out(%a0)	/* 読み出し位置のアドレスを1加算 */
 394      0001 0000 
 395 0222 6000 000E 		bra OUTQ_SUCCESS
 396               	
 397               	/* (5-1) */
 398               	OUTQ_TOP:	
 399               	/*  (5-1) out=top */


 400 0226 267C 0000 		move.l	#top, %a3
 400      000A 
 401 022c D7C8      		add.l	%a0, %a3		/* topのアドレスを求める */
 402 022e 214B 0000 		move.l	%a3, out(%a0)	/* 読み出し位置をキューの先頭に移動 */
 403               	
 404               	/* (6) */
 405               	OUTQ_SUCCESS:
 406               	/* s––, %D0 を1（成功）に設定 */
 407 0232 0468 0001 		subi.w	#1, s(%a0)		/* 個数を1減算 */
 407      0008 
 408 0238 7001      		moveq.l	#1, %d0			/* 読み出し成功 */
 409               	
 410               	/* (7)  */
 411               	OUTQ_END:	
 412 023a 4CDF 0F00 		movem.l	(%sp)+, %a0-%a3	/* レジスタの回復 */
 413 023e 46DF      		move.w	(%sp)+, %sr		/* (7) 旧走行レベルの回復 */
 414 0240 4E75      		rts
 415               	
 416               	
 417               	**************************************************
 418               	***a0:選択された構造体の先頭アドレス（変更不可）
 419               	***a1:構造体の先頭アドレスのコピー（変更可）
 420               	***************************************************
 421               	
 422               	**ここからINTERPUT・PUTSTRING
 423               	**担当：諸隈・宮田・瀬尾
 424               	
 425               	INTERPUT:
 426               	    **(1) 割り込み禁止（走行レベルを7に設定）
 427 0242 46FC 2700 	    move.w  #0x2700, %SR
 428 0246 48E7 8000 	    movem.l %d0, -(%sp)
 429               		
 430               	    **(2) ch ≠ 0 ならば、何もせずに復帰
 431 024a 0C81 0000 	    cmp.l   #0, %d1
 431      0000 
 432 0250 6600 001C 	    bne     INTERPUT_Exit
 433               	
 434               	    **(3) OUTQ(1, data) を実行する (= 送信キューから8bitデータを1つ取り出しdat
 435 0254 7001      	    move.l  #1, %d0     | キュー番号を指定 (1は送信キュー)
 436 0256 4EBA FF7C 	    jsr     OUTQ
 437               	
 438               	    **(4) OUTQの戻り値が0 (失敗) ならば、送信割り込みをマスク (USTCNT1を操
 439 025a 0C80 0000 	    cmp.l  #0, %d0           | %D0にOUTQの戻り値が格納されている
 439      0000 
 440 0260 6700 0012 	    beq     INTERPUT_MUSK | OUTQが失敗した場合は何も送信せずに復帰
 441               	
 442               	    **(5) dataを送信レジスタUTX1に代入して送信 (上位8ビット分のヘッダを忘
 443               	    **上位8ビットのヘッダを付与しておく
 444 0264 0641 0800 	    add.w  #0x0800, %d1
 445 0268 33C1 00FF 	    move.w  %d1, UTX1
 445      F906 
 446               	    
 447               	INTERPUT_Exit:
 448               	    **(6) 旧走行レベルの回復
 449 026e 4CDF 0001 	    movem.l (%sp)+, %d0
 450 0272 4E75      	    rts
 451               	


 452               	INTERPUT_MUSK:
 453 0274 33FC E108 	    move.w #0xE108, USTCNT1
 453      00FF F900 
 454 027c 6000 FFF0 	    bra INTERPUT_Exit
 455               	
 456               	/* STEP 5: 送信制御部の完成（PUTSTRING）*/
 457               	
 458               	*****************************************
 459               	*** a0=i
 460               	*** d0=sz(実際に送信したデータ数)
 461               	*** d1=ch
 462               	*** d2=p(データ読み込み先の先頭アドレス)
 463               	*** d3=size(送信するデータ数)
 464               	*****************************************
 465               	
 466               	PUTSTRING:
 467 0280 48E7 00F0 	    movem.l	%a0-%a3, -(%sp)  /* レジスタ退避 */
 468               	
 469               	    ** (1) ch != 0 ならば，(11) へ．(=なにもせず復帰)
 470 0284 0C81 0000 	    cmp.l   #0, %d1          /* ch≠0ならば何もせず復帰 */
 470      0000 
 471 028a 6600 004C 	    bne     PUTSTRING_END
 472               		
 473               		** (2) sz <- 0, i <- p
 474 028e 41F9 0000 		lea.l	sz, %a0         /* sz <- 0 */
 474      0000 
 475 0294 43F9 0000 		lea.l	i, %a1          /*  i <- p */
 475      0000 
 476 029a 20BC 0000 	    move.l	#0, (%a0)
 476      0000 
 477 02a0 2282      		move.l	%d2, (%a1)
 478               	
 479               	    ** (3) size = 0 ならば，(10)へ
 480 02a2 0C83 0000 		cmp.l	#0, %d3
 480      0000 
 481 02a8 6700 002C 		beq	PUTSTRING_RETURN
 482               	
 483               	PUTSTRING_LOOP:
 484               	    ** (4) sz = size ならば，(9)へ
 485 02ac B690      		cmp.l	(%a0), %d3      /* sz = sizeならばUnmusk */
 486 02ae 6700 001E 	    beq	PUTSTRING_UNMUSK
 487               		
 488               	    ** (5) INQ(1, i) を実行し，送信キューへi番地のデータを書き込む．
 489 02b2 7001      	    move.l	#1, %d0         /* 送信キューを選択 */
 490 02b4 2651      	    movea.l	(%a1), %a3      /* 送信するデータを入力 */
 491 02b6 1213      	    move.b	(%a3), %d1      
 492 02b8 4EBA FEAC 		jsr	INQ	/*INQ(1, i)*/
 493               	    
 494               	    ** (6) INQ の復帰値が0 (失敗/ queue full) なら(9) へ
 495 02bc 0C80 0000 	    cmp.l	#0, %d0         /* INQの復帰値が0ならばUnmusk */
 495      0000 
 496 02c2 6700 000A 	    beq	PUTSTRING_UNMUSK
 497               	
 498               	    ** (7) sz++, i++, (10) sz -> %d0
 499 02c6 5290      	    add.l	#1, (%a0)       /* sz++ */
 500 02c8 5291      	    add.l	#1, (%a1)       /* i++ */
 501               	


 502               	    ** (8) (4)へ
 503 02ca 6000 FFE0 	    bra	PUTSTRING_LOOP
 504               		
 505               	
 506               	PUTSTRING_UNMUSK:
 507               	    ** (9) USTCNT1 を操作して送信割り込み許可(アンマスク)
 508 02ce 33FC E10C 	    move.w  #0xe10C, USTCNT1 /*送信割り込みをアンマスク*/
 508      00FF F900 
 509               	
 510               	PUTSTRING_RETURN:	
 511 02d6 2010      		move.l	(%a0), %d0	
 512               	
 513               	PUTSTRING_END:
 514 02d8 4CDF 0F00 	    movem.l	(%sp)+, %a0-%a3
 515 02dc 4E75      	    rts
 516               	
 517               		
 518               	/* STEP 6: 受信制御部の完成（GETSTRING, INTERGET）*/
 519               	/* STEP 6-1: GETSTRING */
 520               	GETSTRING:
 521 02de 48E7 7880 	    movem.l %d1-%d4/%a0, -(%sp)
 522               	
 523               	** (1) ch!=0ならば，なにも実行せず復帰
 524 02e2 0C81 0000 	    cmpi.l #0x0, %d1
 524      0000 
 525 02e8 6600 002E 	    bne GETSTRING_Exit /* d1 != 0ならば，走行レベルを回復させ処理を終了 */
 526               	
 527               	** (2) sz <- 0, i <- p
 528 02ec 7800      	    move.l #0, %d4
 529 02ee 2042      	    movea.l %d2, %a0
 530               	
 531               	GETSTRING_LOOP:
 532               	** (3) sz = sizeならば，(9)へ
 533 02f0 B684      	    cmp.l %d4, %d3
 534 02f2 6700 0024 	    beq GETSTRING_Exit
 535               	
 536               	** (4) OUTQ(0, data)により，受信キューから8bitデータ読み込み
 537 02f6 7000      	    move.l #0, %d0
 538 02f8 4EBA FEDA 	    jsr OUTQ
 539               	
 540               	** (5) OUTQの復帰値（%0の値）が0（＝失敗）なら(9)へ
 541 02fc 0C80 0000 	    cmp.l #0, %d0
 541      0000 
 542 0302 6700 0014 	    beq GETSTRING_Exit
 543               	
 544               	** (6) i番地にdataをコピー
 545 0306 1081      	    move.b %d1, (%a0)
 546               	
 547               	** (7) sz++, i++
 548 0308 0684 0000 	    addi.l #1, %d4
 548      0001 
 549 030e D1FC 0000 	    adda.l #1, %a0
 549      0001 
 550               	
 551               	** (8) (3)へ
 552 0314 6000 FFDA 	    bra GETSTRING_LOOP
 553               	


 554               	GETSTRING_Exit:
 555               	** (9) sz -> %d0
 556 0318 13FC 0038 	    move.b #'8',LED0
 556      00D0 0039 
 557 0320 2004      	    move.l %d4, %d0
 558 0322 4CDF 011E 	    movem.l (%sp)+, %d1-%d4/%a0
 559 0326 4E75      	    rts
 560               	
 561               	/* STEP 6-2: INTERGET */
 562               	***********************************************
 563               	*** INTERGET(ch, data)
 564               	*** 【機能】
 565               	*** - 受信データを受信キューに格納する
 566               	*** - チャネルchが0以外の場合は，なにも実行しない
 567               	*** 【入力】
 568               	*** - チャネル：ch -> %d1.l
 569               	*** - 受信データ：data -> %d2.b
 570               	*** 【戻り値】
 571               	*** なし
 572               	*** 【処理内容】
 573               	*** (1) ch!=0ならば，なにも実行せず復帰
 574               	*** (2) INQ(0, data)
 575               	***********************************************
 576               	
 577               	INTERGET:
 578 0328 48E7 E000 	    movem.l %d0-%d2, -(%sp)
 579               	
 580               	* (1) ch!=0ならば，なにも実行せず復帰
 581 032c 0C81 0000 	    cmpi.l #0x0, %d1
 581      0000 
 582 0332 6600 001A 	    bne INTERGET_Finish  /* 走行レベルを回復させ処理を終了 */
 583               	
 584               	* (2) INQ(0, data)
 585 0336 7000      	    move.l #0, %d0
 586 0338 1202      	    move.b %d2, %d1
 587 033a 13FC 0031 	    move.b #'1', LED2   /* 文字'1'をLEDの8桁目に表示 */
 587      00D0 003D 
 588 0342 4EBA FE22 	    jsr INQ
 589 0346 13FC 0033 	    move.b #'3', LED3   /* 文字'3'をLEDの6桁目に表示 */
 589      00D0 003F 
 590               	
 591               	INTERGET_Finish:
 592 034e 4CDF 0007 	    movem.l (%sp)+, %d0-%d2
 593 0352 4E75      	    rts
 594               	
 595               	/* STEP 7: タイマ制御部の完成（RESET_TIMER, SET_TIMER, CALL_RP, TIMER INTERFACE）*/
 596               	/* STEP 7-3: TIMER INTERFACE */
 597               	** こっからTIMER関係
 598               	** 担当：武石
 599               	timer_interface:
 600 0354 48E7 8000 	    movem.l %d0, -(%sp)         | レジスタ退避
 601 0358 3039 00FF 	    move.w TSTAT1, %d0          | とりあえずd0 = TSTAT1 にコピー
 601      F60A 
 602 035e 0240 0001 	    andi.w #0x0001, %d0         | d0 = d0 & 0x0001
 603 0362 6600 0004 	    bne timer_interface_label   | d0 = TSATA1 の第 0 ビットが 0 ならば timer_interface_lab
 604 0366 4E73      	    rte                         | 1 ならば rte で復帰
 605               	


 606               	timer_interface_label:
 607 0368 33FC 0000 	    move.w #0x0000, TSTAT1      | TSTAT1 = 0 (TSTAT1 のリセット)
 607      00FF F60A 
 608 0370 4EBA 0038 	    jsr CALL_RP                 | CALL RP を呼び出す
 609 0374 4CDF 0001 	    movem.l (%sp)+, %d0         | レジスタ回復
 610 0378 4E73      	    rte
 611               	
 612               	/* STEP 7-1: RESET TIMER */
 613               	RESET_TIMER:
 614 037a 33FC 0004 	    move.w #0x0004, TCTL1
 614      00FF F600 
 615 0382 4E75      	    rts
 616               	
 617               	/* STEP 7-2: SET TIMER */
 618               	SET_TIMER:
 619 0384 48E7 6000 	    movem.l	%d1-%d2, -(%sp)     | レジスタ退避
 620 0388 23C2 0000 	    move.l %d2, task_p          | 先頭アドレス p → %D2.L を，大域変数 task p に代
 620      0000 
 621 038e 33FC 00CE 	    move.w #0x00CE, TPRER1      | TPRER1の値は, 計算すると 206.2576 になった. 推奨値
 621      00FF F602 
 622 0396 33C1 00FF 	    move.w %d1, TCMP1           | タイマ割り込み発生周期 t を，タイマ 1 コンペ
 622      F604 
 623 039c 33FC 0015 	    move.w #0x0015, TCTL1       | TCTL1 = 0000 0000 0001 0101
 623      00FF F600 
 624 03a4 4CDF 0006 	    movem.l	(%sp)+, %d1-%d2     | レジスタ復帰
 625 03a8 4E75      	    rts
 626               	
 627               	/* STEP 7-3: CALL_RP */
 628               	CALL_RP:
 629 03aa 48E7 0080 	    movem.l	%a0, -(%sp)
 630 03ae 2079 0000 		movea.l task_p, %a0 
 630      0000 
 631 03b4 4E90      		jsr (%a0)
 632 03b6 4CDF 0100 		movem.l (%sp)+, %a0
 633 03ba 4E75      		rts
 634               	
 635               	
 636               	/* STEP 8: システムコールインタフェースの完成 */
 637               	** ここからシステムコールインタフェース
 638               	** 担当：後藤
 639               	
 640               	SYSCALL_INTERFACE:
 641               	** (1) システムコール番号 %D0 を 実行先アドレスに変換する．
 642               	** (2) システムコールを呼び出す
 643               	
 644 03bc 48E7 0080 	    movem.l %a0, -(%sp) |レジスタ退避
 645 03c0 0C80 0000 	    cmp.l #SYSCALL_NUM_GETSTRING, %d0
 645      0001 
 646 03c6 6700 0020 	    beq SYSCALL_1
 647 03ca 0C80 0000 	    cmp.l #SYSCALL_NUM_PUTSTRING, %d0
 647      0002 
 648 03d0 6700 0020 	    beq SYSCALL_2
 649 03d4 0C80 0000 	    cmp.l #SYSCALL_NUM_RESET_TIMER, %d0
 649      0003 
 650 03da 6700 0020 	    beq SYSCALL_3
 651 03de 0C80 0000 	    cmp.l #SYSCALL_NUM_SET_TIMER, %d0
 651      0004 


 652 03e4 6700 0020 	    beq SYSCALL_4
 653               	SYSCALL_1:
 654 03e8 203C 0000 	    move.l #GETSTRING, %d0
 654      0000 
 655 03ee 6000 0020 	    bra JUMP_SYSCALL
 656               	SYSCALL_2:
 657 03f2 203C 0000 	    move.l #PUTSTRING, %d0
 657      0000 
 658 03f8 6000 0016 	    bra JUMP_SYSCALL
 659               	SYSCALL_3:
 660 03fc 203C 0000 	    move.l #RESET_TIMER, %d0
 660      0000 
 661 0402 6000 000C 	    bra JUMP_SYSCALL
 662               	SYSCALL_4:
 663 0406 203C 0000 	    move.l #SET_TIMER, %d0
 663      0000 
 664 040c 6000 0002 	    bra JUMP_SYSCALL
 665               	JUMP_SYSCALL:
 666 0410 2040      	    movea.l %d0, %a0
 667 0412 4E90      	    jsr (%a0)
 668               	SYSCALL_INTERFACE_FINISH:
 669 0414 4CDF 0100 	    movem.l (%sp)+,%a0  |レジスタ復帰
 670 0418 4E73      	    rte
 671               	
 672               	    
 673               	.section .data
 674               	
 675               	/* STEP 0-1: キューの初期化ルーチン */
 676               	** (2) データ領域のアドレス（先頭・末尾）を代入，データ数の初期化
 677 000a 0000 0000 	Que_START:	.ds.b	536
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 677      0000 0000 
 678               	
 679               		/*キューの各先頭アドレス*/
 680               	    .equ    Que0, Que_START
 681               	    .equ    Que1, Que0 + 0x0000010c
 682               		
 683               		/*キューの各要素のオフセット*/
 684               		.equ	out, 0
 685               		.equ	in, 4
 686               		.equ	s, 8  /*2byte分確保*/
 687               		.equ	top, 10
 688               		.equ	bottom, 266
 689               	
 690 0222 0000 0000 	sz:		.ds.l 1
 691 0226 0000 0000 	i: 		.ds.l 1
 692               	.end




   1               	#NO_APP
   2               		.file	"csys68k.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	read
   8               		.type	read, @function
   9               	read:
  10               	.LVL0:
  11               	.LFB0:
  12               		.file 1 "csys68k.c"
   1:csys68k.c     **** #include <stdarg.h>
   2:csys68k.c     **** #include <fcntl.h>
   3:csys68k.c     **** #include <errno.h>
   4:csys68k.c     **** 
   5:csys68k.c     **** extern void outbyte(unsigned char c, int fd);
   6:csys68k.c     **** extern char inbyte(int fd);
   7:csys68k.c     **** 
   8:csys68k.c     **** int read(int fd, char *buf, int nbytes)
   9:csys68k.c     **** {
  13               		.loc 1 9 1 view -0
  14               		.cfi_startproc
  15               		.loc 1 9 1 is_stmt 0 view .LVU1
  16 0000 48E7 3C38 		movem.l #15416,-(%sp)
  17               		.cfi_def_cfa_offset 32
  18               		.cfi_offset 2, -32
  19               		.cfi_offset 3, -28
  20               		.cfi_offset 4, -24
  21               		.cfi_offset 5, -20
  22               		.cfi_offset 10, -16
  23               		.cfi_offset 11, -12
  24               		.cfi_offset 12, -8
  25 0004 282F 0020 		move.l 32(%sp),%d4
  26 0008 286F 0024 		move.l 36(%sp),%a4
  27 000c 2A2F 0028 		move.l 40(%sp),%d5
  10:csys68k.c     ****   char c;
  28               		.loc 1 10 3 is_stmt 1 view .LVU2
  11:csys68k.c     ****   int  i;
  29               		.loc 1 11 3 view .LVU3
  12:csys68k.c     ****   int ch;
  30               		.loc 1 12 3 view .LVU4
  13:csys68k.c     ****   
  14:csys68k.c     ****   if(fd == 0 || fd == 3)  ch = 0;
  31               		.loc 1 14 3 view .LVU5
  32 0010 7003      		moveq #3,%d0
  33 0012 B084      		cmp.l %d4,%d0
  34 0014 6700 00B6 		jeq .L10
  35 0018 7004      		moveq #4,%d0
  36 001a B084      		cmp.l %d4,%d0
  37 001c 670E      		jeq .L11
  38 001e 4A84      		tst.l %d4
  39 0020 670C      		jeq .L2
  15:csys68k.c     ****   else if(fd == 4)        ch = 1;
  16:csys68k.c     ****   else                    return EBADF;
  17:csys68k.c     ****   
  18:csys68k.c     **** 


  19:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
  40               		.loc 1 19 10 is_stmt 0 view .LVU6
  41 0022 7609      		moveq #9,%d3
  42               	.L1:
  20:csys68k.c     ****     c = inbyte(ch);
  21:csys68k.c     **** 
  22:csys68k.c     ****     if (c == '\r' || c == '\n'){ /* CR -> CRLF */
  23:csys68k.c     ****       outbyte('\r', ch);
  24:csys68k.c     ****       outbyte('\n', ch);
  25:csys68k.c     ****       *(buf + i) = '\n';
  26:csys68k.c     **** 
  27:csys68k.c     ****     /* } else if (c == '\x8'){ */     /* backspace \x8 */
  28:csys68k.c     ****     } else if (c == '\x7f'){      /* backspace \x8 -> \x7f (by terminal config.) */
  29:csys68k.c     ****       if (i > 0){
  30:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
  31:csys68k.c     ****         outbyte(' ', ch);   /* spc */
  32:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
  33:csys68k.c     **** 	      i--;
  34:csys68k.c     ****       }
  35:csys68k.c     ****       i--;
  36:csys68k.c     ****       continue;
  37:csys68k.c     **** 
  38:csys68k.c     ****     } else {
  39:csys68k.c     ****       outbyte(c, ch);
  40:csys68k.c     ****       *(buf + i) = c;
  41:csys68k.c     ****     }
  42:csys68k.c     **** 
  43:csys68k.c     ****     if (*(buf + i) == '\n'){
  44:csys68k.c     ****       return (i + 1);
  45:csys68k.c     ****     }
  46:csys68k.c     ****   }
  47:csys68k.c     ****   return (i);
  48:csys68k.c     **** }
  43               		.loc 1 48 1 view .LVU7
  44 0024 2003      		move.l %d3,%d0
  45 0026 4CDF 1C3C 		movem.l (%sp)+,#7228
  46 002a 4E75      		rts
  47               	.L11:
   9:csys68k.c     ****   char c;
  48               		.loc 1 9 1 view .LVU8
  49 002c 7801      		moveq #1,%d4
  50               	.L2:
  51               	.LVL1:
  19:csys68k.c     ****     c = inbyte(ch);
  52               		.loc 1 19 3 is_stmt 1 view .LVU9
  19:csys68k.c     ****     c = inbyte(ch);
  53               		.loc 1 19 17 view .LVU10
  19:csys68k.c     ****     c = inbyte(ch);
  54               		.loc 1 19 10 is_stmt 0 view .LVU11
  55 002e 7600      		moveq #0,%d3
  19:csys68k.c     ****     c = inbyte(ch);
  56               		.loc 1 19 17 view .LVU12
  57 0030 4A85      		tst.l %d5
  58 0032 6FF0      		jle .L1
  59 0034 47F9 0000 		lea inbyte,%a3
  59      0000 
  60 003a 45F9 0000 		lea outbyte,%a2


  60      0000 
  61               	.LVL2:
  62               	.L9:
  20:csys68k.c     ****     c = inbyte(ch);
  63               		.loc 1 20 5 is_stmt 1 view .LVU13
  20:csys68k.c     ****     c = inbyte(ch);
  64               		.loc 1 20 9 is_stmt 0 view .LVU14
  65 0040 2F04      		move.l %d4,-(%sp)
  66               		.cfi_def_cfa_offset 36
  67 0042 4E93      		jsr (%a3)
  68               	.LVL3:
  69 0044 1400      		move.b %d0,%d2
  70               	.LVL4:
  22:csys68k.c     ****       outbyte('\r', ch);
  71               		.loc 1 22 5 is_stmt 1 view .LVU15
  22:csys68k.c     ****       outbyte('\r', ch);
  72               		.loc 1 22 8 is_stmt 0 view .LVU16
  73 0046 588F      		addq.l #4,%sp
  74               		.cfi_def_cfa_offset 32
  75 0048 0C00 000D 		cmp.b #13,%d0
  76 004c 6730      		jeq .L4
  77               	.L24:
  22:csys68k.c     ****       outbyte('\r', ch);
  78               		.loc 1 22 19 discriminator 1 view .LVU17
  79 004e 0C00 000A 		cmp.b #10,%d0
  80 0052 672A      		jeq .L4
  28:csys68k.c     ****       if (i > 0){
  81               		.loc 1 28 12 is_stmt 1 view .LVU18
  28:csys68k.c     ****       if (i > 0){
  82               		.loc 1 28 15 is_stmt 0 view .LVU19
  83 0054 0C00 007F 		cmp.b #127,%d0
  84 0058 6748      		jeq .L23
  39:csys68k.c     ****       *(buf + i) = c;
  85               		.loc 1 39 7 is_stmt 1 view .LVU20
  86 005a 2F04      		move.l %d4,-(%sp)
  87               		.cfi_def_cfa_offset 36
  88 005c 7000      		moveq #0,%d0
  89               	.LVL5:
  39:csys68k.c     ****       *(buf + i) = c;
  90               		.loc 1 39 7 is_stmt 0 view .LVU21
  91 005e 1002      		move.b %d2,%d0
  92 0060 2F00      		move.l %d0,-(%sp)
  93               		.cfi_def_cfa_offset 40
  94 0062 4E92      		jsr (%a2)
  95               	.LVL6:
  40:csys68k.c     ****     }
  96               		.loc 1 40 7 is_stmt 1 view .LVU22
  40:csys68k.c     ****     }
  97               		.loc 1 40 18 is_stmt 0 view .LVU23
  98 0064 1982 3800 		move.b %d2,(%a4,%d3.l)
  43:csys68k.c     ****       return (i + 1);
  99               		.loc 1 43 5 is_stmt 1 view .LVU24
  44:csys68k.c     ****     }
 100               		.loc 1 44 17 is_stmt 0 view .LVU25
 101 0068 5283      		addq.l #1,%d3
 102               	.LVL7:
  44:csys68k.c     ****     }


 103               		.loc 1 44 17 view .LVU26
 104 006a 508F      		addq.l #8,%sp
 105               		.cfi_def_cfa_offset 32
 106               	.LVL8:
  19:csys68k.c     ****     c = inbyte(ch);
 107               		.loc 1 19 28 is_stmt 1 view .LVU27
  19:csys68k.c     ****     c = inbyte(ch);
 108               		.loc 1 19 17 view .LVU28
 109 006c B685      		cmp.l %d5,%d3
 110 006e 6CB4      		jge .L1
 111               	.L22:
 112               	.LVL9:
  20:csys68k.c     **** 
 113               		.loc 1 20 5 view .LVU29
  20:csys68k.c     **** 
 114               		.loc 1 20 9 is_stmt 0 view .LVU30
 115 0070 2F04      		move.l %d4,-(%sp)
 116               		.cfi_def_cfa_offset 36
 117 0072 4E93      		jsr (%a3)
 118               	.LVL10:
 119 0074 1400      		move.b %d0,%d2
 120               	.LVL11:
  22:csys68k.c     ****       outbyte('\r', ch);
 121               		.loc 1 22 5 is_stmt 1 view .LVU31
  22:csys68k.c     ****       outbyte('\r', ch);
 122               		.loc 1 22 8 is_stmt 0 view .LVU32
 123 0076 588F      		addq.l #4,%sp
 124               		.cfi_def_cfa_offset 32
 125 0078 0C00 000D 		cmp.b #13,%d0
 126 007c 66D0      		jne .L24
 127               	.L4:
  23:csys68k.c     ****       outbyte('\n', ch);
 128               		.loc 1 23 7 is_stmt 1 view .LVU33
 129 007e 2F04      		move.l %d4,-(%sp)
 130               		.cfi_def_cfa_offset 36
 131 0080 4878 000D 		pea 13.w
 132               		.cfi_def_cfa_offset 40
 133 0084 4E92      		jsr (%a2)
 134               	.LVL12:
  24:csys68k.c     ****       *(buf + i) = '\n';
 135               		.loc 1 24 7 view .LVU34
 136 0086 2F04      		move.l %d4,-(%sp)
 137               		.cfi_def_cfa_offset 44
 138 0088 4878 000A 		pea 10.w
 139               		.cfi_def_cfa_offset 48
 140 008c 4E92      		jsr (%a2)
 141               	.LVL13:
  25:csys68k.c     **** 
 142               		.loc 1 25 7 view .LVU35
  25:csys68k.c     **** 
 143               		.loc 1 25 18 is_stmt 0 view .LVU36
 144 008e 19BC 000A 		move.b #10,(%a4,%d3.l)
 144      3800 
  43:csys68k.c     ****       return (i + 1);
 145               		.loc 1 43 5 is_stmt 1 view .LVU37
  44:csys68k.c     ****     }
 146               		.loc 1 44 7 view .LVU38


  44:csys68k.c     ****     }
 147               		.loc 1 44 17 is_stmt 0 view .LVU39
 148 0094 5283      		addq.l #1,%d3
 149               	.LVL14:
  44:csys68k.c     ****     }
 150               		.loc 1 44 17 view .LVU40
 151 0096 4FEF 0010 		lea (16,%sp),%sp
 152               		.cfi_def_cfa_offset 32
 153               		.loc 1 48 1 view .LVU41
 154 009a 2003      		move.l %d3,%d0
 155 009c 4CDF 1C3C 		movem.l (%sp)+,#7228
 156               	.LVL15:
 157               		.loc 1 48 1 view .LVU42
 158 00a0 4E75      		rts
 159               	.LVL16:
 160               	.L23:
  29:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 161               		.loc 1 29 7 is_stmt 1 view .LVU43
  29:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 162               		.loc 1 29 10 is_stmt 0 view .LVU44
 163 00a2 4A83      		tst.l %d3
 164 00a4 679A      		jeq .L9
  33:csys68k.c     ****       }
 165               		.loc 1 33 9 view .LVU45
 166 00a6 5383      		subq.l #1,%d3
 167               	.LVL17:
  30:csys68k.c     ****         outbyte(' ', ch);   /* spc */
 168               		.loc 1 30 9 is_stmt 1 view .LVU46
 169 00a8 2F04      		move.l %d4,-(%sp)
 170               		.cfi_def_cfa_offset 36
 171 00aa 4878 0008 		pea 8.w
 172               		.cfi_def_cfa_offset 40
 173 00ae 4E92      		jsr (%a2)
 174               	.LVL18:
  31:csys68k.c     ****         outbyte('\x8', ch); /* bs  */
 175               		.loc 1 31 9 view .LVU47
 176 00b0 2F04      		move.l %d4,-(%sp)
 177               		.cfi_def_cfa_offset 44
 178 00b2 4878 0020 		pea 32.w
 179               		.cfi_def_cfa_offset 48
 180 00b6 4E92      		jsr (%a2)
 181               	.LVL19:
  32:csys68k.c     **** 	      i--;
 182               		.loc 1 32 9 view .LVU48
 183 00b8 2F04      		move.l %d4,-(%sp)
 184               		.cfi_def_cfa_offset 52
 185 00ba 4878 0008 		pea 8.w
 186               		.cfi_def_cfa_offset 56
 187 00be 4E92      		jsr (%a2)
 188               	.LVL20:
  33:csys68k.c     ****       }
 189               		.loc 1 33 8 view .LVU49
  35:csys68k.c     ****       continue;
 190               		.loc 1 35 7 view .LVU50
  36:csys68k.c     **** 
 191               		.loc 1 36 7 view .LVU51
 192 00c0 4FEF 0018 		lea (24,%sp),%sp


 193               		.cfi_def_cfa_offset 32
 194               	.LVL21:
  19:csys68k.c     ****     c = inbyte(ch);
 195               		.loc 1 19 28 view .LVU52
  19:csys68k.c     ****     c = inbyte(ch);
 196               		.loc 1 19 17 view .LVU53
 197 00c4 B685      		cmp.l %d5,%d3
 198 00c6 6DA8      		jlt .L22
 199 00c8 6000 FF5A 		jra .L1
 200               	.LVL22:
 201               	.L10:
   9:csys68k.c     ****   char c;
 202               		.loc 1 9 1 is_stmt 0 view .LVU54
 203 00cc 7800      		moveq #0,%d4
 204 00ce 6000 FF5E 		jra .L2
 205               		.cfi_endproc
 206               	.LFE0:
 207               		.size	read, .-read
 208               		.align	2
 209               		.globl	write
 210               		.type	write, @function
 211               	write:
 212               	.LVL23:
 213               	.LFB1:
  49:csys68k.c     **** 
  50:csys68k.c     **** int write (int fd, char *buf, int nbytes)
  51:csys68k.c     **** {
 214               		.loc 1 51 1 is_stmt 1 view -0
 215               		.cfi_startproc
 216               		.loc 1 51 1 is_stmt 0 view .LVU56
 217 00d2 48E7 3830 		movem.l #14384,-(%sp)
 218               		.cfi_def_cfa_offset 24
 219               		.cfi_offset 2, -24
 220               		.cfi_offset 3, -20
 221               		.cfi_offset 4, -16
 222               		.cfi_offset 10, -12
 223               		.cfi_offset 11, -8
 224 00d6 282F 0020 		move.l 32(%sp),%d4
  52:csys68k.c     ****   int i, j;
 225               		.loc 1 52 3 is_stmt 1 view .LVU57
  53:csys68k.c     ****   int ch;
 226               		.loc 1 53 3 view .LVU58
  54:csys68k.c     ****   
  55:csys68k.c     ****   if(fd == 1 || fd == 2 || fd == 3) ch = 0;
 227               		.loc 1 55 3 view .LVU59
 228               		.loc 1 55 25 is_stmt 0 view .LVU60
 229 00da 202F 0018 		move.l 24(%sp),%d0
 230 00de 5380      		subq.l #1,%d0
 231               		.loc 1 55 5 view .LVU61
 232 00e0 7202      		moveq #2,%d1
 233 00e2 B280      		cmp.l %d0,%d1
 234 00e4 643E      		jcc .L32
  56:csys68k.c     ****   else if(fd == 4)                  ch = 1;
 235               		.loc 1 56 8 is_stmt 1 view .LVU62
 236               		.loc 1 56 10 is_stmt 0 view .LVU63
 237 00e6 7004      		moveq #4,%d0
 238 00e8 B0AF 0018 		cmp.l 24(%sp),%d0


 239 00ec 665C      		jne .L33
 240               		.loc 1 56 40 view .LVU64
 241 00ee 7401      		moveq #1,%d2
 242               	.L26:
 243               	.LVL24:
  57:csys68k.c     ****   else                              return EBADF;
  58:csys68k.c     **** 
  59:csys68k.c     ****   for (i = 0; i < nbytes; i++) {
 244               		.loc 1 59 3 is_stmt 1 view .LVU65
 245               		.loc 1 59 17 view .LVU66
 246 00f0 4A84      		tst.l %d4
 247 00f2 6F28      		jle .L31
 248 00f4 246F 001C 		move.l 28(%sp),%a2
 249 00f8 260A      		move.l %a2,%d3
 250 00fa D684      		add.l %d4,%d3
 251 00fc 47F9 0000 		lea outbyte,%a3
 251      0000 
 252               	.LVL25:
 253               	.L30:
  60:csys68k.c     ****     if (*(buf + i) == '\n') {
 254               		.loc 1 60 5 view .LVU67
 255               		.loc 1 60 9 is_stmt 0 view .LVU68
 256 0102 121A      		move.b (%a2)+,%d1
 257               	.LVL26:
 258               		.loc 1 60 8 view .LVU69
 259 0104 0C01 000A 		cmp.b #10,%d1
 260 0108 671E      		jeq .L37
  61:csys68k.c     ****       outbyte('\r', ch);          /* LF -> CRLF */
  62:csys68k.c     ****     }
  63:csys68k.c     ****     outbyte(*(buf + i), ch);
 261               		.loc 1 63 5 is_stmt 1 view .LVU70
 262 010a 2F02      		move.l %d2,-(%sp)
 263               		.cfi_def_cfa_offset 28
 264 010c 0281 0000 		and.l #255,%d1
 264      00FF 
 265 0112 2F01      		move.l %d1,-(%sp)
 266               		.cfi_def_cfa_offset 32
 267 0114 4E93      		jsr (%a3)
 268               	.LVL27:
  64:csys68k.c     ****     for (j = 0; j < 300; j++);
 269               		.loc 1 64 5 view .LVU71
 270               		.loc 1 64 19 view .LVU72
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 271               		.loc 1 59 28 view .LVU73
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 272               		.loc 1 59 17 view .LVU74
 273 0116 508F      		addq.l #8,%sp
 274               		.cfi_def_cfa_offset 24
 275 0118 B68A      		cmp.l %a2,%d3
 276 011a 66E6      		jne .L30
 277               	.LVL28:
 278               	.L31:
  57:csys68k.c     **** 
 279               		.loc 1 57 44 is_stmt 0 view .LVU75
 280 011c 2004      		move.l %d4,%d0
  65:csys68k.c     ****   }
  66:csys68k.c     ****   return (nbytes);


  67:csys68k.c     **** }
 281               		.loc 1 67 1 view .LVU76
 282 011e 4CDF 0C1C 		movem.l (%sp)+,#3100
 283               	.LVL29:
 284               		.loc 1 67 1 view .LVU77
 285 0122 4E75      		rts
 286               	.L32:
  55:csys68k.c     ****   else if(fd == 4)                  ch = 1;
 287               		.loc 1 55 40 view .LVU78
 288 0124 7400      		moveq #0,%d2
 289 0126 60C8      		jra .L26
 290               	.LVL30:
 291               	.L37:
  61:csys68k.c     ****     }
 292               		.loc 1 61 7 is_stmt 1 view .LVU79
 293 0128 2F02      		move.l %d2,-(%sp)
 294               		.cfi_def_cfa_offset 28
 295 012a 4878 000D 		pea 13.w
 296               		.cfi_def_cfa_offset 32
 297 012e 4E93      		jsr (%a3)
 298               	.LVL31:
  63:csys68k.c     ****     for (j = 0; j < 300; j++);
 299               		.loc 1 63 13 is_stmt 0 view .LVU80
 300 0130 122A FFFF 		move.b -1(%a2),%d1
 301 0134 508F      		addq.l #8,%sp
 302               		.cfi_def_cfa_offset 24
  63:csys68k.c     ****     for (j = 0; j < 300; j++);
 303               		.loc 1 63 5 is_stmt 1 view .LVU81
 304 0136 2F02      		move.l %d2,-(%sp)
 305               		.cfi_def_cfa_offset 28
 306 0138 0281 0000 		and.l #255,%d1
 306      00FF 
 307 013e 2F01      		move.l %d1,-(%sp)
 308               		.cfi_def_cfa_offset 32
 309 0140 4E93      		jsr (%a3)
 310               	.LVL32:
  64:csys68k.c     ****   }
 311               		.loc 1 64 5 view .LVU82
  64:csys68k.c     ****   }
 312               		.loc 1 64 19 view .LVU83
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 313               		.loc 1 59 28 view .LVU84
  59:csys68k.c     ****     if (*(buf + i) == '\n') {
 314               		.loc 1 59 17 view .LVU85
 315 0142 508F      		addq.l #8,%sp
 316               		.cfi_def_cfa_offset 24
 317 0144 B68A      		cmp.l %a2,%d3
 318 0146 66BA      		jne .L30
 319 0148 60D2      		jra .L31
 320               	.LVL33:
 321               	.L33:
  57:csys68k.c     **** 
 322               		.loc 1 57 44 is_stmt 0 view .LVU86
 323 014a 7009      		moveq #9,%d0
 324               		.loc 1 67 1 view .LVU87
 325 014c 4CDF 0C1C 		movem.l (%sp)+,#3100
 326 0150 4E75      		rts


 327               		.cfi_endproc
 328               	.LFE1:
 329               		.size	write, .-write
 330               	.Letext0:
 331               		.section	.debug_info,"",@progbits
 332               	.Ldebug_info0:
 333 0000 0000 01F2 		.long	0x1f2
 334 0004 0005      		.word	0x5
 335 0006 01        		.byte	0x1
 336 0007 04        		.byte	0x4
 337 0008 0000 0000 		.long	.Ldebug_abbrev0
 338 000c 07        		.uleb128 0x7
 339 000d 0000 0000 		.long	.LASF12
 340 0011 1D        		.byte	0x1d
 341 0012 0000 0000 		.long	.LASF13
 342 0016 0000 0000 		.long	.LASF14
 343 001a 0000 0000 		.long	.Ltext0
 344 001e 0000 0152 		.long	.Letext0-.Ltext0
 345 0022 0000 0000 		.long	.Ldebug_line0
 346 0026 01        		.uleb128 0x1
 347 0027 01        		.byte	0x1
 348 0028 06        		.byte	0x6
 349 0029 0000 0000 		.long	.LASF0
 350 002d 01        		.uleb128 0x1
 351 002e 01        		.byte	0x1
 352 002f 08        		.byte	0x8
 353 0030 0000 0000 		.long	.LASF1
 354 0034 01        		.uleb128 0x1
 355 0035 02        		.byte	0x2
 356 0036 05        		.byte	0x5
 357 0037 0000 0000 		.long	.LASF2
 358 003b 01        		.uleb128 0x1
 359 003c 02        		.byte	0x2
 360 003d 07        		.byte	0x7
 361 003e 0000 0000 		.long	.LASF3
 362 0042 01        		.uleb128 0x1
 363 0043 04        		.byte	0x4
 364 0044 05        		.byte	0x5
 365 0045 0000 0000 		.long	.LASF4
 366 0049 01        		.uleb128 0x1
 367 004a 04        		.byte	0x4
 368 004b 07        		.byte	0x7
 369 004c 0000 0000 		.long	.LASF5
 370 0050 01        		.uleb128 0x1
 371 0051 08        		.byte	0x8
 372 0052 05        		.byte	0x5
 373 0053 0000 0000 		.long	.LASF6
 374 0057 01        		.uleb128 0x1
 375 0058 08        		.byte	0x8
 376 0059 07        		.byte	0x7
 377 005a 0000 0000 		.long	.LASF7
 378 005e 01        		.uleb128 0x1
 379 005f 0C        		.byte	0xc
 380 0060 04        		.byte	0x4
 381 0061 0000 0000 		.long	.LASF8
 382 0065 01        		.uleb128 0x1
 383 0066 04        		.byte	0x4


 384 0067 07        		.byte	0x7
 385 0068 0000 0000 		.long	.LASF9
 386 006c 08        		.uleb128 0x8
 387 006d 04        		.byte	0x4
 388 006e 05        		.byte	0x5
 389 006f 696E 7400 		.string	"int"
 390 0073 09        		.uleb128 0x9
 391 0074 04        		.byte	0x4
 392 0075 0000 0079 		.long	0x79
 393 0079 01        		.uleb128 0x1
 394 007a 01        		.byte	0x1
 395 007b 06        		.byte	0x6
 396 007c 0000 0000 		.long	.LASF10
 397 0080 0A        		.uleb128 0xa
 398 0081 0000 0000 		.long	.LASF15
 399 0085 01        		.byte	0x1
 400 0086 05        		.byte	0x5
 401 0087 0D        		.byte	0xd
 402 0088 0000 0097 		.long	0x97
 403 008c 05        		.uleb128 0x5
 404 008d 0000 002D 		.long	0x2d
 405 0091 05        		.uleb128 0x5
 406 0092 0000 006C 		.long	0x6c
 407 0096 00        		.byte	0
 408 0097 0B        		.uleb128 0xb
 409 0098 0000 0000 		.long	.LASF16
 410 009c 01        		.byte	0x1
 411 009d 06        		.byte	0x6
 412 009e 0D        		.byte	0xd
 413 009f 0000 0079 		.long	0x79
 414 00a3 0000 00AD 		.long	0xad
 415 00a7 05        		.uleb128 0x5
 416 00a8 0000 006C 		.long	0x6c
 417 00ac 00        		.byte	0
 418 00ad 0C        		.uleb128 0xc
 419 00ae 0000 0000 		.long	.LASF17
 420 00b2 01        		.byte	0x1
 421 00b3 32        		.byte	0x32
 422 00b4 05        		.byte	0x5
 423 00b5 0000 006C 		.long	0x6c
 424 00b9 0000 0000 		.long	.LFB1
 425 00bd 0000 0080 		.long	.LFE1-.LFB1
 426 00c1 01        		.uleb128 0x1
 427 00c2 9C        		.byte	0x9c
 428 00c3 0000 0139 		.long	0x139
 429 00c7 04        		.uleb128 0x4
 430 00c8 6664 00   		.string	"fd"
 431 00cb 32        		.byte	0x32
 432 00cc 10        		.byte	0x10
 433 00cd 0000 006C 		.long	0x6c
 434 00d1 02        		.uleb128 0x2
 435 00d2 91        		.byte	0x91
 436 00d3 00        		.sleb128 0
 437 00d4 04        		.uleb128 0x4
 438 00d5 6275 6600 		.string	"buf"
 439 00d9 32        		.byte	0x32
 440 00da 1A        		.byte	0x1a


 441 00db 0000 0073 		.long	0x73
 442 00df 02        		.uleb128 0x2
 443 00e0 91        		.byte	0x91
 444 00e1 04        		.sleb128 4
 445 00e2 06        		.uleb128 0x6
 446 00e3 0000 0000 		.long	.LASF11
 447 00e7 32        		.byte	0x32
 448 00e8 23        		.byte	0x23
 449 00e9 0000 006C 		.long	0x6c
 450 00ed 02        		.uleb128 0x2
 451 00ee 91        		.byte	0x91
 452 00ef 08        		.sleb128 8
 453 00f0 03        		.uleb128 0x3
 454 00f1 6900      		.string	"i"
 455 00f3 34        		.byte	0x34
 456 00f4 07        		.byte	0x7
 457 00f5 0000 006C 		.long	0x6c
 458 00f9 0000 0000 		.long	.LLST3
 459 00fd 0000 0000 		.long	.LVUS3
 460 0101 0D        		.uleb128 0xd
 461 0102 6A00      		.string	"j"
 462 0104 01        		.byte	0x1
 463 0105 34        		.byte	0x34
 464 0106 0A        		.byte	0xa
 465 0107 0000 006C 		.long	0x6c
 466 010b 03        		.uleb128 0x3
 467 010c 6368 00   		.string	"ch"
 468 010f 35        		.byte	0x35
 469 0110 07        		.byte	0x7
 470 0111 0000 006C 		.long	0x6c
 471 0115 0000 0000 		.long	.LLST4
 472 0119 0000 0000 		.long	.LVUS4
 473 011d 02        		.uleb128 0x2
 474 011e 0000 0000 		.long	.LVL27
 475 0122 0000 0080 		.long	0x80
 476 0126 02        		.uleb128 0x2
 477 0127 0000 0000 		.long	.LVL31
 478 012b 0000 0080 		.long	0x80
 479 012f 02        		.uleb128 0x2
 480 0130 0000 0000 		.long	.LVL32
 481 0134 0000 0080 		.long	0x80
 482 0138 00        		.byte	0
 483 0139 0E        		.uleb128 0xe
 484 013a 0000 0000 		.long	.LASF18
 485 013e 01        		.byte	0x1
 486 013f 08        		.byte	0x8
 487 0140 05        		.byte	0x5
 488 0141 0000 006C 		.long	0x6c
 489 0145 0000 0000 		.long	.LFB0
 490 0149 0000 00D2 		.long	.LFE0-.LFB0
 491 014d 01        		.uleb128 0x1
 492 014e 9C        		.byte	0x9c
 493 014f 04        		.uleb128 0x4
 494 0150 6664 00   		.string	"fd"
 495 0153 08        		.byte	0x8
 496 0154 0E        		.byte	0xe
 497 0155 0000 006C 		.long	0x6c


 498 0159 02        		.uleb128 0x2
 499 015a 91        		.byte	0x91
 500 015b 00        		.sleb128 0
 501 015c 04        		.uleb128 0x4
 502 015d 6275 6600 		.string	"buf"
 503 0161 08        		.byte	0x8
 504 0162 18        		.byte	0x18
 505 0163 0000 0073 		.long	0x73
 506 0167 02        		.uleb128 0x2
 507 0168 91        		.byte	0x91
 508 0169 04        		.sleb128 4
 509 016a 06        		.uleb128 0x6
 510 016b 0000 0000 		.long	.LASF11
 511 016f 08        		.byte	0x8
 512 0170 21        		.byte	0x21
 513 0171 0000 006C 		.long	0x6c
 514 0175 02        		.uleb128 0x2
 515 0176 91        		.byte	0x91
 516 0177 08        		.sleb128 8
 517 0178 03        		.uleb128 0x3
 518 0179 6300      		.string	"c"
 519 017b 0A        		.byte	0xa
 520 017c 08        		.byte	0x8
 521 017d 0000 0079 		.long	0x79
 522 0181 0000 0000 		.long	.LLST0
 523 0185 0000 0000 		.long	.LVUS0
 524 0189 03        		.uleb128 0x3
 525 018a 6900      		.string	"i"
 526 018c 0B        		.byte	0xb
 527 018d 08        		.byte	0x8
 528 018e 0000 006C 		.long	0x6c
 529 0192 0000 0000 		.long	.LLST1
 530 0196 0000 0000 		.long	.LVUS1
 531 019a 03        		.uleb128 0x3
 532 019b 6368 00   		.string	"ch"
 533 019e 0C        		.byte	0xc
 534 019f 07        		.byte	0x7
 535 01a0 0000 006C 		.long	0x6c
 536 01a4 0000 0000 		.long	.LLST2
 537 01a8 0000 0000 		.long	.LVUS2
 538 01ac 02        		.uleb128 0x2
 539 01ad 0000 0000 		.long	.LVL3
 540 01b1 0000 0097 		.long	0x97
 541 01b5 02        		.uleb128 0x2
 542 01b6 0000 0000 		.long	.LVL6
 543 01ba 0000 0080 		.long	0x80
 544 01be 02        		.uleb128 0x2
 545 01bf 0000 0000 		.long	.LVL10
 546 01c3 0000 0097 		.long	0x97
 547 01c7 02        		.uleb128 0x2
 548 01c8 0000 0000 		.long	.LVL12
 549 01cc 0000 0080 		.long	0x80
 550 01d0 02        		.uleb128 0x2
 551 01d1 0000 0000 		.long	.LVL13
 552 01d5 0000 0080 		.long	0x80
 553 01d9 02        		.uleb128 0x2
 554 01da 0000 0000 		.long	.LVL18


 555 01de 0000 0080 		.long	0x80
 556 01e2 02        		.uleb128 0x2
 557 01e3 0000 0000 		.long	.LVL19
 558 01e7 0000 0080 		.long	0x80
 559 01eb 02        		.uleb128 0x2
 560 01ec 0000 0000 		.long	.LVL20
 561 01f0 0000 0080 		.long	0x80
 562 01f4 00        		.byte	0
 563 01f5 00        		.byte	0
 564               		.section	.debug_abbrev,"",@progbits
 565               	.Ldebug_abbrev0:
 566 0000 01        		.uleb128 0x1
 567 0001 24        		.uleb128 0x24
 568 0002 00        		.byte	0
 569 0003 0B        		.uleb128 0xb
 570 0004 0B        		.uleb128 0xb
 571 0005 3E        		.uleb128 0x3e
 572 0006 0B        		.uleb128 0xb
 573 0007 03        		.uleb128 0x3
 574 0008 0E        		.uleb128 0xe
 575 0009 00        		.byte	0
 576 000a 00        		.byte	0
 577 000b 02        		.uleb128 0x2
 578 000c 48        		.uleb128 0x48
 579 000d 00        		.byte	0
 580 000e 7D        		.uleb128 0x7d
 581 000f 01        		.uleb128 0x1
 582 0010 7F        		.uleb128 0x7f
 583 0011 13        		.uleb128 0x13
 584 0012 00        		.byte	0
 585 0013 00        		.byte	0
 586 0014 03        		.uleb128 0x3
 587 0015 34        		.uleb128 0x34
 588 0016 00        		.byte	0
 589 0017 03        		.uleb128 0x3
 590 0018 08        		.uleb128 0x8
 591 0019 3A        		.uleb128 0x3a
 592 001a 21        		.uleb128 0x21
 593 001b 01        		.sleb128 1
 594 001c 3B        		.uleb128 0x3b
 595 001d 0B        		.uleb128 0xb
 596 001e 39        		.uleb128 0x39
 597 001f 0B        		.uleb128 0xb
 598 0020 49        		.uleb128 0x49
 599 0021 13        		.uleb128 0x13
 600 0022 02        		.uleb128 0x2
 601 0023 17        		.uleb128 0x17
 602 0024 B742      		.uleb128 0x2137
 603 0026 17        		.uleb128 0x17
 604 0027 00        		.byte	0
 605 0028 00        		.byte	0
 606 0029 04        		.uleb128 0x4
 607 002a 05        		.uleb128 0x5
 608 002b 00        		.byte	0
 609 002c 03        		.uleb128 0x3
 610 002d 08        		.uleb128 0x8
 611 002e 3A        		.uleb128 0x3a


 612 002f 21        		.uleb128 0x21
 613 0030 01        		.sleb128 1
 614 0031 3B        		.uleb128 0x3b
 615 0032 0B        		.uleb128 0xb
 616 0033 39        		.uleb128 0x39
 617 0034 0B        		.uleb128 0xb
 618 0035 49        		.uleb128 0x49
 619 0036 13        		.uleb128 0x13
 620 0037 02        		.uleb128 0x2
 621 0038 18        		.uleb128 0x18
 622 0039 00        		.byte	0
 623 003a 00        		.byte	0
 624 003b 05        		.uleb128 0x5
 625 003c 05        		.uleb128 0x5
 626 003d 00        		.byte	0
 627 003e 49        		.uleb128 0x49
 628 003f 13        		.uleb128 0x13
 629 0040 00        		.byte	0
 630 0041 00        		.byte	0
 631 0042 06        		.uleb128 0x6
 632 0043 05        		.uleb128 0x5
 633 0044 00        		.byte	0
 634 0045 03        		.uleb128 0x3
 635 0046 0E        		.uleb128 0xe
 636 0047 3A        		.uleb128 0x3a
 637 0048 21        		.uleb128 0x21
 638 0049 01        		.sleb128 1
 639 004a 3B        		.uleb128 0x3b
 640 004b 0B        		.uleb128 0xb
 641 004c 39        		.uleb128 0x39
 642 004d 0B        		.uleb128 0xb
 643 004e 49        		.uleb128 0x49
 644 004f 13        		.uleb128 0x13
 645 0050 02        		.uleb128 0x2
 646 0051 18        		.uleb128 0x18
 647 0052 00        		.byte	0
 648 0053 00        		.byte	0
 649 0054 07        		.uleb128 0x7
 650 0055 11        		.uleb128 0x11
 651 0056 01        		.byte	0x1
 652 0057 25        		.uleb128 0x25
 653 0058 0E        		.uleb128 0xe
 654 0059 13        		.uleb128 0x13
 655 005a 0B        		.uleb128 0xb
 656 005b 03        		.uleb128 0x3
 657 005c 0E        		.uleb128 0xe
 658 005d 1B        		.uleb128 0x1b
 659 005e 0E        		.uleb128 0xe
 660 005f 11        		.uleb128 0x11
 661 0060 01        		.uleb128 0x1
 662 0061 12        		.uleb128 0x12
 663 0062 06        		.uleb128 0x6
 664 0063 10        		.uleb128 0x10
 665 0064 17        		.uleb128 0x17
 666 0065 00        		.byte	0
 667 0066 00        		.byte	0
 668 0067 08        		.uleb128 0x8


 669 0068 24        		.uleb128 0x24
 670 0069 00        		.byte	0
 671 006a 0B        		.uleb128 0xb
 672 006b 0B        		.uleb128 0xb
 673 006c 3E        		.uleb128 0x3e
 674 006d 0B        		.uleb128 0xb
 675 006e 03        		.uleb128 0x3
 676 006f 08        		.uleb128 0x8
 677 0070 00        		.byte	0
 678 0071 00        		.byte	0
 679 0072 09        		.uleb128 0x9
 680 0073 0F        		.uleb128 0xf
 681 0074 00        		.byte	0
 682 0075 0B        		.uleb128 0xb
 683 0076 0B        		.uleb128 0xb
 684 0077 49        		.uleb128 0x49
 685 0078 13        		.uleb128 0x13
 686 0079 00        		.byte	0
 687 007a 00        		.byte	0
 688 007b 0A        		.uleb128 0xa
 689 007c 2E        		.uleb128 0x2e
 690 007d 01        		.byte	0x1
 691 007e 3F        		.uleb128 0x3f
 692 007f 19        		.uleb128 0x19
 693 0080 03        		.uleb128 0x3
 694 0081 0E        		.uleb128 0xe
 695 0082 3A        		.uleb128 0x3a
 696 0083 0B        		.uleb128 0xb
 697 0084 3B        		.uleb128 0x3b
 698 0085 0B        		.uleb128 0xb
 699 0086 39        		.uleb128 0x39
 700 0087 0B        		.uleb128 0xb
 701 0088 27        		.uleb128 0x27
 702 0089 19        		.uleb128 0x19
 703 008a 3C        		.uleb128 0x3c
 704 008b 19        		.uleb128 0x19
 705 008c 01        		.uleb128 0x1
 706 008d 13        		.uleb128 0x13
 707 008e 00        		.byte	0
 708 008f 00        		.byte	0
 709 0090 0B        		.uleb128 0xb
 710 0091 2E        		.uleb128 0x2e
 711 0092 01        		.byte	0x1
 712 0093 3F        		.uleb128 0x3f
 713 0094 19        		.uleb128 0x19
 714 0095 03        		.uleb128 0x3
 715 0096 0E        		.uleb128 0xe
 716 0097 3A        		.uleb128 0x3a
 717 0098 0B        		.uleb128 0xb
 718 0099 3B        		.uleb128 0x3b
 719 009a 0B        		.uleb128 0xb
 720 009b 39        		.uleb128 0x39
 721 009c 0B        		.uleb128 0xb
 722 009d 27        		.uleb128 0x27
 723 009e 19        		.uleb128 0x19
 724 009f 49        		.uleb128 0x49
 725 00a0 13        		.uleb128 0x13


 726 00a1 3C        		.uleb128 0x3c
 727 00a2 19        		.uleb128 0x19
 728 00a3 01        		.uleb128 0x1
 729 00a4 13        		.uleb128 0x13
 730 00a5 00        		.byte	0
 731 00a6 00        		.byte	0
 732 00a7 0C        		.uleb128 0xc
 733 00a8 2E        		.uleb128 0x2e
 734 00a9 01        		.byte	0x1
 735 00aa 3F        		.uleb128 0x3f
 736 00ab 19        		.uleb128 0x19
 737 00ac 03        		.uleb128 0x3
 738 00ad 0E        		.uleb128 0xe
 739 00ae 3A        		.uleb128 0x3a
 740 00af 0B        		.uleb128 0xb
 741 00b0 3B        		.uleb128 0x3b
 742 00b1 0B        		.uleb128 0xb
 743 00b2 39        		.uleb128 0x39
 744 00b3 0B        		.uleb128 0xb
 745 00b4 27        		.uleb128 0x27
 746 00b5 19        		.uleb128 0x19
 747 00b6 49        		.uleb128 0x49
 748 00b7 13        		.uleb128 0x13
 749 00b8 11        		.uleb128 0x11
 750 00b9 01        		.uleb128 0x1
 751 00ba 12        		.uleb128 0x12
 752 00bb 06        		.uleb128 0x6
 753 00bc 40        		.uleb128 0x40
 754 00bd 18        		.uleb128 0x18
 755 00be 7A        		.uleb128 0x7a
 756 00bf 19        		.uleb128 0x19
 757 00c0 01        		.uleb128 0x1
 758 00c1 13        		.uleb128 0x13
 759 00c2 00        		.byte	0
 760 00c3 00        		.byte	0
 761 00c4 0D        		.uleb128 0xd
 762 00c5 34        		.uleb128 0x34
 763 00c6 00        		.byte	0
 764 00c7 03        		.uleb128 0x3
 765 00c8 08        		.uleb128 0x8
 766 00c9 3A        		.uleb128 0x3a
 767 00ca 0B        		.uleb128 0xb
 768 00cb 3B        		.uleb128 0x3b
 769 00cc 0B        		.uleb128 0xb
 770 00cd 39        		.uleb128 0x39
 771 00ce 0B        		.uleb128 0xb
 772 00cf 49        		.uleb128 0x49
 773 00d0 13        		.uleb128 0x13
 774 00d1 00        		.byte	0
 775 00d2 00        		.byte	0
 776 00d3 0E        		.uleb128 0xe
 777 00d4 2E        		.uleb128 0x2e
 778 00d5 01        		.byte	0x1
 779 00d6 3F        		.uleb128 0x3f
 780 00d7 19        		.uleb128 0x19
 781 00d8 03        		.uleb128 0x3
 782 00d9 0E        		.uleb128 0xe


 783 00da 3A        		.uleb128 0x3a
 784 00db 0B        		.uleb128 0xb
 785 00dc 3B        		.uleb128 0x3b
 786 00dd 0B        		.uleb128 0xb
 787 00de 39        		.uleb128 0x39
 788 00df 0B        		.uleb128 0xb
 789 00e0 27        		.uleb128 0x27
 790 00e1 19        		.uleb128 0x19
 791 00e2 49        		.uleb128 0x49
 792 00e3 13        		.uleb128 0x13
 793 00e4 11        		.uleb128 0x11
 794 00e5 01        		.uleb128 0x1
 795 00e6 12        		.uleb128 0x12
 796 00e7 06        		.uleb128 0x6
 797 00e8 40        		.uleb128 0x40
 798 00e9 18        		.uleb128 0x18
 799 00ea 7A        		.uleb128 0x7a
 800 00eb 19        		.uleb128 0x19
 801 00ec 00        		.byte	0
 802 00ed 00        		.byte	0
 803 00ee 00        		.byte	0
 804               		.section	.debug_loclists,"",@progbits
 805 0000 0000 0116 		.long	.Ldebug_loc3-.Ldebug_loc2
 806               	.Ldebug_loc2:
 807 0004 0005      		.word	0x5
 808 0006 04        		.byte	0x4
 809 0007 00        		.byte	0
 810 0008 0000 0000 		.long	0
 811               	.Ldebug_loc0:
 812               	.LVUS3:
 813 000c 01        		.uleb128 .LVU66
 814 000d 00        		.uleb128 .LVU67
 815 000e 00        		.uleb128 .LVU67
 816 000f 00        		.uleb128 .LVU69
 817 0010 00        		.uleb128 .LVU69
 818 0011 03        		.uleb128 .LVU74
 819 0012 03        		.uleb128 .LVU74
 820 0013 00        		.uleb128 .LVU75
 821 0014 00        		.uleb128 .LVU79
 822 0015 03        		.uleb128 .LVU85
 823 0016 03        		.uleb128 .LVU85
 824 0017 00        		.uleb128 .LVU86
 825               	.LLST3:
 826 0018 04        		.byte	0x4
 827 0019 F001      		.uleb128 .LVL24-.Ltext0
 828 001b 8202      		.uleb128 .LVL25-.Ltext0
 829 001d 02        		.uleb128 0x2
 830 001e 30        		.byte	0x30
 831 001f 9F        		.byte	0x9f
 832 0020 04        		.byte	0x4
 833 0021 8202      		.uleb128 .LVL25-.Ltext0
 834 0023 8402      		.uleb128 .LVL26-.Ltext0
 835 0025 07        		.uleb128 0x7
 836 0026 7A        		.byte	0x7a
 837 0027 00        		.sleb128 0
 838 0028 91        		.byte	0x91
 839 0029 74        		.sleb128 -12


 840 002a 06        		.byte	0x6
 841 002b 1C        		.byte	0x1c
 842 002c 9F        		.byte	0x9f
 843 002d 04        		.byte	0x4
 844 002e 8402      		.uleb128 .LVL26-.Ltext0
 845 0030 9602      		.uleb128 .LVL27-.Ltext0
 846 0032 08        		.uleb128 0x8
 847 0033 91        		.byte	0x91
 848 0034 74        		.sleb128 -12
 849 0035 06        		.byte	0x6
 850 0036 20        		.byte	0x20
 851 0037 7A        		.byte	0x7a
 852 0038 00        		.sleb128 0
 853 0039 22        		.byte	0x22
 854 003a 9F        		.byte	0x9f
 855 003b 04        		.byte	0x4
 856 003c 9602      		.uleb128 .LVL27-.Ltext0
 857 003e 9C02      		.uleb128 .LVL28-.Ltext0
 858 0040 07        		.uleb128 0x7
 859 0041 7A        		.byte	0x7a
 860 0042 00        		.sleb128 0
 861 0043 91        		.byte	0x91
 862 0044 74        		.sleb128 -12
 863 0045 06        		.byte	0x6
 864 0046 1C        		.byte	0x1c
 865 0047 9F        		.byte	0x9f
 866 0048 04        		.byte	0x4
 867 0049 A802      		.uleb128 .LVL30-.Ltext0
 868 004b C202      		.uleb128 .LVL32-.Ltext0
 869 004d 08        		.uleb128 0x8
 870 004e 91        		.byte	0x91
 871 004f 74        		.sleb128 -12
 872 0050 06        		.byte	0x6
 873 0051 20        		.byte	0x20
 874 0052 7A        		.byte	0x7a
 875 0053 00        		.sleb128 0
 876 0054 22        		.byte	0x22
 877 0055 9F        		.byte	0x9f
 878 0056 04        		.byte	0x4
 879 0057 C202      		.uleb128 .LVL32-.Ltext0
 880 0059 CA02      		.uleb128 .LVL33-.Ltext0
 881 005b 07        		.uleb128 0x7
 882 005c 7A        		.byte	0x7a
 883 005d 00        		.sleb128 0
 884 005e 91        		.byte	0x91
 885 005f 74        		.sleb128 -12
 886 0060 06        		.byte	0x6
 887 0061 1C        		.byte	0x1c
 888 0062 9F        		.byte	0x9f
 889 0063 00        		.byte	0
 890               	.LVUS4:
 891 0064 00        		.uleb128 .LVU65
 892 0065 00        		.uleb128 .LVU77
 893 0066 00        		.uleb128 .LVU79
 894 0067 00        		.uleb128 .LVU86
 895               	.LLST4:
 896 0068 04        		.byte	0x4


 897 0069 F001      		.uleb128 .LVL24-.Ltext0
 898 006b A202      		.uleb128 .LVL29-.Ltext0
 899 006d 01        		.uleb128 0x1
 900 006e 52        		.byte	0x52
 901 006f 04        		.byte	0x4
 902 0070 A802      		.uleb128 .LVL30-.Ltext0
 903 0072 CA02      		.uleb128 .LVL33-.Ltext0
 904 0074 01        		.uleb128 0x1
 905 0075 52        		.byte	0x52
 906 0076 00        		.byte	0
 907               	.LVUS0:
 908 0077 00        		.uleb128 .LVU15
 909 0078 00        		.uleb128 .LVU21
 910 0079 00        		.uleb128 .LVU21
 911 007a 00        		.uleb128 .LVU31
 912 007b 00        		.uleb128 .LVU31
 913 007c 00        		.uleb128 .LVU34
 914 007d 00        		.uleb128 .LVU34
 915 007e 00        		.uleb128 .LVU42
 916 007f 00        		.uleb128 .LVU43
 917 0080 00        		.uleb128 .LVU47
 918 0081 00        		.uleb128 .LVU47
 919 0082 00        		.uleb128 .LVU54
 920               	.LLST0:
 921 0083 04        		.byte	0x4
 922 0084 46        		.uleb128 .LVL4-.Ltext0
 923 0085 5E        		.uleb128 .LVL5-.Ltext0
 924 0086 01        		.uleb128 0x1
 925 0087 50        		.byte	0x50
 926 0088 04        		.byte	0x4
 927 0089 5E        		.uleb128 .LVL5-.Ltext0
 928 008a 76        		.uleb128 .LVL11-.Ltext0
 929 008b 01        		.uleb128 0x1
 930 008c 52        		.byte	0x52
 931 008d 04        		.byte	0x4
 932 008e 76        		.uleb128 .LVL11-.Ltext0
 933 008f 8501      		.uleb128 .LVL12-1-.Ltext0
 934 0091 01        		.uleb128 0x1
 935 0092 50        		.byte	0x50
 936 0093 04        		.byte	0x4
 937 0094 8501      		.uleb128 .LVL12-1-.Ltext0
 938 0096 A001      		.uleb128 .LVL15-.Ltext0
 939 0098 01        		.uleb128 0x1
 940 0099 52        		.byte	0x52
 941 009a 04        		.byte	0x4
 942 009b A201      		.uleb128 .LVL16-.Ltext0
 943 009d AF01      		.uleb128 .LVL18-1-.Ltext0
 944 009f 01        		.uleb128 0x1
 945 00a0 50        		.byte	0x50
 946 00a1 04        		.byte	0x4
 947 00a2 AF01      		.uleb128 .LVL18-1-.Ltext0
 948 00a4 CC01      		.uleb128 .LVL22-.Ltext0
 949 00a6 01        		.uleb128 0x1
 950 00a7 52        		.byte	0x52
 951 00a8 00        		.byte	0
 952               	.LVUS1:
 953 00a9 01        		.uleb128 .LVU10


 954 00aa 00        		.uleb128 .LVU13
 955 00ab 00        		.uleb128 .LVU13
 956 00ac 00        		.uleb128 .LVU26
 957 00ad 00        		.uleb128 .LVU26
 958 00ae 00        		.uleb128 .LVU27
 959 00af 00        		.uleb128 .LVU29
 960 00b0 00        		.uleb128 .LVU40
 961 00b1 00        		.uleb128 .LVU40
 962 00b2 00        		.uleb128 .LVU42
 963 00b3 00        		.uleb128 .LVU42
 964 00b4 00        		.uleb128 .LVU43
 965 00b5 00        		.uleb128 .LVU43
 966 00b6 00        		.uleb128 .LVU46
 967 00b7 00        		.uleb128 .LVU46
 968 00b8 01        		.uleb128 .LVU50
 969 00b9 01        		.uleb128 .LVU50
 970 00ba 02        		.uleb128 .LVU51
 971 00bb 02        		.uleb128 .LVU51
 972 00bc 00        		.uleb128 .LVU52
 973               	.LLST1:
 974 00bd 04        		.byte	0x4
 975 00be 2E        		.uleb128 .LVL1-.Ltext0
 976 00bf 40        		.uleb128 .LVL2-.Ltext0
 977 00c0 02        		.uleb128 0x2
 978 00c1 30        		.byte	0x30
 979 00c2 9F        		.byte	0x9f
 980 00c3 04        		.byte	0x4
 981 00c4 40        		.uleb128 .LVL2-.Ltext0
 982 00c5 6A        		.uleb128 .LVL7-.Ltext0
 983 00c6 01        		.uleb128 0x1
 984 00c7 53        		.byte	0x53
 985 00c8 04        		.byte	0x4
 986 00c9 6A        		.uleb128 .LVL7-.Ltext0
 987 00ca 6C        		.uleb128 .LVL8-.Ltext0
 988 00cb 03        		.uleb128 0x3
 989 00cc 73        		.byte	0x73
 990 00cd 7F        		.sleb128 -1
 991 00ce 9F        		.byte	0x9f
 992 00cf 04        		.byte	0x4
 993 00d0 70        		.uleb128 .LVL9-.Ltext0
 994 00d1 9601      		.uleb128 .LVL14-.Ltext0
 995 00d3 01        		.uleb128 0x1
 996 00d4 53        		.byte	0x53
 997 00d5 04        		.byte	0x4
 998 00d6 9601      		.uleb128 .LVL14-.Ltext0
 999 00d8 A001      		.uleb128 .LVL15-.Ltext0
 1000 00da 03        		.uleb128 0x3
 1001 00db 73        		.byte	0x73
 1002 00dc 7F        		.sleb128 -1
 1003 00dd 9F        		.byte	0x9f
 1004 00de 04        		.byte	0x4
 1005 00df A001      		.uleb128 .LVL15-.Ltext0
 1006 00e1 A201      		.uleb128 .LVL16-.Ltext0
 1007 00e3 03        		.uleb128 0x3
 1008 00e4 70        		.byte	0x70
 1009 00e5 7F        		.sleb128 -1
 1010 00e6 9F        		.byte	0x9f


 1011 00e7 04        		.byte	0x4
 1012 00e8 A201      		.uleb128 .LVL16-.Ltext0
 1013 00ea A801      		.uleb128 .LVL17-.Ltext0
 1014 00ec 01        		.uleb128 0x1
 1015 00ed 53        		.byte	0x53
 1016 00ee 04        		.byte	0x4
 1017 00ef A801      		.uleb128 .LVL17-.Ltext0
 1018 00f1 C001      		.uleb128 .LVL20-.Ltext0
 1019 00f3 03        		.uleb128 0x3
 1020 00f4 73        		.byte	0x73
 1021 00f5 01        		.sleb128 1
 1022 00f6 9F        		.byte	0x9f
 1023 00f7 04        		.byte	0x4
 1024 00f8 C001      		.uleb128 .LVL20-.Ltext0
 1025 00fa C001      		.uleb128 .LVL20-.Ltext0
 1026 00fc 01        		.uleb128 0x1
 1027 00fd 53        		.byte	0x53
 1028 00fe 04        		.byte	0x4
 1029 00ff C001      		.uleb128 .LVL20-.Ltext0
 1030 0101 C401      		.uleb128 .LVL21-.Ltext0
 1031 0103 03        		.uleb128 0x3
 1032 0104 73        		.byte	0x73
 1033 0105 7F        		.sleb128 -1
 1034 0106 9F        		.byte	0x9f
 1035 0107 00        		.byte	0
 1036               	.LVUS2:
 1037 0108 00        		.uleb128 .LVU9
 1038 0109 00        		.uleb128 .LVU42
 1039 010a 00        		.uleb128 .LVU43
 1040 010b 00        		.uleb128 .LVU54
 1041               	.LLST2:
 1042 010c 04        		.byte	0x4
 1043 010d 2E        		.uleb128 .LVL1-.Ltext0
 1044 010e A001      		.uleb128 .LVL15-.Ltext0
 1045 0110 01        		.uleb128 0x1
 1046 0111 54        		.byte	0x54
 1047 0112 04        		.byte	0x4
 1048 0113 A201      		.uleb128 .LVL16-.Ltext0
 1049 0115 CC01      		.uleb128 .LVL22-.Ltext0
 1050 0117 01        		.uleb128 0x1
 1051 0118 54        		.byte	0x54
 1052 0119 00        		.byte	0
 1053               	.Ldebug_loc3:
 1054               		.section	.debug_aranges,"",@progbits
 1055 0000 0000 001C 		.long	0x1c
 1056 0004 0002      		.word	0x2
 1057 0006 0000 0000 		.long	.Ldebug_info0
 1058 000a 04        		.byte	0x4
 1059 000b 00        		.byte	0
 1060 000c 0000      		.word	0
 1061 000e 0000      		.word	0
 1062 0010 0000 0000 		.long	.Ltext0
 1063 0014 0000 0152 		.long	.Letext0-.Ltext0
 1064 0018 0000 0000 		.long	0
 1065 001c 0000 0000 		.long	0
 1066               		.section	.debug_line,"",@progbits
 1067               	.Ldebug_line0:


 1068 0000 0000 015C 		.section	.debug_str,"MS",@progbits,1
 1068      0003 0000 
 1068      0020 0201 
 1068      FB0E 0D00 
 1068      0101 0101 
 1069               	.LASF6:
 1070 0000 6C6F 6E67 		.string	"long long int"
 1070      206C 6F6E 
 1070      6720 696E 
 1070      7400 
 1071               	.LASF9:
 1072 000e 756E 7369 		.string	"unsigned int"
 1072      676E 6564 
 1072      2069 6E74 
 1072      00
 1073               	.LASF12:
 1074 001b 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 1074      4331 3720 
 1074      3131 2E34 
 1074      2E30 202D 
 1074      6D63 7075 
 1075               	.LASF14:
 1076 005f 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/3-1_stream-assignment_compiled"
 1076      652F 7374 
 1076      7564 656E 
 1076      7473 2F35 
 1076      3233 3335 
 1077               	.LASF5:
 1078 00a5 6C6F 6E67 		.string	"long unsigned int"
 1078      2075 6E73 
 1078      6967 6E65 
 1078      6420 696E 
 1078      7400 
 1079               	.LASF7:
 1080 00b7 6C6F 6E67 		.string	"long long unsigned int"
 1080      206C 6F6E 
 1080      6720 756E 
 1080      7369 676E 
 1080      6564 2069 
 1081               	.LASF13:
 1082 00ce 6373 7973 		.string	"csys68k.c"
 1082      3638 6B2E 
 1082      6300 
 1083               	.LASF17:
 1084 00d8 7772 6974 		.string	"write"
 1084      6500 
 1085               	.LASF1:
 1086 00de 756E 7369 		.string	"unsigned char"
 1086      676E 6564 
 1086      2063 6861 
 1086      7200 
 1087               	.LASF10:
 1088 00ec 6368 6172 		.string	"char"
 1088      00
 1089               	.LASF4:
 1090 00f1 6C6F 6E67 		.string	"long int"
 1090      2069 6E74 


 1090      00
 1091               	.LASF11:
 1092 00fa 6E62 7974 		.string	"nbytes"
 1092      6573 00
 1093               	.LASF18:
 1094 0101 7265 6164 		.string	"read"
 1094      00
 1095               	.LASF3:
 1096 0106 7368 6F72 		.string	"short unsigned int"
 1096      7420 756E 
 1096      7369 676E 
 1096      6564 2069 
 1096      6E74 00
 1097               	.LASF0:
 1098 0119 7369 676E 		.string	"signed char"
 1098      6564 2063 
 1098      6861 7200 
 1099               	.LASF8:
 1100 0125 6C6F 6E67 		.string	"long double"
 1100      2064 6F75 
 1100      626C 6500 
 1101               	.LASF16:
 1102 0131 696E 6279 		.string	"inbyte"
 1102      7465 00
 1103               	.LASF2:
 1104 0138 7368 6F72 		.string	"short int"
 1104      7420 696E 
 1104      7400 
 1105               	.LASF15:
 1106 0142 6F75 7462 		.string	"outbyte"
 1106      7974 6500 
 1107               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global inbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	inbyte:
   8 0000 48E7 70C0 		movem.l %a0-%a1/%d1-%d3, -(%SP)	/* STORE REGISTERS */


   9 0004 41F9 0000 		lea.l ibDATA, %a0				/* SET ADDRESS OF ibDATA TO a0 */
   9      0000 
  10               	inbyte_loop:
  11               		/* GET THE ARGUMENT OF INBYTE */
  12 000a 7218      		move.l	#24, %d1				/* CALCULATE OFFSET: 6 [Registers] * 4 [BYTES / Register] = 24 [Bytes] */
  13 000c 224F      		move.l	%sp, %a1				/* Note (1/2): This argument is sign-extended to 4 bytes,  */
  14 000e D3C1      		adda.l	%d1, %a1				/* Note (2/2): so, offset is not necessary compared to the inbyte: in theme 2 *
  15               		
  16               		/* SYSCALL: GETSTRING */
  17 0010 7001      		move.l #SYSCALL_NUM_GETSTRING, %D0
  18 0012 2211      		move.l (%a1), %d1         		| ch   = fd
  19 0014 2408      		move.l %a0,   %d2         		| p    = #ibDATA
  20 0016 7601      		move.l #1,    %d3          		| size = 1
  21 0018 4E40      		trap #0
  22               	
  23               		/* FLAG CHECK */
  24 001a 0C80 0000 		cmp.l #0, %d0					/* see if GETSTRING is successful */
  24      0000 
  25 0020 6700 FFE8 		beq inbyte_loop					/* if false, retry */
  26               	
  27               		/* SUCCESS */
  28 0024 1010      		move.b (%a0), %d0				/* copy retuned data to d0 */
  29 0026 13C0 00D0 		move.b %d0, LED7
  29      002F 
  30 002c 4CDF 030E 		movem.l (%SP)+, %a0-%a1/%d1-%d3	/* STORE REGISTERS */
  31 0030 4E75      		rts
  32               	        
  33               	.section .bss
  34               	.even
  35               	
  36               	.global DATA
  37               	ibDATA:
  38 0000 00        		.ds.b 1
  39 0001 00        		.even




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.section .text
   3               	
   4               	.global swtch
   5               	.global pv_handler
   6               	.global init_timer
   7               	.global first_task
   8               	.global P


   9               	.global V
  10               	
  11               	**齊藤　作成**
  12               	********************************************************************************************
  13               	**【機能】
  14               	**Pシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  15               	**Cプログラムから引数（セマフォID）付きで呼び出される
  16               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  17               	********************************************************************************************
  18               	**【レジスタ用途】
  19               	**d0:p_body()のIDとして０を代入
  20               	**d1:セマフォIDを代入
  21               	*********************************************************************************************
  22               	
  23               	.text
  24               	.even
  25               	P:	
  26 0000 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	|レジスタ退避	
  27 0004 7000      		move.l #0,%d0				|d0 = 0
  28 0006 224F      		movea.l	%sp, %a1			|スタックポインタをa1にコピー
  29 0008 7410      		move.l	#16,   %d2			|a1,d1,d2,PC各4ずつ
  30 000a D3C2      		adda.l	%d2,   %a1			|スタックポインタにプラス16
  31 000c 2211      		move.l	(%a1), %d1			|↑その位置の中身(セマフォID)をd1にコピー
  32 000e 4E41      		trap #1						|pv_handlerを呼び出す
  33 0010 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	|レジスタ復帰
  34 0014 4E75      		rts
  35               		
  36               	**齊藤　作成**
  37               	********************************************************************************************
  38               	**【機能】
  39               	**Vシステムコールの入口…Cから呼ばれる関数（サブルーチン）として作
  40               	**Cプログラムから引数（セマフォID）付きで呼び出される
  41               	**中では適切な値をレジスタに置き，TRAP #1 命令を実行する．
  42               	********************************************************************************************
  43               	**【レジスタ用途】
  44               	**d0:v_body()のIDとして1を代入
  45               	**d1:セマフォIDを代入
  46               	*********************************************************************************************
  47               	
  48               	.text
  49               	.even
  50               	V:	
  51 0016 48E7 6040 		movem.l %d1-%d2/%a1,-(%sp)	| レジスタ退避	
  52 001a 7001      		move.l #1,%d0				| d0 = 1
  53 001c 224F      		movea.l	%sp, %a1			| スタックポインタをa1にコピー
  54 001e 7410      		move.l	#16,   %d2			| a1,d1,d2,PC各4ずつ
  55 0020 D3C2      		adda.l	%d2,   %a1			| スタックポインタにプラス16
  56 0022 2211      		move.l	(%a1), %d1			| ↑その位置の中身(セマフォID)をd1にコピー
  57 0024 4E41      		trap #1						| pv_handlerを呼び出す
  58 0026 4CDF 0206 		movem.l (%sp)+,%d1-%d2/%a1	| レジスタ復帰
  59 002a 4E75      		rts
  60               		
  61               	**齊藤作成**
  62               	*****************************************
  63               	**☆P.sとV.s中のtrap#1命令で呼び出される☆
  64               	*****************************************
  65               	**【機能】


  66               	**タスクの切り換え…割り込み処理ルーチンとして作成．
  67               	**関数として呼び出されることはあってはならないが，
  68               	**Cプログラムから関数として見えるようにしておくと，Cプログラム内で
  69               	**参照することができるので，例外ベクタに登録するのが容易である．
  70               	***************************************************************************************************
  71               	**【レジスタ用途】
  72               	**d0:0ならp_body()、1ならv_body()
  73               	**d1:セマフォID
  74               	**両関数とも引数にセマフォIDを取るので、これをスタックに積んだ後サ
  75               	*********************************************************************************************
  76               	.extern p_body
  77               	.extern v_body
  78               	
  79               	.text
  80               	.even
  81               	pv_handler:
  82 002c 40E7      		move.w	%SR, -(%sp)	|現走行レベルの退避	
  83 002e 48E7 8080 		movem.l %d0/%a0, -(%sp)	|レジスタ退避
  84 0032 46FC 2700 		move.w	#0x2700, %SR	|割り込み禁止 走行レベル７
  85               		/*d0の値チェック*/
  86 0036 0C80 0000 		cmp.l #0, %d0
  86      0000 
  87 003c 6700 000C 	    beq SYSCALL_p
  88 0040 0C80 0000 		cmp.l #1, %d0
  88      0001 
  89 0046 6700 000C 		beq SYSCALL_v
  90               	SYSCALL_p:
  91 004a 203C 0000 		move.l #p_body, %d0
  91      0000 
  92 0050 6000 000C 		bra JUMP_pv
  93               	SYSCALL_v:
  94 0054 203C 0000 		move.l #v_body, %d0
  94      0000 
  95 005a 6000 0002 		bra JUMP_pv
  96               	JUMP_pv:	
  97 005e 2040      		movea.l %d0, %a0	
  98 0060 2F01      		move.l %d1,-(%sp)	|セマフォIDをスタックに積む
  99 0062 4E90      		jsr (%a0)			|p_body or v_body にジャンプ
 100               	
 101               	pv_FINISH:
 102 0064 588F      		addq.l #4,%sp		|引数として使われて削除されているのでスタックポインタを
 103 0066 4CDF 0101 		movem.l (%sp)+,%d0/%a0 	|レジスタ復帰
 104 006a 46DF      		move.w	(%sp)+, %SR	|旧走行レベルの回復
 105 006c 4E73      		rte
 106               		
 107               	.extern task_tab
 108               	.extern curr_task
 109               	.extern next_task
 110               	
 111               	
 112               	swtch:
 113               	*********
 114               	***1. SR をスタックに積んで，RTE で復帰できるようにする．
 115               	***2. 実行中のタスクのレジスタの退避：
 116               	***D0〜D7，A0〜A6，USP をタスクのスーパバイザスタックに積む．
 117               	***3. SSP の保存:
 118               	***このタスクの TCB の位置を求め， SSP を正しい位置に記録する．


 119               	***4. curr task を変更:
 120               	***curr task に next task を代入する．swtch の呼び出し前にスケジューラ sched 
 121               	***ているため，next task には次に実行するタスク ID がセットされている．
 122               	***5. 次のタスクの SSP の読み出し：
 123               	***新たな curr task の値を元に TCB の位置を割り出して，その中に記録され
 124               	***値を回復する．これにより，スーパバイザスタックが次のタスクのもの
 125               	***6. 次のタスクのレジスタの読み出し：
 126               	***切り換わったスーパバイザスタックから USP，D0〜D7，A0〜A6 の値を回復
 127               	***7. タスク切り替えをおこす:
 128               	***RTE を実行する．
 129               	*********
 130               		***1. SR をスタックに積んで，RTE で復帰できるようにする．
 131 006e 40E7      		move.w %sr, -(%sp)      		/*SRを退避*/
 132               	
 133               		***2. 実行中のタスクのレジスタの退避：
 134 0070 48E7 FFFE 		movem.l %d0-%d7/%a0-%a6, -(%sp)	/*実行中のタスクのレジスタを退避*/
 135 0074 4E6E      		move.l %USP, %a6        		/*USPをa6に転送*/
 136 0076 2F0E      		move.l %a6, -(%sp)      		/*USPを退避*/
 137               	
 138               		***3. SSP の保存:
 139 0078 7000      		move.l #0, %d0  
 140 007a 2039 0000 		move.l curr_task, %d0	/*カレントタスクのIDを転送*/
 140      0000 
 141 0080 41F9 0000 		lea.l task_tab, %a0		/*タスクコントロールブロックの先頭アドレスを転送*/
 141      0000 
 142 0086 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 143 008a D1C0      		adda.l %d0, %a0			/*カレントタスクのTCBのアドレスを求める*/
 144 008c 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 145 008e 208F      		move.l %sp, (%a0)		/*SSPを保存*/
 146               	
 147               		***4. curr task を変更:
 148 0090 43F9 0000 		lea.l curr_task, %a1    /*カレントタスクのアドレスをa1に転送*/
 148      0000 
 149 0096 22B9 0000 		move.l next_task, (%a1) /*next_taskの値をa1に格納*/
 149      0000 
 150               	
 151               		***5. 次のタスクの SSP の読み出し：
 152 009c 2039 0000 		move.l curr_task, %d0   /*カレントタスクのIDを転送*/
 152      0000 
 153 00a2 41F9 0000 		lea.l task_tab, %a0     /*タスクコントロールブロックの先頭アドレスを転送*/
 153      0000 
 154 00a8 C0FC 0014 		mulu #20, %d0			/*カレントIDを20倍*/
 155 00ac D1C0      		adda.l %d0, %a0         /*カレントタスクのTCBのアドレスを求める*/
 156 00ae 5888      		addq.l #4, %a0			/*SSPの位置を計算*/
 157 00b0 2E50      		move.l (%a0), %sp       /*SSPを回復*/
 158               	
 159               		***6. 次のタスクのレジスタの読み出し：
 160 00b2 2C5F      		move.l (%sp)+, %a6     			/*a6を復帰*/
 161 00b4 4E66      		move.l %a6, %USP        		/*USPを回復*/
 162 00b6 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6 /*全レジスタ回復*/
 163               	
 164               		***7. タスク切り替えをおこす:
 165 00ba 4E73      		rte
 166               	
 167               	.extern addq
 168               	.extern sched
 169               	.extern ready


 170               	
 171               	first_task:
 172               	************
 173               	***1. TCB 先頭番地の計算：
 174               	***curr task の TCB のアドレスを見つける．
 175               	***2. USP，SSP の値の回復：
 176               	***このタスクの TCB に記録されている SSP の値およびスーパバイザスタッ
 177               	***る USP の値を回復する．
 178               	***3. 残りの全レジスタの回復：
 179               	***スーパーバイザスタックに積まれている残り 15 本のレジスタの値を回
 180               	***4. ユーザタスクの起動：
 181               	***RTE 命令を実行する．
 182               	************
 183               		***1.TCBの先頭番地の計算
 184 00bc 7200      		move.l #0, %d1        
 185 00be 2239 0000 		move.l curr_task, %d1   /* カレントタスクのIDを転送 */
 185      0000 
 186 00c4 41F9 0000 		lea.l task_tab, %a0     /* タスクコントロールブロックの先頭アドレスを転送 *
 186      0000 
 187 00ca C2FC 0014 		mulu #20, %d1           /* カレントIDを20倍 */
 188 00ce D1C1      		adda.l %d1, %a0         /* カレントタスクのTCBのアドレスを求める */
 189               	
 190               		***2. USP，SSP の値の回復：
 191 00d0 5888      		addq.l #4, %a0          /* SSPの位置を計算 */
 192 00d2 2E50      		move.l (%a0), %sp       /* SSPを回復 */
 193 00d4 2C5F      		move.l (%sp)+, %a6      /* a6を復帰 */
 194 00d6 4E66      		move.l %a6,%USP         /* USPを回復 */
 195               	
 196               		***3. 残りの全レジスタの回復：
 197               		***move.w	(%sp)+, %SR	|旧走行レベルの回復
 198 00d8 4CDF 7FFF 		movem.l (%sp)+, %d0-%d7/%a0-%a6     /*全レジスタ回復*/
 199               	
 200               		***4. ユーザタスクの起動：
 201 00dc 13FC 0038 		move.b #'8',LED7
 201      00D0 002F 
 202 00e4 4E73      		rte     				/*ユーザタスクの起動*/
 203               	
 204               	/*
 205               	; 7. init_timer
 206               	; クロック割り込みルーチンhard_clockをベクトルテーブルに登録するルーチ
 207               	; 
 208               	; 担当：武石
 209               	*/
 210               	
 211               	init_timer:
 212 00e6 48E7 E000 	    movem.l %d0-%d2,-(%sp)
 213               	
 214 00ea 7003      		move.l #SYSCALL_NUM_RESET_TIMER,%d0 | SYSCALL_NUM_RESET_TIMER=3
 215 00ec 4E40      		trap   #0
 216               	
 217 00ee 7004      		move.l #SYSCALL_NUM_SET_TIMER, %d0  | SYSCALL_NUM_SET_TIMER=4
 218 00f0 323C 2710 		move.w #10000, %d1                  | たいたい1秒
 219 00f4 243C 0000 		move.l #hard_clock, %d2
 219      0000 
 220 00fa 4E40      		trap #0
 221               	
 222 00fc 4CDF 0007 	    movem.l (%sp)+, %d0-%d2


 223 0100 4E75      	    rts
 224               	    
 225               	/*
 226               	; 6. hard_clock
 227               	; クロック割り込みルーチン。モニタのシステムコールTRAP #0 を利用して
 228               	; 
 229               	; 担当：武石
 230               	*/
 231               	
 232               	hard_clock:
 233               	    * 1. 実行中のタスクのレジスタの退避
 234 0102 48E7 C040 	    movem.l %d0-%d1/%a1,-(%sp)
 235               	
 236               	    * テキストp22参照
 237 0106 224F      	    movea.l	%sp, %a1
 238 0108 700C      	    move.l #12, %d0     | レジスタ3つ分
 239 010a D3C0      	    adda.l %d0, %a1     | a1 = SR
 240 010c 3211      	    move.w (%a1), %d1   | d1 = (SR)
 241 010e 0241 2000 	    andi.w #0x2000, %d1 | d1 = (SR) & 0x2000
 242 0112 0C41 2000 	    cmpi.w #0x2000, %d1 | 13bit目が1かどうか
 243 0116 6700 0020 	    beq hard_clock_end  | 13bit目が1でなければ(ユーザーモードであれば)終了
 244               	
 245               	    * 2. addq()により, curr_taskをreadyの末尾に追加.
 246 011a 2F39 0000 	    move.l curr_task, -(%sp)
 246      0000 
 247 0120 2F3C 0000 	    move.l #ready, -(%sp)
 247      0000 
 248 0126 4EB9 0000 	    jsr addq
 248      0000 
 249 012c 508F      	    add.l #8, %sp
 250               	
 251               	    * 3. schedを起動.
 252 012e 4EB9 0000 	    jsr sched
 252      0000 
 253               	
 254               	    * 4. swtchを起動.
 255 0134 4EBA FF38 	    jsr swtch
 256               	
 257               	hard_clock_end:
 258               	    * 5. レジスタの復帰.
 259 0138 4CDF 0203 	    movem.l (%sp)+, %d0-%d1/%a1 
 260 013c 4E75      	    rts




   1               	#NO_APP
   2               		.file	"mtk_c.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	init_kernel
   8               		.type	init_kernel, @function
   9               	init_kernel:
  10               	.LFB3:
  11               		.file 1 "mtk_c.c"
   1:mtk_c.c       **** #include <stdio.h>
   2:mtk_c.c       **** #include "mtk_c.h"
   3:mtk_c.c       **** 
   4:mtk_c.c       **** SEMAPHORE_TYPE 	semaphore[NUMSEMAPHORE];	// セマフォの配列
   5:mtk_c.c       **** TCB_TYPE 	    task_tab[NUMTASK + 1];		// タスクコントロールブロックの配列
   6:mtk_c.c       **** STACK_TYPE	    stacks[NUMTASK];		    // タスクスタックの配列
   7:mtk_c.c       **** 
   8:mtk_c.c       **** TASK_ID_TYPE	curr_task;	                // 現在実行中のタスクID
   9:mtk_c.c       **** TASK_ID_TYPE	new_task;	                // 現在登録作業中のタスクID
  10:mtk_c.c       **** TASK_ID_TYPE	next_task;	                // 次に実行するタスクID
  11:mtk_c.c       **** TASK_ID_TYPE	ready;		                // 実行待ちタスクのキュー
  12:mtk_c.c       **** 
  13:mtk_c.c       **** /************************************************************************************
  14:mtk_c.c       **** **カーネルの初期化 init kernel()
  15:mtk_c.c       **** **引数なし．以下のような処理を行う．
  16:mtk_c.c       **** **1. TCB 配列の初期化：すべて空タスクとする
  17:mtk_c.c       **** **2. ready キューの初期化：空（タスク ID=0）とする
  18:mtk_c.c       **** **3. P・V システムコールの割り込み処理ルーチン (pv handler) を TRAP #1 の割
  19:mtk_c.c       **** **4. セマフォの値を初期化する
  20:mtk_c.c       **** ************************************************************************************/
  21:mtk_c.c       **** void init_kernel(){
  12               		.loc 1 21 19 view -0
  13               		.cfi_startproc
  22:mtk_c.c       **** 	int i;
  14               		.loc 1 22 2 view .LVU1
  23:mtk_c.c       **** 	
  24:mtk_c.c       **** 	for(i = 0; i < NUMTASK+1; i++){ 	/* TCB配列の初期化 */	
  15               		.loc 1 24 2 view .LVU2
  16               	.LVL0:
  17               		.loc 1 24 15 view .LVU3
  18 0000 41F9 0000 		lea task_tab,%a0
  18      0000 
  19 0006 203C 0000 		move.l #task_tab+120,%d0
  19      0000 
  20               	.LVL1:
  21               	.L2:
  25:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  22               		.loc 1 25 3 discriminator 3 view .LVU4
  23               		.loc 1 25 25 is_stmt 0 discriminator 3 view .LVU5
  24 000c 4290      		clr.l (%a0)
  26:mtk_c.c       **** 		task_tab[i].stack_ptr = NULL;
  25               		.loc 1 26 3 is_stmt 1 discriminator 3 view .LVU6
  26               		.loc 1 26 25 is_stmt 0 discriminator 3 view .LVU7
  27 000e 42A8 0004 		clr.l 4(%a0)
  27:mtk_c.c       **** 		task_tab[i].priority = 0;
  28               		.loc 1 27 3 is_stmt 1 discriminator 3 view .LVU8


  29               		.loc 1 27 24 is_stmt 0 discriminator 3 view .LVU9
  30 0012 42A8 0008 		clr.l 8(%a0)
  28:mtk_c.c       **** 		task_tab[i].status = UNDEFINED;
  31               		.loc 1 28 3 is_stmt 1 discriminator 3 view .LVU10
  32               		.loc 1 28 22 is_stmt 0 discriminator 3 view .LVU11
  33 0016 42A8 000C 		clr.l 12(%a0)
  29:mtk_c.c       **** 		task_tab[i].next = NULLTASKID;							
  34               		.loc 1 29 3 is_stmt 1 discriminator 3 view .LVU12
  35               		.loc 1 29 20 is_stmt 0 discriminator 3 view .LVU13
  36 001a 42A8 0010 		clr.l 16(%a0)
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  37               		.loc 1 24 29 is_stmt 1 discriminator 3 view .LVU14
  24:mtk_c.c       **** 		task_tab[i].task_addr = NULL;
  38               		.loc 1 24 15 discriminator 3 view .LVU15
  39 001e 41E8 0014 		lea (20,%a0),%a0
  40 0022 B1C0      		cmp.l %d0,%a0
  41 0024 66E6      		jne .L2
  30:mtk_c.c       **** 	}
  31:mtk_c.c       **** 
  32:mtk_c.c       **** 	ready = NULLTASKID;	/* readyキューの初期化 */					
  42               		.loc 1 32 2 view .LVU16
  43               		.loc 1 32 8 is_stmt 0 view .LVU17
  44 0026 42B9 0000 		clr.l ready
  44      0000 
  33:mtk_c.c       **** 
  34:mtk_c.c       **** 	*(int*) 0x0084 = (int)pv_handler; /* pv_handlerをTRAP#1の割り込みベクタに登録 */
  45               		.loc 1 34 2 is_stmt 1 view .LVU18
  46               		.loc 1 34 17 is_stmt 0 view .LVU19
  47 002c 21FC 0000 		move.l #pv_handler,132.w
  47      0000 0084 
  35:mtk_c.c       **** 
  36:mtk_c.c       ****     for(i = 0; i < NUMSEMAPHORE; i++){  /* セマフォの値を初期化 */
  48               		.loc 1 36 5 is_stmt 1 view .LVU20
  49               	.LVL2:
  50               		.loc 1 36 18 view .LVU21
  37:mtk_c.c       ****         semaphore[i].count = 1;
  51               		.loc 1 37 9 view .LVU22
  52               		.loc 1 37 28 is_stmt 0 view .LVU23
  53 0034 7001      		moveq #1,%d0
  54 0036 23C0 0000 		move.l %d0,semaphore
  54      0000 
  38:mtk_c.c       ****         semaphore[i].task_list = NULLTASKID;
  55               		.loc 1 38 9 is_stmt 1 view .LVU24
  56               		.loc 1 38 32 is_stmt 0 view .LVU25
  57 003c 42B9 0000 		clr.l semaphore+4
  57      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  58               		.loc 1 36 35 is_stmt 1 view .LVU26
  59               	.LVL3:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  60               		.loc 1 36 18 view .LVU27
  37:mtk_c.c       ****         semaphore[i].count = 1;
  61               		.loc 1 37 9 view .LVU28
  37:mtk_c.c       ****         semaphore[i].count = 1;
  62               		.loc 1 37 28 is_stmt 0 view .LVU29
  63 0042 23C0 0000 		move.l %d0,semaphore+8
  63      0000 


  64               		.loc 1 38 9 is_stmt 1 view .LVU30
  65               		.loc 1 38 32 is_stmt 0 view .LVU31
  66 0048 42B9 0000 		clr.l semaphore+12
  66      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  67               		.loc 1 36 35 is_stmt 1 view .LVU32
  68               	.LVL4:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  69               		.loc 1 36 18 view .LVU33
  37:mtk_c.c       ****         semaphore[i].count = 1;
  70               		.loc 1 37 9 view .LVU34
  37:mtk_c.c       ****         semaphore[i].count = 1;
  71               		.loc 1 37 28 is_stmt 0 view .LVU35
  72 004e 23C0 0000 		move.l %d0,semaphore+16
  72      0000 
  73               		.loc 1 38 9 is_stmt 1 view .LVU36
  74               		.loc 1 38 32 is_stmt 0 view .LVU37
  75 0054 42B9 0000 		clr.l semaphore+20
  75      0000 
  36:mtk_c.c       ****         semaphore[i].count = 1;
  76               		.loc 1 36 35 is_stmt 1 view .LVU38
  77               	.LVL5:
  36:mtk_c.c       ****         semaphore[i].count = 1;
  78               		.loc 1 36 18 view .LVU39
  39:mtk_c.c       ****     }
  40:mtk_c.c       **** }
  79               		.loc 1 40 1 is_stmt 0 view .LVU40
  80 005a 4E75      		rts
  81               		.cfi_endproc
  82               	.LFE3:
  83               		.size	init_kernel, .-init_kernel
  84               		.align	2
  85               		.globl	set_task
  86               		.type	set_task, @function
  87               	set_task:
  88               	.LVL6:
  89               	.LFB4:
  41:mtk_c.c       **** 
  42:mtk_c.c       **** /************************************************************************************
  43:mtk_c.c       **** **ユーザタスクの初期化と登録 set task()
  44:mtk_c.c       **** **引数にはユーザタスク関数へのポインタ（タスク関数の先頭番地）を取
  45:mtk_c.c       **** **1. タスク ID の決定：
  46:mtk_c.c       **** **task tab[] の中に空きスロットを見つけ (0 番は除く)，その ID を new task に
  47:mtk_c.c       **** **2. TCB の更新：
  48:mtk_c.c       **** **上で見つけた TCB に，task addr，status を登録する．
  49:mtk_c.c       **** **3. スタックの初期化：
  50:mtk_c.c       **** **関数 init stack() を起動する．関数 init stack() の戻り値を TCB の stack ptr に
  51:mtk_c.c       **** **する．
  52:mtk_c.c       **** **4. キューへの登録：
  53:mtk_c.c       **** **ready キューに new task を登録する．
  54:mtk_c.c       **** **Cでは，配列の名前はその配列のアドレスを意味する．TCB へ登録するス
  55:mtk_c.c       **** **これらの機能を用いて表すことができる．
  56:mtk_c.c       **** ************************************************************************************/
  57:mtk_c.c       **** void set_task(void (*usertask_ptr)()){
  90               		.loc 1 57 38 is_stmt 1 view -0
  91               		.cfi_startproc
  92               		.loc 1 57 38 is_stmt 0 view .LVU42


  93 005c 2F0A      		move.l %a2,-(%sp)
  94               		.cfi_def_cfa_offset 8
  95               		.cfi_offset 10, -8
  96 005e 2F02      		move.l %d2,-(%sp)
  97               		.cfi_def_cfa_offset 12
  98               		.cfi_offset 2, -12
  58:mtk_c.c       ****     TASK_ID_TYPE i;
  99               		.loc 1 58 5 is_stmt 1 view .LVU43
  59:mtk_c.c       ****     
  60:mtk_c.c       ****     for(i = 1; i < NUMTASK+1; i++){
 100               		.loc 1 60 5 view .LVU44
 101               	.LVL7:
 102               		.loc 1 60 18 view .LVU45
 103 0060 41F9 0000 		lea task_tab+32,%a0
 103      0000 
 104               		.loc 1 60 11 is_stmt 0 view .LVU46
 105 0066 7201      		moveq #1,%d1
 106               	.LVL8:
 107               	.L12:
  61:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 108               		.loc 1 61 9 is_stmt 1 view .LVU47
 109               		.loc 1 61 11 is_stmt 0 view .LVU48
 110 0068 70FD      		moveq #-3,%d0
 111 006a C090      		and.l (%a0),%d0
 112 006c 6712      		jeq .L18
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 113               		.loc 1 60 32 is_stmt 1 discriminator 2 view .LVU49
 114 006e 5281      		addq.l #1,%d1
 115               	.LVL9:
  60:mtk_c.c       ****         if((task_tab[i].status == UNDEFINED)||(task_tab[i].status == FINISHED)){
 116               		.loc 1 60 18 discriminator 2 view .LVU50
 117 0070 41E8 0014 		lea (20,%a0),%a0
 118 0074 7006      		moveq #6,%d0
 119 0076 B081      		cmp.l %d1,%d0
 120 0078 66EE      		jne .L12
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
  63:mtk_c.c       ****             task_tab[i].task_addr = usertask_ptr; /* TCB の更新 */
  64:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
  65:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
  66:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
  67:mtk_c.c       ****             break;
  68:mtk_c.c       ****         }
  69:mtk_c.c       ****     }
  70:mtk_c.c       **** }
 121               		.loc 1 70 1 is_stmt 0 view .LVU51
 122 007a 241F      		move.l (%sp)+,%d2
 123 007c 245F      		move.l (%sp)+,%a2
 124 007e 4E75      		rts
 125               	.L18:
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 126               		.loc 1 62 13 is_stmt 1 view .LVU52
  62:mtk_c.c       ****             new_task = i; /* タスクIDの決定 */
 127               		.loc 1 62 22 is_stmt 0 view .LVU53
 128 0080 23C1 0000 		move.l %d1,new_task
 128      0000 
  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 129               		.loc 1 63 13 is_stmt 1 view .LVU54


  63:mtk_c.c       ****             task_tab[i].status = OCCUPIED;
 130               		.loc 1 63 35 is_stmt 0 view .LVU55
 131 0086 43F9 0000 		lea task_tab,%a1
 131      0000 
 132 008c 2041      		move.l %d1,%a0
 133 008e D1C1      		add.l %d1,%a0
 134 0090 D1C8      		add.l %a0,%a0
 135 0092 D1C1      		add.l %d1,%a0
 136 0094 D1C8      		add.l %a0,%a0
 137 0096 D1C8      		add.l %a0,%a0
 138 0098 23AF 000C 		move.l 12(%sp),(%a1,%a0.l)
 138      8800 
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 139               		.loc 1 64 13 is_stmt 1 view .LVU56
  64:mtk_c.c       ****             task_tab[i].stack_ptr = init_stack(new_task); /* スタックの初期化 */
 140               		.loc 1 64 32 is_stmt 0 view .LVU57
 141 009e 41F1 8800 		lea (%a1,%a0.l),%a0
 142 00a2 7001      		moveq #1,%d0
 143 00a4 2140 000C 		move.l %d0,12(%a0)
  65:mtk_c.c       ****             addq(&ready, new_task); /* キューへの登録 */
 144               		.loc 1 65 13 is_stmt 1 view .LVU58
 145               	.LVL10:
 146               	.LBB22:
 147               	.LBI22:
  71:mtk_c.c       **** 
  72:mtk_c.c       **** /***************************************************************************************
  73:mtk_c.c       **** **ユーザタスク用のスタックの初期化 init stack()
  74:mtk_c.c       **** **タスク ID を引数としてとる．戻り値に初期化が完了した時点でのユーザ
  75:mtk_c.c       **** **アドレス (void * 型) を返す．引数を id とすると，以下の処理を行なう．
  76:mtk_c.c       **** **1. stacks[id - 1] の sstack を図 2.8 のように設定する．図中の「initial(初期)PC
  77:mtk_c.c       **** **はタスクの実行開始アドレス task tab[id].task addr を設定する．「initial SR」
  78:mtk_c.c       **** **は 0x0000 を，15×4 バイト分の領域を飛ばして，「initial USP」の部分はユー
  79:mtk_c.c       **** **プ stacks[id - 1].ustack[STKSIZE] を設定する．
  80:mtk_c.c       **** **2. 図 2.8 の (*) のアドレスを戻り値として返す．
  81:mtk_c.c       **** **なお，int 型へのポインタ ssp を宣言しておくと，ssp の値が現在のスーパ
  82:mtk_c.c       **** **トップを指しているならば，4 バイトの値をプッシュすることは，*(--ssp)
  83:mtk_c.c       **** **これを利用すると，上記の操作は簡単である．また，2 バイトの値をプ
  84:mtk_c.c       **** **short int 型へのポインタを宣言しておき，これを利用すると良い．
  85:mtk_c.c       **** *****************************************************************************************/
  86:mtk_c.c       **** void *init_stack(TASK_ID_TYPE id){
 148               		.loc 1 86 7 view .LVU59
 149               	.LBB23:
  87:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 150               		.loc 1 87 5 view .LVU60
 151 00a8 2001      		move.l %d1,%d0
 152 00aa 740B      		moveq #11,%d2
 153 00ac E5A8      		lsl.l %d2,%d0
 154               		.loc 1 87 10 is_stmt 0 view .LVU61
 155 00ae 2440      		move.l %d0,%a2
 156 00b0 D5FC 0000 		add.l #stacks,%a2
 156      0000 
 157               	.LVL11:
  88:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 158               		.loc 1 88 5 is_stmt 1 view .LVU62
 159               		.loc 1 88 18 is_stmt 0 view .LVU63
 160 00b6 256F 000C 		move.l 12(%sp),-4(%a2)
 160      FFFC 


  89:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 161               		.loc 1 89 5 is_stmt 1 view .LVU64
 162               	.LVL12:
  90:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 163               		.loc 1 90 5 view .LVU65
 164               		.loc 1 90 20 is_stmt 0 view .LVU66
 165 00bc 426A FFFA 		clr.w -6(%a2)
  91:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 166               		.loc 1 91 5 is_stmt 1 view .LVU67
 167               	.LVL13:
  92:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 168               		.loc 1 92 5 view .LVU68
  93:mtk_c.c       ****     /*修正*/
  94:mtk_c.c       ****     *(--int_ssp) = &stacks[id-1].ustack[STKSIZE]; /* initial USPの設定 */
 169               		.loc 1 94 5 view .LVU69
 170               		.loc 1 94 20 is_stmt 0 view .LVU70
 171 00c0 0680 0000 		add.l #stacks-1024,%d0
 171      0000 
 172 00c6 2540 FFBA 		move.l %d0,-70(%a2)
  95:mtk_c.c       **** 
  96:mtk_c.c       ****     return (void*)int_ssp;
 173               		.loc 1 96 5 is_stmt 1 view .LVU71
 174               	.LVL14:
  94:mtk_c.c       **** 
 175               		.loc 1 94 18 is_stmt 0 view .LVU72
 176 00ca 45EA FFBA 		lea (-70,%a2),%a2
 177               	.LVL15:
  94:mtk_c.c       **** 
 178               		.loc 1 94 18 view .LVU73
 179 00ce 214A 0004 		move.l %a2,4(%a0)
 180               	.LBE23:
 181               	.LBE22:
  66:mtk_c.c       ****             break;
 182               		.loc 1 66 13 is_stmt 1 view .LVU74
 183               	.LVL16:
 184               	.LBB24:
 185               	.LBI24:
  97:mtk_c.c       **** }
  98:mtk_c.c       **** 
  99:mtk_c.c       **** /*********
 100:mtk_c.c       **** ***1. 最初のタスクの決定：
 101:mtk_c.c       **** ***キュー ready から removeq() によってタスクを１つ取り出し，curr task に代
 102:mtk_c.c       **** ***2. タイマの設定:
 103:mtk_c.c       **** ***関数 init timer() を呼び出し，タスクスイッチを行うためのタイマを設定
 104:mtk_c.c       **** ***3. 最初のタスクの起動：
 105:mtk_c.c       **** ***関数 first task() を起動して最初のタスクに制御を移す．これは m68k-elf-gcc
 106:mtk_c.c       **** ***によってアセンブリ言語サブルーチン first task の呼び出しに変換される
 107:mtk_c.c       **** *********/
 108:mtk_c.c       **** void begin_sch(){
 109:mtk_c.c       ****     curr_task=removeq(&ready);
 110:mtk_c.c       ****     init_timer();
 111:mtk_c.c       ****     first_task();
 112:mtk_c.c       ****     printf("hello world\n");
 113:mtk_c.c       **** }
 114:mtk_c.c       **** 
 115:mtk_c.c       **** // タスクのキューの最後尾へのTCBの追加
 116:mtk_c.c       **** void addq(TASK_ID_TYPE* que_ptr, TASK_ID_TYPE id){


 186               		.loc 1 116 6 view .LVU75
 187               	.LBB25:
 117:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 188               		.loc 1 117 2 view .LVU76
 189               		.loc 1 117 5 is_stmt 0 view .LVU77
 190 00d2 2079 0000 		move.l ready,%a0
 190      0000 
 191               		.loc 1 117 4 view .LVU78
 192 00d8 B0FC 0000 		cmp.w #0,%a0
 193 00dc 660C      		jne .L8
 194               	.LVL17:
 118:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 195               		.loc 1 118 3 is_stmt 1 view .LVU79
 196               		.loc 1 118 12 is_stmt 0 view .LVU80
 197 00de 23C1 0000 		move.l %d1,ready
 197      0000 
 198               	.LBE25:
 199               	.LBE24:
  70:mtk_c.c       **** 
 200               		.loc 1 70 1 view .LVU81
 201 00e4 241F      		move.l (%sp)+,%d2
 202 00e6 245F      		move.l (%sp)+,%a2
 203               	.LVL18:
  70:mtk_c.c       **** 
 204               		.loc 1 70 1 view .LVU82
 205 00e8 4E75      		rts
 206               	.LVL19:
 207               	.L8:
 208               	.LBB28:
 209               	.LBB27:
 210               	.LBB26:
 119:mtk_c.c       **** 	}
 120:mtk_c.c       **** 	else{
 121:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[*que_ptr];	// 先頭のタスクのポインタ設定
 211               		.loc 1 121 3 is_stmt 1 view .LVU83
 122:mtk_c.c       **** 		while(1){
 212               		.loc 1 122 3 view .LVU84
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 213               		.loc 1 123 4 view .LVU85
 214               		.loc 1 123 18 is_stmt 0 view .LVU86
 215 00ea 2008      		move.l %a0,%d0
 216 00ec D088      		add.l %a0,%d0
 217 00ee D080      		add.l %d0,%d0
 218 00f0 D088      		add.l %a0,%d0
 219 00f2 D080      		add.l %d0,%d0
 220 00f4 D080      		add.l %d0,%d0
 221 00f6 41F1 0800 		lea (%a1,%d0.l),%a0
 222               	.LVL20:
 223               		.loc 1 123 18 view .LVU87
 224 00fa 2028 0010 		move.l 16(%a0),%d0
 225               		.loc 1 123 6 view .LVU88
 226 00fe 6726      		jeq .L11
 227               	.LVL21:
 228               	.L10:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 125:mtk_c.c       **** 				break;
 126:mtk_c.c       **** 			}


 127:mtk_c.c       **** 			else{
 128:mtk_c.c       **** 				task_ptr = &task_tab[(*task_ptr).next];		//次のタスクにポインタを移動
 229               		.loc 1 128 5 is_stmt 1 view .LVU89
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 230               		.loc 1 122 8 view .LVU90
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 231               		.loc 1 122 3 view .LVU91
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 232               		.loc 1 123 4 view .LVU92
 233 0100 2040      		move.l %d0,%a0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 234               		.loc 1 123 18 is_stmt 0 view .LVU93
 235 0102 D080      		add.l %d0,%d0
 236               	.LVL22:
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 237               		.loc 1 123 18 view .LVU94
 238 0104 D080      		add.l %d0,%d0
 239 0106 D088      		add.l %a0,%d0
 240 0108 D080      		add.l %d0,%d0
 241 010a D080      		add.l %d0,%d0
 242 010c 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 243               		.loc 1 123 6 view .LVU95
 244 0110 66EE      		jne .L10
 245               		.loc 1 128 14 view .LVU96
 246 0112 2008      		move.l %a0,%d0
 247 0114 D088      		add.l %a0,%d0
 248 0116 D080      		add.l %d0,%d0
 249 0118 D088      		add.l %a0,%d0
 250 011a D080      		add.l %d0,%d0
 251 011c D080      		add.l %d0,%d0
 252 011e 2040      		move.l %d0,%a0
 253               	.LVL23:
 254               		.loc 1 128 14 view .LVU97
 255 0120 D1FC 0000 		add.l #task_tab,%a0
 255      0000 
 256               	.L11:
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 257               		.loc 1 124 5 is_stmt 1 view .LVU98
 124:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 258               		.loc 1 124 22 is_stmt 0 view .LVU99
 259 0126 2141 0010 		move.l %d1,16(%a0)
 125:mtk_c.c       **** 			}
 260               		.loc 1 125 5 is_stmt 1 view .LVU100
 261               	.LBE26:
 262               	.LBE27:
 263               	.LBE28:
  70:mtk_c.c       **** 
 264               		.loc 1 70 1 is_stmt 0 view .LVU101
 265 012a 241F      		move.l (%sp)+,%d2
 266 012c 245F      		move.l (%sp)+,%a2
 267               	.LVL24:
  70:mtk_c.c       **** 
 268               		.loc 1 70 1 view .LVU102
 269 012e 4E75      		rts
 270               		.cfi_endproc
 271               	.LFE4:


 272               		.size	set_task, .-set_task
 273               		.align	2
 274               		.globl	init_stack
 275               		.type	init_stack, @function
 276               	init_stack:
 277               	.LVL25:
 278               	.LFB5:
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 279               		.loc 1 86 34 is_stmt 1 view -0
 280               		.cfi_startproc
  86:mtk_c.c       ****     int* int_ssp = (int*)&stacks[id-1].sstack[STKSIZE];
 281               		.loc 1 86 34 is_stmt 0 view .LVU104
 282 0130 2F02      		move.l %d2,-(%sp)
 283               		.cfi_def_cfa_offset 8
 284               		.cfi_offset 2, -8
 285 0132 202F 0008 		move.l 8(%sp),%d0
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 286               		.loc 1 87 5 is_stmt 1 view .LVU105
 287 0136 2400      		move.l %d0,%d2
 288 0138 720B      		moveq #11,%d1
 289 013a E3AA      		lsl.l %d1,%d2
  87:mtk_c.c       ****     *(--int_ssp) = task_tab[id].task_addr; /* initial PCの設定 */
 290               		.loc 1 87 10 is_stmt 0 view .LVU106
 291 013c 2042      		move.l %d2,%a0
 292 013e D1FC 0000 		add.l #stacks,%a0
 292      0000 
 293               	.LVL26:
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 294               		.loc 1 88 5 is_stmt 1 view .LVU107
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 295               		.loc 1 88 32 is_stmt 0 view .LVU108
 296 0144 2200      		move.l %d0,%d1
 297 0146 D280      		add.l %d0,%d1
 298 0148 D281      		add.l %d1,%d1
 299 014a D280      		add.l %d0,%d1
 300 014c D281      		add.l %d1,%d1
 301 014e D281      		add.l %d1,%d1
  88:mtk_c.c       ****     unsigned short int* short_ssp = (unsigned short int*)int_ssp;
 302               		.loc 1 88 18 view .LVU109
 303 0150 43F9 0000 		lea task_tab,%a1
 303      0000 
 304 0156 2171 1800 		move.l (%a1,%d1.l),-4(%a0)
 304      FFFC 
  89:mtk_c.c       ****     *(--short_ssp) = 0x0000; /* initial SRの設定 */
 305               		.loc 1 89 5 is_stmt 1 view .LVU110
 306               	.LVL27:
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 307               		.loc 1 90 5 view .LVU111
  90:mtk_c.c       ****     int_ssp = (int*)short_ssp;
 308               		.loc 1 90 20 is_stmt 0 view .LVU112
 309 015c 4268 FFFA 		clr.w -6(%a0)
  91:mtk_c.c       ****     int_ssp -= 15; /* 15*4バイト分の領域を飛ばす */
 310               		.loc 1 91 5 is_stmt 1 view .LVU113
 311               	.LVL28:
  92:mtk_c.c       ****     /*修正*/
 312               		.loc 1 92 5 view .LVU114
  94:mtk_c.c       **** 


 313               		.loc 1 94 5 view .LVU115
  94:mtk_c.c       **** 
 314               		.loc 1 94 20 is_stmt 0 view .LVU116
 315 0160 0682 0000 		add.l #stacks-1024,%d2
 315      0000 
 316 0166 2142 FFBA 		move.l %d2,-70(%a0)
  96:mtk_c.c       **** }
 317               		.loc 1 96 5 is_stmt 1 view .LVU117
  97:mtk_c.c       **** 
 318               		.loc 1 97 1 is_stmt 0 view .LVU118
 319 016a 70BA      		moveq #-70,%d0
 320 016c D088      		add.l %a0,%d0
 321               	.LVL29:
  97:mtk_c.c       **** 
 322               		.loc 1 97 1 view .LVU119
 323 016e 241F      		move.l (%sp)+,%d2
 324 0170 4E75      		rts
 325               		.cfi_endproc
 326               	.LFE5:
 327               		.size	init_stack, .-init_stack
 328               		.section	.rodata.str1.1,"aMS",@progbits,1
 329               	.LC0:
 330 0000 6865 6C6C 		.string	"hello world"
 330      6F20 776F 
 330      726C 6400 
 331               		.text
 332               		.align	2
 333               		.globl	begin_sch
 334               		.type	begin_sch, @function
 335               	begin_sch:
 336               	.LFB6:
 108:mtk_c.c       ****     curr_task=removeq(&ready);
 337               		.loc 1 108 17 is_stmt 1 view -0
 338               		.cfi_startproc
 109:mtk_c.c       ****     init_timer();
 339               		.loc 1 109 5 view .LVU121
 340               	.LVL30:
 341               	.LBB29:
 342               	.LBI29:
 129:mtk_c.c       **** 			}
 130:mtk_c.c       **** 		}
 131:mtk_c.c       **** 	}
 132:mtk_c.c       **** }
 133:mtk_c.c       **** 
 134:mtk_c.c       **** // タスクのキューの先頭からのTCBの除去
 135:mtk_c.c       **** TASK_ID_TYPE removeq(TASK_ID_TYPE* que_ptr){
 343               		.loc 1 135 14 view .LVU122
 344               	.LBB30:
 136:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 345               		.loc 1 136 2 view .LVU123
 346               		.loc 1 136 15 is_stmt 0 view .LVU124
 347 0172 2039 0000 		move.l ready,%d0
 347      0000 
 348               	.LVL31:
 137:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 349               		.loc 1 137 2 is_stmt 1 view .LVU125
 350               		.loc 1 137 4 is_stmt 0 view .LVU126


 351 0178 671A      		jeq .L22
 352               	.LBB31:
 138:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 353               		.loc 1 138 3 is_stmt 1 view .LVU127
 354               	.LVL32:
 139:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 355               		.loc 1 139 3 view .LVU128
 356               		.loc 1 139 25 is_stmt 0 view .LVU129
 357 017a 2040      		move.l %d0,%a0
 358 017c D1C0      		add.l %d0,%a0
 359 017e D1C8      		add.l %a0,%a0
 360 0180 D1C0      		add.l %d0,%a0
 361 0182 D1C8      		add.l %a0,%a0
 362 0184 D1C8      		add.l %a0,%a0
 363 0186 D1FC 0000 		add.l #task_tab+16,%a0
 363      0000 
 364               		.loc 1 139 12 view .LVU130
 365 018c 23D0 0000 		move.l (%a0),ready
 365      0000 
 140:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 366               		.loc 1 140 3 is_stmt 1 view .LVU131
 367               		.loc 1 140 20 is_stmt 0 view .LVU132
 368 0192 4290      		clr.l (%a0)
 369               	.LVL33:
 370               	.L22:
 371               		.loc 1 140 20 view .LVU133
 372               	.LBE31:
 141:mtk_c.c       **** 	}
 142:mtk_c.c       **** 	return r_id;									// キューの先頭のタスクのidを返す
 373               		.loc 1 142 2 is_stmt 1 view .LVU134
 374               		.loc 1 142 2 is_stmt 0 view .LVU135
 375               	.LBE30:
 376               	.LBE29:
 109:mtk_c.c       ****     init_timer();
 377               		.loc 1 109 14 view .LVU136
 378 0194 23C0 0000 		move.l %d0,curr_task
 378      0000 
 110:mtk_c.c       ****     first_task();
 379               		.loc 1 110 5 is_stmt 1 view .LVU137
 380 019a 4EB9 0000 		jsr init_timer
 380      0000 
 381               	.LVL34:
 111:mtk_c.c       ****     printf("hello world\n");
 382               		.loc 1 111 5 view .LVU138
 383 01a0 4EB9 0000 		jsr first_task
 383      0000 
 384               	.LVL35:
 112:mtk_c.c       **** }
 385               		.loc 1 112 5 view .LVU139
 386 01a6 4879 0000 		pea .LC0
 386      0000 
 387               		.cfi_def_cfa_offset 8
 388 01ac 4EB9 0000 		jsr puts
 388      0000 
 389               	.LVL36:
 113:mtk_c.c       **** 
 390               		.loc 1 113 1 is_stmt 0 view .LVU140


 391 01b2 588F      		addq.l #4,%sp
 392               		.cfi_def_cfa_offset 4
 393 01b4 4E75      		rts
 394               		.cfi_endproc
 395               	.LFE6:
 396               		.size	begin_sch, .-begin_sch
 397               		.align	2
 398               		.globl	addq
 399               		.type	addq, @function
 400               	addq:
 401               	.LVL37:
 402               	.LFB7:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 403               		.loc 1 116 50 is_stmt 1 view -0
 404               		.cfi_startproc
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 405               		.loc 1 116 50 is_stmt 0 view .LVU142
 406 01b6 206F 0004 		move.l 4(%sp),%a0
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 407               		.loc 1 117 2 is_stmt 1 view .LVU143
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 408               		.loc 1 117 5 is_stmt 0 view .LVU144
 409 01ba 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 410               		.loc 1 117 4 view .LVU145
 411 01bc 6606      		jne .L29
 118:mtk_c.c       **** 	}
 412               		.loc 1 118 3 is_stmt 1 view .LVU146
 118:mtk_c.c       **** 	}
 413               		.loc 1 118 12 is_stmt 0 view .LVU147
 414 01be 20AF 0008 		move.l 8(%sp),(%a0)
 132:mtk_c.c       **** 
 415               		.loc 1 132 1 view .LVU148
 416 01c2 4E75      		rts
 417               	.L29:
 418               	.LBB32:
 121:mtk_c.c       **** 		while(1){
 419               		.loc 1 121 3 is_stmt 1 view .LVU149
 420               	.LVL38:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 421               		.loc 1 122 3 view .LVU150
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 422               		.loc 1 123 4 view .LVU151
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 423               		.loc 1 123 18 is_stmt 0 view .LVU152
 424 01c4 43F9 0000 		lea task_tab,%a1
 424      0000 
 425 01ca 2001      		move.l %d1,%d0
 426 01cc D081      		add.l %d1,%d0
 427 01ce D080      		add.l %d0,%d0
 428 01d0 D081      		add.l %d1,%d0
 429 01d2 D080      		add.l %d0,%d0
 430 01d4 D080      		add.l %d0,%d0
 431 01d6 41F1 0800 		lea (%a1,%d0.l),%a0
 432 01da 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 433               		.loc 1 123 6 view .LVU153


 434 01de 6726      		jeq .L32
 435               	.LVL39:
 436               	.L31:
 128:mtk_c.c       **** 			}
 437               		.loc 1 128 5 is_stmt 1 view .LVU154
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 438               		.loc 1 122 8 view .LVU155
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 439               		.loc 1 122 3 view .LVU156
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 440               		.loc 1 123 4 view .LVU157
 441 01e0 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 442               		.loc 1 123 18 is_stmt 0 view .LVU158
 443 01e2 D080      		add.l %d0,%d0
 444               	.LVL40:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 445               		.loc 1 123 18 view .LVU159
 446 01e4 D080      		add.l %d0,%d0
 447 01e6 D081      		add.l %d1,%d0
 448 01e8 D080      		add.l %d0,%d0
 449 01ea D080      		add.l %d0,%d0
 450 01ec 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 451               		.loc 1 123 6 view .LVU160
 452 01f0 66EE      		jne .L31
 128:mtk_c.c       **** 			}
 453               		.loc 1 128 14 view .LVU161
 454 01f2 2001      		move.l %d1,%d0
 455 01f4 D081      		add.l %d1,%d0
 456 01f6 D080      		add.l %d0,%d0
 457 01f8 D081      		add.l %d1,%d0
 458 01fa D080      		add.l %d0,%d0
 459 01fc D080      		add.l %d0,%d0
 460 01fe 2040      		move.l %d0,%a0
 461 0200 D1FC 0000 		add.l #task_tab,%a0
 461      0000 
 462               	.LVL41:
 463               	.L32:
 124:mtk_c.c       **** 				break;
 464               		.loc 1 124 5 is_stmt 1 view .LVU162
 124:mtk_c.c       **** 				break;
 465               		.loc 1 124 22 is_stmt 0 view .LVU163
 466 0206 216F 0008 		move.l 8(%sp),16(%a0)
 466      0010 
 125:mtk_c.c       **** 			}
 467               		.loc 1 125 5 is_stmt 1 view .LVU164
 468               	.LBE32:
 132:mtk_c.c       **** 
 469               		.loc 1 132 1 is_stmt 0 view .LVU165
 470 020c 4E75      		rts
 471               		.cfi_endproc
 472               	.LFE7:
 473               		.size	addq, .-addq
 474               		.align	2
 475               		.globl	removeq
 476               		.type	removeq, @function


 477               	removeq:
 478               	.LVL42:
 479               	.LFB8:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 480               		.loc 1 135 44 is_stmt 1 view -0
 481               		.cfi_startproc
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 482               		.loc 1 135 44 is_stmt 0 view .LVU167
 483 020e 226F 0004 		move.l 4(%sp),%a1
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 484               		.loc 1 136 2 is_stmt 1 view .LVU168
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 485               		.loc 1 136 15 is_stmt 0 view .LVU169
 486 0212 2011      		move.l (%a1),%d0
 487               	.LVL43:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 488               		.loc 1 137 2 is_stmt 1 view .LVU170
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 489               		.loc 1 137 4 is_stmt 0 view .LVU171
 490 0214 6716      		jeq .L37
 491               	.LBB33:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 492               		.loc 1 138 3 is_stmt 1 view .LVU172
 493               	.LVL44:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 494               		.loc 1 139 3 view .LVU173
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 495               		.loc 1 139 25 is_stmt 0 view .LVU174
 496 0216 2040      		move.l %d0,%a0
 497 0218 D1C0      		add.l %d0,%a0
 498 021a D1C8      		add.l %a0,%a0
 499 021c D1C0      		add.l %d0,%a0
 500 021e D1C8      		add.l %a0,%a0
 501 0220 D1C8      		add.l %a0,%a0
 502 0222 D1FC 0000 		add.l #task_tab+16,%a0
 502      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 503               		.loc 1 139 12 view .LVU175
 504 0228 2290      		move.l (%a0),(%a1)
 140:mtk_c.c       **** 	}
 505               		.loc 1 140 3 is_stmt 1 view .LVU176
 140:mtk_c.c       **** 	}
 506               		.loc 1 140 20 is_stmt 0 view .LVU177
 507 022a 4290      		clr.l (%a0)
 508               	.LBE33:
 509               		.loc 1 142 2 is_stmt 1 view .LVU178
 510               	.LVL45:
 511               	.L37:
 143:mtk_c.c       **** }
 512               		.loc 1 143 1 is_stmt 0 view .LVU179
 513 022c 4E75      		rts
 514               		.cfi_endproc
 515               	.LFE8:
 516               		.size	removeq, .-removeq
 517               		.align	2
 518               		.globl	sched
 519               		.type	sched, @function


 520               	sched:
 521               	.LFB9:
 144:mtk_c.c       **** 
 145:mtk_c.c       **** // タスクのスケジュール関数
 146:mtk_c.c       **** void sched(){
 522               		.loc 1 146 13 is_stmt 1 view -0
 523               		.cfi_startproc
 147:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 524               		.loc 1 147 2 view .LVU181
 525               	.LVL46:
 526               	.LBB37:
 527               	.LBI37:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 528               		.loc 1 135 14 view .LVU182
 529               	.LBB38:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 530               		.loc 1 136 2 view .LVU183
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 531               		.loc 1 136 15 is_stmt 0 view .LVU184
 532 022e 2039 0000 		move.l ready,%d0
 532      0000 
 533               	.LVL47:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 534               		.loc 1 137 2 is_stmt 1 view .LVU185
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 535               		.loc 1 137 4 is_stmt 0 view .LVU186
 536 0234 6722      		jeq .L45
 537               	.LBB39:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 538               		.loc 1 138 3 is_stmt 1 view .LVU187
 539               	.LVL48:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 540               		.loc 1 139 3 view .LVU188
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 541               		.loc 1 139 25 is_stmt 0 view .LVU189
 542 0236 2040      		move.l %d0,%a0
 543 0238 D1C0      		add.l %d0,%a0
 544 023a D1C8      		add.l %a0,%a0
 545 023c D1C0      		add.l %d0,%a0
 546 023e D1C8      		add.l %a0,%a0
 547 0240 D1C8      		add.l %a0,%a0
 548 0242 D1FC 0000 		add.l #task_tab+16,%a0
 548      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 549               		.loc 1 139 12 view .LVU190
 550 0248 23D0 0000 		move.l (%a0),ready
 550      0000 
 140:mtk_c.c       **** 	}
 551               		.loc 1 140 3 is_stmt 1 view .LVU191
 140:mtk_c.c       **** 	}
 552               		.loc 1 140 20 is_stmt 0 view .LVU192
 553 024e 4290      		clr.l (%a0)
 554               	.LBE39:
 142:mtk_c.c       **** }
 555               		.loc 1 142 2 is_stmt 1 view .LVU193
 556               	.LVL49:
 142:mtk_c.c       **** }


 557               		.loc 1 142 2 is_stmt 0 view .LVU194
 558               	.LBE38:
 559               	.LBE37:
 560               		.loc 1 147 12 view .LVU195
 561 0250 23C0 0000 		move.l %d0,next_task
 561      0000 
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 562               		.loc 1 148 2 is_stmt 1 view .LVU196
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 150:mtk_c.c       **** 	}		
 151:mtk_c.c       **** }
 563               		.loc 1 151 1 is_stmt 0 view .LVU197
 564 0256 4E75      		rts
 565               	.LVL50:
 566               	.L45:
 567               	.LBB41:
 568               	.LBB40:
 142:mtk_c.c       **** }
 569               		.loc 1 142 2 is_stmt 1 view .LVU198
 142:mtk_c.c       **** }
 570               		.loc 1 142 2 is_stmt 0 view .LVU199
 571               	.LBE40:
 572               	.LBE41:
 148:mtk_c.c       **** 	if(next_task == NULLTASKID){
 573               		.loc 1 148 2 is_stmt 1 view .LVU200
 574               	.L46:
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 575               		.loc 1 149 3 discriminator 1 view .LVU201
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 576               		.loc 1 149 8 discriminator 1 view .LVU202
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 577               		.loc 1 149 3 discriminator 1 view .LVU203
 149:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 578               		.loc 1 149 8 discriminator 1 view .LVU204
 579 0258 60FE      		jra .L46
 580               		.cfi_endproc
 581               	.LFE9:
 582               		.size	sched, .-sched
 583               		.align	2
 584               		.globl	sleep
 585               		.type	sleep, @function
 586               	sleep:
 587               	.LVL51:
 588               	.LFB11:
 152:mtk_c.c       **** 
 153:mtk_c.c       **** //齊藤作成
 154:mtk_c.c       **** //引数としてセマフォID（割り込み時のレジスタD1が保持）をとる
 155:mtk_c.c       **** //1.セマフォの値を減らす
 156:mtk_c.c       **** //2.セマフォが獲得（セマフォの値が０以上）ならばなにもしない（ユー
 157:mtk_c.c       **** //セマフォが獲得できない（セマフォの値が負）ならばsleep(s_id)を実行し
 158:mtk_c.c       **** 
 159:mtk_c.c       **** 
 160:mtk_c.c       **** void p_body(TASK_ID_TYPE s_id){
 161:mtk_c.c       **** 	semaphore[s_id].count --;
 162:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 163:mtk_c.c       **** 		sleep(s_id);
 164:mtk_c.c       **** 		}


 165:mtk_c.c       **** }
 166:mtk_c.c       **** 
 167:mtk_c.c       **** void sleep(int ch){
 589               		.loc 1 167 19 view -0
 590               		.cfi_startproc
 591               		.loc 1 167 19 is_stmt 0 view .LVU206
 592 025a 2F02      		move.l %d2,-(%sp)
 593               		.cfi_def_cfa_offset 8
 594               		.cfi_offset 2, -8
 168:mtk_c.c       **** 	addq(&semaphore[ch].task_list, curr_task);		//ch＝セマフォIDの待ち行列に現タスクを
 595               		.loc 1 168 2 is_stmt 1 view .LVU207
 596 025c 2439 0000 		move.l curr_task,%d2
 596      0000 
 597               	.LVL52:
 598               	.LBB50:
 599               	.LBI50:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 600               		.loc 1 116 6 view .LVU208
 601               	.LBB51:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 602               		.loc 1 117 2 view .LVU209
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 603               		.loc 1 117 5 is_stmt 0 view .LVU210
 604 0262 202F 0008 		move.l 8(%sp),%d0
 605 0266 E788      		lsl.l #3,%d0
 606 0268 0680 0000 		add.l #semaphore+4,%d0
 606      0000 
 607               	.LVL53:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 608               		.loc 1 117 5 view .LVU211
 609 026e 2040      		move.l %d0,%a0
 610 0270 2210      		move.l (%a0),%d1
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 611               		.loc 1 117 4 view .LVU212
 612 0272 6636      		jne .L51
 118:mtk_c.c       **** 	}
 613               		.loc 1 118 3 is_stmt 1 view .LVU213
 118:mtk_c.c       **** 	}
 614               		.loc 1 118 12 is_stmt 0 view .LVU214
 615 0274 2082      		move.l %d2,(%a0)
 616 0276 43F9 0000 		lea task_tab,%a1
 616      0000 
 617               	.LVL54:
 118:mtk_c.c       **** 	}
 618               		.loc 1 118 12 view .LVU215
 619               	.LBE51:
 620               	.LBE50:
 169:mtk_c.c       **** 	sched();						//次に実行するタスクのIDをnext_taskにセット
 621               		.loc 1 169 2 is_stmt 1 view .LVU216
 622               	.LBB54:
 623               	.LBI54:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 624               		.loc 1 146 6 view .LVU217
 625               	.LBB55:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 626               		.loc 1 147 2 view .LVU218
 627               	.LBB56:


 628               	.LBI56:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 629               		.loc 1 135 14 view .LVU219
 630               	.LBB57:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 631               		.loc 1 136 2 view .LVU220
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 632               		.loc 1 136 15 is_stmt 0 view .LVU221
 633 027c 2239 0000 		move.l ready,%d1
 633      0000 
 634               	.LVL55:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 635               		.loc 1 137 2 is_stmt 1 view .LVU222
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 636               		.loc 1 137 4 is_stmt 0 view .LVU223
 637 0282 6774      		jeq .L55
 638               	.L61:
 639               	.LBB58:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 640               		.loc 1 138 3 is_stmt 1 view .LVU224
 641               	.LVL56:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 642               		.loc 1 139 3 view .LVU225
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 643               		.loc 1 139 25 is_stmt 0 view .LVU226
 644 0284 2001      		move.l %d1,%d0
 645 0286 D081      		add.l %d1,%d0
 646 0288 D080      		add.l %d0,%d0
 647 028a D081      		add.l %d1,%d0
 648 028c D080      		add.l %d0,%d0
 649 028e D080      		add.l %d0,%d0
 650 0290 41F1 0810 		lea 16(%a1,%d0.l),%a0
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 651               		.loc 1 139 12 view .LVU227
 652 0294 23D0 0000 		move.l (%a0),ready
 652      0000 
 140:mtk_c.c       **** 	}
 653               		.loc 1 140 3 is_stmt 1 view .LVU228
 140:mtk_c.c       **** 	}
 654               		.loc 1 140 20 is_stmt 0 view .LVU229
 655 029a 4290      		clr.l (%a0)
 656               	.LBE58:
 142:mtk_c.c       **** }
 657               		.loc 1 142 2 is_stmt 1 view .LVU230
 658               	.LVL57:
 142:mtk_c.c       **** }
 659               		.loc 1 142 2 is_stmt 0 view .LVU231
 660               	.LBE57:
 661               	.LBE56:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 662               		.loc 1 147 12 view .LVU232
 663 029c 23C1 0000 		move.l %d1,next_task
 663      0000 
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 664               		.loc 1 148 2 is_stmt 1 view .LVU233
 665               	.LBE55:
 666               	.LBE54:


 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 667               		.loc 1 170 2 view .LVU234
 171:mtk_c.c       **** }
 668               		.loc 1 171 1 is_stmt 0 view .LVU235
 669 02a2 241F      		move.l (%sp)+,%d2
 170:mtk_c.c       **** 	swtch();						//タスクを切り替える
 670               		.loc 1 170 2 view .LVU236
 671 02a4 4EF9 0000 		jra swtch
 671      0000 
 672               	.LVL58:
 673               	.L51:
 674               	.LBB62:
 675               	.LBB53:
 676               	.LBB52:
 121:mtk_c.c       **** 		while(1){
 677               		.loc 1 121 3 is_stmt 1 view .LVU237
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 678               		.loc 1 122 3 view .LVU238
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 679               		.loc 1 123 4 view .LVU239
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 680               		.loc 1 123 18 is_stmt 0 view .LVU240
 681 02aa 43F9 0000 		lea task_tab,%a1
 681      0000 
 682 02b0 2001      		move.l %d1,%d0
 683               	.LVL59:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 684               		.loc 1 123 18 view .LVU241
 685 02b2 D081      		add.l %d1,%d0
 686 02b4 D080      		add.l %d0,%d0
 687 02b6 D081      		add.l %d1,%d0
 688 02b8 D080      		add.l %d0,%d0
 689 02ba D080      		add.l %d0,%d0
 690 02bc 41F1 0800 		lea (%a1,%d0.l),%a0
 691               	.LVL60:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 692               		.loc 1 123 18 view .LVU242
 693 02c0 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 694               		.loc 1 123 6 view .LVU243
 695 02c4 6726      		jeq .L54
 696               	.LVL61:
 697               	.L53:
 128:mtk_c.c       **** 			}
 698               		.loc 1 128 5 is_stmt 1 view .LVU244
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 699               		.loc 1 122 8 view .LVU245
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 700               		.loc 1 122 3 view .LVU246
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 701               		.loc 1 123 4 view .LVU247
 702 02c6 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 703               		.loc 1 123 18 is_stmt 0 view .LVU248
 704 02c8 D080      		add.l %d0,%d0
 705               	.LVL62:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録


 706               		.loc 1 123 18 view .LVU249
 707 02ca D080      		add.l %d0,%d0
 708 02cc D081      		add.l %d1,%d0
 709 02ce D080      		add.l %d0,%d0
 710 02d0 D080      		add.l %d0,%d0
 711 02d2 2031 0810 		move.l 16(%a1,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 712               		.loc 1 123 6 view .LVU250
 713 02d6 66EE      		jne .L53
 128:mtk_c.c       **** 			}
 714               		.loc 1 128 14 view .LVU251
 715 02d8 2001      		move.l %d1,%d0
 716 02da D081      		add.l %d1,%d0
 717 02dc D080      		add.l %d0,%d0
 718 02de D081      		add.l %d1,%d0
 719 02e0 D080      		add.l %d0,%d0
 720 02e2 D080      		add.l %d0,%d0
 721 02e4 2040      		move.l %d0,%a0
 722 02e6 D1FC 0000 		add.l #task_tab,%a0
 722      0000 
 723               	.LVL63:
 724               	.L54:
 124:mtk_c.c       **** 				break;
 725               		.loc 1 124 5 is_stmt 1 view .LVU252
 124:mtk_c.c       **** 				break;
 726               		.loc 1 124 22 is_stmt 0 view .LVU253
 727 02ec 2142 0010 		move.l %d2,16(%a0)
 125:mtk_c.c       **** 			}
 728               		.loc 1 125 5 is_stmt 1 view .LVU254
 729               	.LVL64:
 125:mtk_c.c       **** 			}
 730               		.loc 1 125 5 is_stmt 0 view .LVU255
 731               	.LBE52:
 732               	.LBE53:
 733               	.LBE62:
 169:mtk_c.c       **** 	swtch();						//タスクを切り替える
 734               		.loc 1 169 2 is_stmt 1 view .LVU256
 735               	.LBB63:
 146:mtk_c.c       **** 	next_task = removeq(&ready);					// readyキューの先頭のタスクIDを取り出し、next_ta
 736               		.loc 1 146 6 view .LVU257
 737               	.LBB61:
 147:mtk_c.c       **** 	if(next_task == NULLTASKID){
 738               		.loc 1 147 2 view .LVU258
 739               	.LBB60:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 740               		.loc 1 135 14 view .LVU259
 741               	.LBB59:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 742               		.loc 1 136 2 view .LVU260
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 743               		.loc 1 136 15 is_stmt 0 view .LVU261
 744 02f0 2239 0000 		move.l ready,%d1
 744      0000 
 745               	.LVL65:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 746               		.loc 1 137 2 is_stmt 1 view .LVU262
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定


 747               		.loc 1 137 4 is_stmt 0 view .LVU263
 748 02f6 668C      		jne .L61
 749               	.L55:
 142:mtk_c.c       **** }
 750               		.loc 1 142 2 is_stmt 1 view .LVU264
 751               	.LVL66:
 142:mtk_c.c       **** }
 752               		.loc 1 142 2 is_stmt 0 view .LVU265
 753               	.LBE59:
 754               	.LBE60:
 148:mtk_c.c       **** 		while(1); 									// 次のタスクができるまで無限ループ
 755               		.loc 1 148 2 is_stmt 1 view .LVU266
 756               	.L56:
 149:mtk_c.c       **** 	}		
 757               		.loc 1 149 3 view .LVU267
 149:mtk_c.c       **** 	}		
 758               		.loc 1 149 8 view .LVU268
 149:mtk_c.c       **** 	}		
 759               		.loc 1 149 3 view .LVU269
 149:mtk_c.c       **** 	}		
 760               		.loc 1 149 8 view .LVU270
 761 02f8 60FE      		jra .L56
 762               	.LBE61:
 763               	.LBE63:
 764               		.cfi_endproc
 765               	.LFE11:
 766               		.size	sleep, .-sleep
 767               		.align	2
 768               		.globl	p_body
 769               		.type	p_body, @function
 770               	p_body:
 771               	.LVL67:
 772               	.LFB10:
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 773               		.loc 1 160 31 view -0
 774               		.cfi_startproc
 160:mtk_c.c       **** 	semaphore[s_id].count --;
 775               		.loc 1 160 31 is_stmt 0 view .LVU272
 776 02fa 2F02      		move.l %d2,-(%sp)
 777               		.cfi_def_cfa_offset 8
 778               		.cfi_offset 2, -8
 779 02fc 242F 0008 		move.l 8(%sp),%d2
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 780               		.loc 1 161 2 is_stmt 1 view .LVU273
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 781               		.loc 1 161 17 is_stmt 0 view .LVU274
 782 0300 41F9 0000 		lea semaphore,%a0
 782      0000 
 783 0306 2202      		move.l %d2,%d1
 784 0308 E789      		lsl.l #3,%d1
 161:mtk_c.c       **** 	if(semaphore[s_id].count < 0){
 785               		.loc 1 161 24 view .LVU275
 786 030a 2030 1800 		move.l (%a0,%d1.l),%d0
 787 030e 5380      		subq.l #1,%d0
 788 0310 2180 1800 		move.l %d0,(%a0,%d1.l)
 162:mtk_c.c       **** 		sleep(s_id);
 789               		.loc 1 162 2 is_stmt 1 view .LVU276


 162:mtk_c.c       **** 		sleep(s_id);
 790               		.loc 1 162 4 is_stmt 0 view .LVU277
 791 0314 6B04      		jmi .L66
 165:mtk_c.c       **** 
 792               		.loc 1 165 1 view .LVU278
 793 0316 241F      		move.l (%sp)+,%d2
 794 0318 4E75      		rts
 795               	.L66:
 163:mtk_c.c       **** 		}
 796               		.loc 1 163 3 is_stmt 1 view .LVU279
 797 031a 2F42 0008 		move.l %d2,8(%sp)
 165:mtk_c.c       **** 
 798               		.loc 1 165 1 is_stmt 0 view .LVU280
 799 031e 241F      		move.l (%sp)+,%d2
 163:mtk_c.c       **** 		}
 800               		.loc 1 163 3 view .LVU281
 801 0320 6000 FF38 		jra sleep
 802               	.LVL68:
 803               		.cfi_endproc
 804               	.LFE10:
 805               		.size	p_body, .-p_body
 806               		.align	2
 807               		.globl	wakeup
 808               		.type	wakeup, @function
 809               	wakeup:
 810               	.LVL69:
 811               	.LFB13:
 172:mtk_c.c       **** 
 173:mtk_c.c       **** //後藤作成
 174:mtk_c.c       **** //1. セマフォの値を増やす
 175:mtk_c.c       **** //2. セマフォが空けば，wakeup(セマフォの ID) を実行して，そのセマフォを
 176:mtk_c.c       **** //   を一つ，実行可能状態にする．
 177:mtk_c.c       **** 
 178:mtk_c.c       **** void v_body(TASK_ID_TYPE s_id){
 179:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 180:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 181:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 182:mtk_c.c       **** 	}
 183:mtk_c.c       **** }
 184:mtk_c.c       **** 
 185:mtk_c.c       **** void wakeup(int ch){
 812               		.loc 1 185 20 is_stmt 1 view -0
 813               		.cfi_startproc
 814               		.loc 1 185 20 is_stmt 0 view .LVU283
 815 0324 2F0A      		move.l %a2,-(%sp)
 816               		.cfi_def_cfa_offset 8
 817               		.cfi_offset 10, -8
 186:mtk_c.c       **** 	TASK_ID_TYPE wakeup_id;
 818               		.loc 1 186 2 is_stmt 1 view .LVU284
 187:mtk_c.c       **** 	wakeup_id=removeq(&semaphore[ch].task_list); //セマフォから待ちタスクを除去
 819               		.loc 1 187 2 view .LVU285
 820               	.LVL70:
 821               	.LBB64:
 822               	.LBI64:
 135:mtk_c.c       **** 	TASK_ID_TYPE r_id = *que_ptr; 					// 返り値(id)
 823               		.loc 1 135 14 view .LVU286
 824               	.LBB65:


 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 825               		.loc 1 136 2 view .LVU287
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 826               		.loc 1 136 15 is_stmt 0 view .LVU288
 827 0326 202F 0008 		move.l 8(%sp),%d0
 828 032a E788      		lsl.l #3,%d0
 829 032c 0680 0000 		add.l #semaphore+4,%d0
 829      0000 
 830               	.LVL71:
 136:mtk_c.c       **** 	if(r_id != NULLTASKID){							// キューの先頭が空でなければ
 831               		.loc 1 136 15 view .LVU289
 832 0332 2040      		move.l %d0,%a0
 833 0334 2250      		move.l (%a0),%a1
 834               	.LVL72:
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 835               		.loc 1 137 2 is_stmt 1 view .LVU290
 137:mtk_c.c       **** 		TCB_TYPE* task_ptr = &task_tab[r_id]; 		// 先頭のタスクのポインタ設定
 836               		.loc 1 137 4 is_stmt 0 view .LVU291
 837 0336 B2FC 0000 		cmp.w #0,%a1
 838 033a 6718      		jeq .L68
 839               	.LBB66:
 138:mtk_c.c       **** 		*que_ptr = (*task_ptr).next; 				// 先頭から2番目のタスクを先頭にする
 840               		.loc 1 138 3 is_stmt 1 view .LVU292
 841               	.LVL73:
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 842               		.loc 1 139 3 view .LVU293
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 843               		.loc 1 139 25 is_stmt 0 view .LVU294
 844 033c 41F1 9800 		lea (%a1,%a1.l),%a0
 845 0340 D1C8      		add.l %a0,%a0
 846 0342 D1C9      		add.l %a1,%a0
 847 0344 D1C8      		add.l %a0,%a0
 848 0346 D1C8      		add.l %a0,%a0
 849 0348 D1FC 0000 		add.l #task_tab+16,%a0
 849      0000 
 139:mtk_c.c       **** 		(*task_ptr).next = NULLTASKID;				// 先頭のタスクのnextはNULLTASKIDにして、タスク
 850               		.loc 1 139 12 view .LVU295
 851 034e 2440      		move.l %d0,%a2
 852 0350 2490      		move.l (%a0),(%a2)
 140:mtk_c.c       **** 	}
 853               		.loc 1 140 3 is_stmt 1 view .LVU296
 140:mtk_c.c       **** 	}
 854               		.loc 1 140 20 is_stmt 0 view .LVU297
 855 0352 4290      		clr.l (%a0)
 856               	.LVL74:
 857               	.L68:
 140:mtk_c.c       **** 	}
 858               		.loc 1 140 20 view .LVU298
 859               	.LBE66:
 142:mtk_c.c       **** }
 860               		.loc 1 142 2 is_stmt 1 view .LVU299
 142:mtk_c.c       **** }
 861               		.loc 1 142 2 is_stmt 0 view .LVU300
 862               	.LBE65:
 863               	.LBE64:
 188:mtk_c.c       **** 	addq(&ready,wakeup_id); //実行可能状態行列（ready）へつなぐ
 864               		.loc 1 188 2 is_stmt 1 view .LVU301


 865               	.LBB67:
 866               	.LBI67:
 116:mtk_c.c       **** 	if(*que_ptr == NULLTASKID){					// キューの先頭のタスクが空なら
 867               		.loc 1 116 6 view .LVU302
 868               	.LBB68:
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 869               		.loc 1 117 2 view .LVU303
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 870               		.loc 1 117 5 is_stmt 0 view .LVU304
 871 0354 2239 0000 		move.l ready,%d1
 871      0000 
 117:mtk_c.c       **** 		*que_ptr = id; 							// 先頭にタスクを登録
 872               		.loc 1 117 4 view .LVU305
 873 035a 660A      		jne .L69
 118:mtk_c.c       **** 	}
 874               		.loc 1 118 3 is_stmt 1 view .LVU306
 118:mtk_c.c       **** 	}
 875               		.loc 1 118 12 is_stmt 0 view .LVU307
 876 035c 23C9 0000 		move.l %a1,ready
 876      0000 
 877               	.LBE68:
 878               	.LBE67:
 189:mtk_c.c       **** }
 879               		.loc 1 189 1 view .LVU308
 880 0362 245F      		move.l (%sp)+,%a2
 881 0364 4E75      		rts
 882               	.L69:
 883               	.LBB71:
 884               	.LBB70:
 885               	.LBB69:
 121:mtk_c.c       **** 		while(1){
 886               		.loc 1 121 3 is_stmt 1 view .LVU309
 887               	.LVL75:
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 888               		.loc 1 122 3 view .LVU310
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 889               		.loc 1 123 4 view .LVU311
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 890               		.loc 1 123 18 is_stmt 0 view .LVU312
 891 0366 45F9 0000 		lea task_tab,%a2
 891      0000 
 892 036c 2001      		move.l %d1,%d0
 893 036e D081      		add.l %d1,%d0
 894 0370 D080      		add.l %d0,%d0
 895 0372 D081      		add.l %d1,%d0
 896 0374 D080      		add.l %d0,%d0
 897 0376 D080      		add.l %d0,%d0
 898 0378 41F2 0800 		lea (%a2,%d0.l),%a0
 899 037c 2028 0010 		move.l 16(%a0),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 900               		.loc 1 123 6 view .LVU313
 901 0380 6726      		jeq .L72
 902               	.LVL76:
 903               	.L71:
 128:mtk_c.c       **** 			}
 904               		.loc 1 128 5 is_stmt 1 view .LVU314
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら


 905               		.loc 1 122 8 view .LVU315
 122:mtk_c.c       **** 			if((*task_ptr).next == NULLTASKID){		// その次のタスクが空だったら
 906               		.loc 1 122 3 view .LVU316
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 907               		.loc 1 123 4 view .LVU317
 908 0382 2200      		move.l %d0,%d1
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 909               		.loc 1 123 18 is_stmt 0 view .LVU318
 910 0384 D080      		add.l %d0,%d0
 911               	.LVL77:
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 912               		.loc 1 123 18 view .LVU319
 913 0386 D080      		add.l %d0,%d0
 914 0388 D081      		add.l %d1,%d0
 915 038a D080      		add.l %d0,%d0
 916 038c D080      		add.l %d0,%d0
 917 038e 2032 0810 		move.l 16(%a2,%d0.l),%d0
 123:mtk_c.c       **** 				(*task_ptr).next = id;				// タスクを登録
 918               		.loc 1 123 6 view .LVU320
 919 0392 66EE      		jne .L71
 128:mtk_c.c       **** 			}
 920               		.loc 1 128 14 view .LVU321
 921 0394 2001      		move.l %d1,%d0
 922 0396 D081      		add.l %d1,%d0
 923 0398 D080      		add.l %d0,%d0
 924 039a D081      		add.l %d1,%d0
 925 039c D080      		add.l %d0,%d0
 926 039e D080      		add.l %d0,%d0
 927 03a0 2040      		move.l %d0,%a0
 928 03a2 D1FC 0000 		add.l #task_tab,%a0
 928      0000 
 929               	.LVL78:
 930               	.L72:
 124:mtk_c.c       **** 				break;
 931               		.loc 1 124 5 is_stmt 1 view .LVU322
 124:mtk_c.c       **** 				break;
 932               		.loc 1 124 22 is_stmt 0 view .LVU323
 933 03a8 2149 0010 		move.l %a1,16(%a0)
 125:mtk_c.c       **** 			}
 934               		.loc 1 125 5 is_stmt 1 view .LVU324
 935               	.LBE69:
 936               	.LBE70:
 937               	.LBE71:
 938               		.loc 1 189 1 is_stmt 0 view .LVU325
 939 03ac 245F      		move.l (%sp)+,%a2
 940 03ae 4E75      		rts
 941               		.cfi_endproc
 942               	.LFE13:
 943               		.size	wakeup, .-wakeup
 944               		.align	2
 945               		.globl	v_body
 946               		.type	v_body, @function
 947               	v_body:
 948               	.LVL79:
 949               	.LFB12:
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 950               		.loc 1 178 31 is_stmt 1 view -0


 951               		.cfi_startproc
 178:mtk_c.c       **** 	semaphore[s_id].count++; //セマフォの値を増やす
 952               		.loc 1 178 31 is_stmt 0 view .LVU327
 953 03b0 2F02      		move.l %d2,-(%sp)
 954               		.cfi_def_cfa_offset 8
 955               		.cfi_offset 2, -8
 956 03b2 242F 0008 		move.l 8(%sp),%d2
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 957               		.loc 1 179 2 is_stmt 1 view .LVU328
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 958               		.loc 1 179 17 is_stmt 0 view .LVU329
 959 03b6 41F9 0000 		lea semaphore,%a0
 959      0000 
 960 03bc 2202      		move.l %d2,%d1
 961 03be E789      		lsl.l #3,%d1
 179:mtk_c.c       **** 	if(semaphore[s_id].count<=0){
 962               		.loc 1 179 23 view .LVU330
 963 03c0 2030 1800 		move.l (%a0,%d1.l),%d0
 964 03c4 5280      		addq.l #1,%d0
 965 03c6 2180 1800 		move.l %d0,(%a0,%d1.l)
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 966               		.loc 1 180 2 is_stmt 1 view .LVU331
 180:mtk_c.c       **** 		wakeup(s_id);         //セマフォを待っているタスクを実行可能状態に
 967               		.loc 1 180 4 is_stmt 0 view .LVU332
 968 03ca 6F04      		jle .L84
 183:mtk_c.c       **** 
 969               		.loc 1 183 1 view .LVU333
 970 03cc 241F      		move.l (%sp)+,%d2
 971 03ce 4E75      		rts
 972               	.L84:
 181:mtk_c.c       **** 	}
 973               		.loc 1 181 3 is_stmt 1 view .LVU334
 974 03d0 2F42 0008 		move.l %d2,8(%sp)
 183:mtk_c.c       **** 
 975               		.loc 1 183 1 is_stmt 0 view .LVU335
 976 03d4 241F      		move.l (%sp)+,%d2
 181:mtk_c.c       **** 	}
 977               		.loc 1 181 3 view .LVU336
 978 03d6 6000 FF4C 		jra wakeup
 979               	.LVL80:
 980               		.cfi_endproc
 981               	.LFE12:
 982               		.size	v_body, .-v_body
 983               		.globl	ready
 984               		.section	.bss
 985               		.align	2
 986               		.type	ready, @object
 987               		.size	ready, 4
 988               	ready:
 989 0000 0000 0000 		.zero	4
 990               		.globl	next_task
 991               		.align	2
 992               		.type	next_task, @object
 993               		.size	next_task, 4
 994               	next_task:
 995 0004 0000 0000 		.zero	4
 996               		.globl	new_task


 997               		.align	2
 998               		.type	new_task, @object
 999               		.size	new_task, 4
 1000               	new_task:
 1001 0008 0000 0000 		.zero	4
 1002               		.globl	curr_task
 1003               		.align	2
 1004               		.type	curr_task, @object
 1005               		.size	curr_task, 4
 1006               	curr_task:
 1007 000c 0000 0000 		.zero	4
 1008               		.globl	stacks
 1009               		.type	stacks, @object
 1010               		.size	stacks, 10240
 1011               	stacks:
 1012 0010 0000 0000 		.zero	10240
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1012      0000 0000 
 1013               		.globl	task_tab
 1014               		.align	2
 1015               		.type	task_tab, @object
 1016               		.size	task_tab, 120
 1017               	task_tab:
 1018 2810 0000 0000 		.zero	120
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1019               		.globl	semaphore
 1020               		.align	2
 1021               		.type	semaphore, @object
 1022               		.size	semaphore, 24
 1023               	semaphore:
 1024 2888 0000 0000 		.zero	24
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1024      0000 0000 
 1025               		.text
 1026               	.Letext0:
 1027               		.file 2 "mtk_c.h"
 1028               		.file 3 "<built-in>"
 1029               		.section	.debug_info,"",@progbits
 1030               	.Ldebug_info0:
 1031 0000 0000 0789 		.long	0x789
 1032 0004 0005      		.word	0x5
 1033 0006 01        		.byte	0x1
 1034 0007 04        		.byte	0x4
 1035 0008 0000 0000 		.long	.Ldebug_abbrev0
 1036 000c 21        		.uleb128 0x21
 1037 000d 0000 0000 		.long	.LASF53
 1038 0011 1D        		.byte	0x1d
 1039 0012 0000 0000 		.long	.LASF54
 1040 0016 0000 0000 		.long	.LASF55
 1041 001a 0000 0000 		.long	.Ltext0


 1042 001e 0000 03DA 		.long	.Letext0-.Ltext0
 1043 0022 0000 0000 		.long	.Ldebug_line0
 1044 0026 02        		.uleb128 0x2
 1045 0027 01        		.byte	0x1
 1046 0028 06        		.byte	0x6
 1047 0029 0000 0000 		.long	.LASF0
 1048 002d 02        		.uleb128 0x2
 1049 002e 01        		.byte	0x1
 1050 002f 08        		.byte	0x8
 1051 0030 0000 0000 		.long	.LASF1
 1052 0034 02        		.uleb128 0x2
 1053 0035 02        		.byte	0x2
 1054 0036 05        		.byte	0x5
 1055 0037 0000 0000 		.long	.LASF2
 1056 003b 02        		.uleb128 0x2
 1057 003c 02        		.byte	0x2
 1058 003d 07        		.byte	0x7
 1059 003e 0000 0000 		.long	.LASF3
 1060 0042 02        		.uleb128 0x2
 1061 0043 04        		.byte	0x4
 1062 0044 05        		.byte	0x5
 1063 0045 0000 0000 		.long	.LASF4
 1064 0049 02        		.uleb128 0x2
 1065 004a 04        		.byte	0x4
 1066 004b 07        		.byte	0x7
 1067 004c 0000 0000 		.long	.LASF5
 1068 0050 02        		.uleb128 0x2
 1069 0051 08        		.byte	0x8
 1070 0052 05        		.byte	0x5
 1071 0053 0000 0000 		.long	.LASF6
 1072 0057 02        		.uleb128 0x2
 1073 0058 08        		.byte	0x8
 1074 0059 07        		.byte	0x7
 1075 005a 0000 0000 		.long	.LASF7
 1076 005e 02        		.uleb128 0x2
 1077 005f 0C        		.byte	0xc
 1078 0060 04        		.byte	0x4
 1079 0061 0000 0000 		.long	.LASF8
 1080 0065 02        		.uleb128 0x2
 1081 0066 04        		.byte	0x4
 1082 0067 07        		.byte	0x7
 1083 0068 0000 0000 		.long	.LASF9
 1084 006c 22        		.uleb128 0x22
 1085 006d 04        		.byte	0x4
 1086 006e 05        		.byte	0x5
 1087 006f 696E 7400 		.string	"int"
 1088 0073 23        		.uleb128 0x23
 1089 0074 04        		.byte	0x4
 1090 0075 02        		.uleb128 0x2
 1091 0076 01        		.byte	0x1
 1092 0077 06        		.byte	0x6
 1093 0078 0000 0000 		.long	.LASF10
 1094 007c 0D        		.uleb128 0xd
 1095 007d 0000 0000 		.long	.LASF13
 1096 0081 14        		.byte	0x14
 1097 0082 0D        		.byte	0xd
 1098 0083 0000 006C 		.long	0x6c


 1099 0087 17        		.uleb128 0x17
 1100 0088 08        		.byte	0x8
 1101 0089 16        		.byte	0x16
 1102 008a 0000 00A7 		.long	0xa7
 1103 008e 05        		.uleb128 0x5
 1104 008f 0000 0000 		.long	.LASF11
 1105 0093 17        		.byte	0x17
 1106 0094 0F        		.byte	0xf
 1107 0095 0000 006C 		.long	0x6c
 1108 0099 00        		.byte	0
 1109 009a 05        		.uleb128 0x5
 1110 009b 0000 0000 		.long	.LASF12
 1111 009f 18        		.byte	0x18
 1112 00a0 0F        		.byte	0xf
 1113 00a1 0000 007C 		.long	0x7c
 1114 00a5 04        		.byte	0x4
 1115 00a6 00        		.byte	0
 1116 00a7 0D        		.uleb128 0xd
 1117 00a8 0000 0000 		.long	.LASF14
 1118 00ac 19        		.byte	0x19
 1119 00ad 03        		.byte	0x3
 1120 00ae 0000 0087 		.long	0x87
 1121 00b2 17        		.uleb128 0x17
 1122 00b3 14        		.byte	0x14
 1123 00b4 1B        		.byte	0x1b
 1124 00b5 0000 00F6 		.long	0xf6
 1125 00b9 05        		.uleb128 0x5
 1126 00ba 0000 0000 		.long	.LASF15
 1127 00be 1C        		.byte	0x1c
 1128 00bf 0E        		.byte	0xe
 1129 00c0 0000 00FD 		.long	0xfd
 1130 00c4 00        		.byte	0
 1131 00c5 05        		.uleb128 0x5
 1132 00c6 0000 0000 		.long	.LASF16
 1133 00ca 1D        		.byte	0x1d
 1134 00cb 0D        		.byte	0xd
 1135 00cc 0000 0073 		.long	0x73
 1136 00d0 04        		.byte	0x4
 1137 00d1 05        		.uleb128 0x5
 1138 00d2 0000 0000 		.long	.LASF17
 1139 00d6 1E        		.byte	0x1e
 1140 00d7 0F        		.byte	0xf
 1141 00d8 0000 006C 		.long	0x6c
 1142 00dc 08        		.byte	0x8
 1143 00dd 05        		.uleb128 0x5
 1144 00de 0000 0000 		.long	.LASF18
 1145 00e2 1F        		.byte	0x1f
 1146 00e3 0F        		.byte	0xf
 1147 00e4 0000 006C 		.long	0x6c
 1148 00e8 0C        		.byte	0xc
 1149 00e9 05        		.uleb128 0x5
 1150 00ea 0000 0000 		.long	.LASF19
 1151 00ee 20        		.byte	0x20
 1152 00ef 0F        		.byte	0xf
 1153 00f0 0000 007C 		.long	0x7c
 1154 00f4 10        		.byte	0x10
 1155 00f5 00        		.byte	0


 1156 00f6 24        		.uleb128 0x24
 1157 00f7 0000 00FD 		.long	0xfd
 1158 00fb 09        		.uleb128 0x9
 1159 00fc 00        		.byte	0
 1160 00fd 0A        		.uleb128 0xa
 1161 00fe 0000 00F6 		.long	0xf6
 1162 0102 0D        		.uleb128 0xd
 1163 0103 0000 0000 		.long	.LASF20
 1164 0107 21        		.byte	0x21
 1165 0108 03        		.byte	0x3
 1166 0109 0000 00B2 		.long	0xb2
 1167 010d 25        		.uleb128 0x25
 1168 010e 0800      		.word	0x800
 1169 0110 02        		.byte	0x2
 1170 0111 23        		.byte	0x23
 1171 0112 09        		.byte	0x9
 1172 0113 0000 0132 		.long	0x132
 1173 0117 05        		.uleb128 0x5
 1174 0118 0000 0000 		.long	.LASF21
 1175 011c 24        		.byte	0x24
 1176 011d 0F        		.byte	0xf
 1177 011e 0000 0132 		.long	0x132
 1178 0122 00        		.byte	0
 1179 0123 26        		.uleb128 0x26
 1180 0124 0000 0000 		.long	.LASF22
 1181 0128 02        		.byte	0x2
 1182 0129 25        		.byte	0x25
 1183 012a 0F        		.byte	0xf
 1184 012b 0000 0132 		.long	0x132
 1185 012f 0400      		.word	0x400
 1186 0131 00        		.byte	0
 1187 0132 0E        		.uleb128 0xe
 1188 0133 0000 0075 		.long	0x75
 1189 0137 0000 0143 		.long	0x143
 1190 013b 27        		.uleb128 0x27
 1191 013c 0000 0049 		.long	0x49
 1192 0140 03FF      		.word	0x3ff
 1193 0142 00        		.byte	0
 1194 0143 0D        		.uleb128 0xd
 1195 0144 0000 0000 		.long	.LASF23
 1196 0148 26        		.byte	0x26
 1197 0149 03        		.byte	0x3
 1198 014a 0000 010D 		.long	0x10d
 1199 014e 0E        		.uleb128 0xe
 1200 014f 0000 00A7 		.long	0xa7
 1201 0153 0000 015E 		.long	0x15e
 1202 0157 12        		.uleb128 0x12
 1203 0158 0000 0049 		.long	0x49
 1204 015c 02        		.byte	0x2
 1205 015d 00        		.byte	0
 1206 015e 06        		.uleb128 0x6
 1207 015f 0000 0000 		.long	.LASF24
 1208 0163 2B        		.byte	0x2b
 1209 0164 18        		.byte	0x18
 1210 0165 0000 014E 		.long	0x14e
 1211 0169 0E        		.uleb128 0xe
 1212 016a 0000 0102 		.long	0x102


 1213 016e 0000 0179 		.long	0x179
 1214 0172 12        		.uleb128 0x12
 1215 0173 0000 0049 		.long	0x49
 1216 0177 05        		.byte	0x5
 1217 0178 00        		.byte	0
 1218 0179 06        		.uleb128 0x6
 1219 017a 0000 0000 		.long	.LASF25
 1220 017e 2C        		.byte	0x2c
 1221 017f 16        		.byte	0x16
 1222 0180 0000 0169 		.long	0x169
 1223 0184 0E        		.uleb128 0xe
 1224 0185 0000 0143 		.long	0x143
 1225 0189 0000 0194 		.long	0x194
 1226 018d 12        		.uleb128 0x12
 1227 018e 0000 0049 		.long	0x49
 1228 0192 04        		.byte	0x4
 1229 0193 00        		.byte	0
 1230 0194 06        		.uleb128 0x6
 1231 0195 0000 0000 		.long	.LASF26
 1232 0199 2D        		.byte	0x2d
 1233 019a 17        		.byte	0x17
 1234 019b 0000 0184 		.long	0x184
 1235 019f 06        		.uleb128 0x6
 1236 01a0 0000 0000 		.long	.LASF27
 1237 01a4 2F        		.byte	0x2f
 1238 01a5 15        		.byte	0x15
 1239 01a6 0000 007C 		.long	0x7c
 1240 01aa 06        		.uleb128 0x6
 1241 01ab 0000 0000 		.long	.LASF28
 1242 01af 30        		.byte	0x30
 1243 01b0 15        		.byte	0x15
 1244 01b1 0000 007C 		.long	0x7c
 1245 01b5 06        		.uleb128 0x6
 1246 01b6 0000 0000 		.long	.LASF29
 1247 01ba 31        		.byte	0x31
 1248 01bb 15        		.byte	0x15
 1249 01bc 0000 007C 		.long	0x7c
 1250 01c0 06        		.uleb128 0x6
 1251 01c1 0000 0000 		.long	.LASF30
 1252 01c5 32        		.byte	0x32
 1253 01c6 15        		.byte	0x15
 1254 01c7 0000 007C 		.long	0x7c
 1255 01cb 07        		.uleb128 0x7
 1256 01cc 0000 015E 		.long	0x15e
 1257 01d0 04        		.byte	0x4
 1258 01d1 11        		.byte	0x11
 1259 01d2 05        		.uleb128 0x5
 1260 01d3 03        		.byte	0x3
 1261 01d4 0000 0000 		.long	semaphore
 1262 01d8 07        		.uleb128 0x7
 1263 01d9 0000 0179 		.long	0x179
 1264 01dd 05        		.byte	0x5
 1265 01de 0F        		.byte	0xf
 1266 01df 05        		.uleb128 0x5
 1267 01e0 03        		.byte	0x3
 1268 01e1 0000 0000 		.long	task_tab
 1269 01e5 07        		.uleb128 0x7


 1270 01e6 0000 0194 		.long	0x194
 1271 01ea 06        		.byte	0x6
 1272 01eb 10        		.byte	0x10
 1273 01ec 05        		.uleb128 0x5
 1274 01ed 03        		.byte	0x3
 1275 01ee 0000 0000 		.long	stacks
 1276 01f2 07        		.uleb128 0x7
 1277 01f3 0000 019F 		.long	0x19f
 1278 01f7 08        		.byte	0x8
 1279 01f8 0E        		.byte	0xe
 1280 01f9 05        		.uleb128 0x5
 1281 01fa 03        		.byte	0x3
 1282 01fb 0000 0000 		.long	curr_task
 1283 01ff 07        		.uleb128 0x7
 1284 0200 0000 01AA 		.long	0x1aa
 1285 0204 09        		.byte	0x9
 1286 0205 0E        		.byte	0xe
 1287 0206 05        		.uleb128 0x5
 1288 0207 03        		.byte	0x3
 1289 0208 0000 0000 		.long	new_task
 1290 020c 07        		.uleb128 0x7
 1291 020d 0000 01B5 		.long	0x1b5
 1292 0211 0A        		.byte	0xa
 1293 0212 0E        		.byte	0xe
 1294 0213 05        		.uleb128 0x5
 1295 0214 03        		.byte	0x3
 1296 0215 0000 0000 		.long	next_task
 1297 0219 07        		.uleb128 0x7
 1298 021a 0000 01C0 		.long	0x1c0
 1299 021e 0B        		.byte	0xb
 1300 021f 0E        		.byte	0xe
 1301 0220 05        		.uleb128 0x5
 1302 0221 03        		.byte	0x3
 1303 0222 0000 0000 		.long	ready
 1304 0226 0F        		.uleb128 0xf
 1305 0227 0000 0000 		.long	.LASF31
 1306 022b 45        		.byte	0x45
 1307 022c 0000 006C 		.long	0x6c
 1308 0230 0000 0236 		.long	0x236
 1309 0234 09        		.uleb128 0x9
 1310 0235 00        		.byte	0
 1311 0236 0F        		.uleb128 0xf
 1312 0237 0000 0000 		.long	.LASF32
 1313 023b 44        		.byte	0x44
 1314 023c 0000 006C 		.long	0x6c
 1315 0240 0000 0246 		.long	0x246
 1316 0244 09        		.uleb128 0x9
 1317 0245 00        		.byte	0
 1318 0246 0F        		.uleb128 0xf
 1319 0247 0000 0000 		.long	.LASF33
 1320 024b 4C        		.byte	0x4c
 1321 024c 0000 006C 		.long	0x6c
 1322 0250 0000 0256 		.long	0x256
 1323 0254 09        		.uleb128 0x9
 1324 0255 00        		.byte	0
 1325 0256 0F        		.uleb128 0xf
 1326 0257 0000 0000 		.long	.LASF34


 1327 025b 5B        		.byte	0x5b
 1328 025c 0000 006C 		.long	0x6c
 1329 0260 0000 0266 		.long	0x266
 1330 0264 09        		.uleb128 0x9
 1331 0265 00        		.byte	0
 1332 0266 0B        		.uleb128 0xb
 1333 0267 0000 0000 		.long	.LASF36
 1334 026b B9        		.byte	0xb9
 1335 026c 0000 0000 		.long	.LFB13
 1336 0270 0000 008C 		.long	.LFE13-.LFB13
 1337 0274 01        		.uleb128 0x1
 1338 0275 9C        		.byte	0x9c
 1339 0276 0000 032F 		.long	0x32f
 1340 027a 18        		.uleb128 0x18
 1341 027b 6368 00   		.string	"ch"
 1342 027e B9        		.byte	0xb9
 1343 027f 11        		.byte	0x11
 1344 0280 0000 006C 		.long	0x6c
 1345 0284 02        		.uleb128 0x2
 1346 0285 91        		.byte	0x91
 1347 0286 00        		.sleb128 0
 1348 0287 28        		.uleb128 0x28
 1349 0288 0000 0000 		.long	.LASF35
 1350 028c 01        		.byte	0x1
 1351 028d BA        		.byte	0xba
 1352 028e 0F        		.byte	0xf
 1353 028f 0000 007C 		.long	0x7c
 1354 0293 0000 0000 		.long	.LLST29
 1355 0297 0000 0000 		.long	.LVUS29
 1356 029b 13        		.uleb128 0x13
 1357 029c 0000 0464 		.long	0x464
 1358 02a0 0000 0000 		.long	.LBI64
 1359 02a4 02        		.byte	.LVU286
 1360 02a5 0000 0000 		.long	.LBB64
 1361 02a9 0000 002E 		.long	.LBE64-.LBB64
 1362 02ad BB        		.byte	0xbb
 1363 02ae 0C        		.byte	0xc
 1364 02af 0000 02E9 		.long	0x2e9
 1365 02b3 03        		.uleb128 0x3
 1366 02b4 0000 0473 		.long	0x473
 1367 02b8 0000 0000 		.long	.LLST30
 1368 02bc 0000 0000 		.long	.LVUS30
 1369 02c0 01        		.uleb128 0x1
 1370 02c1 0000 047E 		.long	0x47e
 1371 02c5 0000 0000 		.long	.LLST31
 1372 02c9 0000 0000 		.long	.LVUS31
 1373 02cd 04        		.uleb128 0x4
 1374 02ce 0000 0489 		.long	0x489
 1375 02d2 0000 0000 		.long	.LBB66
 1376 02d6 0000 0018 		.long	.LBE66-.LBB66
 1377 02da 01        		.uleb128 0x1
 1378 02db 0000 048A 		.long	0x48a
 1379 02df 0000 0000 		.long	.LLST32
 1380 02e3 0000 0000 		.long	.LVUS32
 1381 02e7 00        		.byte	0
 1382 02e8 00        		.byte	0
 1383 02e9 10        		.uleb128 0x10


 1384 02ea 0000 04A1 		.long	0x4a1
 1385 02ee 0000 0000 		.long	.LBI67
 1386 02f2 04        		.byte	.LVU302
 1387 02f3 0000 0000 		.long	.LLRL33
 1388 02f7 BC        		.byte	0xbc
 1389 02f8 02        		.byte	0x2
 1390 02f9 03        		.uleb128 0x3
 1391 02fa 0000 04B9 		.long	0x4b9
 1392 02fe 0000 0000 		.long	.LLST34
 1393 0302 0000 0000 		.long	.LVUS34
 1394 0306 08        		.uleb128 0x8
 1395 0307 0000 04AE 		.long	0x4ae
 1396 030b 06        		.uleb128 0x6
 1397 030c 03        		.byte	0x3
 1398 030d 0000 0000 		.long	ready
 1399 0311 9F        		.byte	0x9f
 1400 0312 04        		.uleb128 0x4
 1401 0313 0000 04C3 		.long	0x4c3
 1402 0317 0000 0000 		.long	.LBB69
 1403 031b 0000 0046 		.long	.LBE69-.LBB69
 1404 031f 01        		.uleb128 0x1
 1405 0320 0000 04C4 		.long	0x4c4
 1406 0324 0000 0000 		.long	.LLST35
 1407 0328 0000 0000 		.long	.LVUS35
 1408 032c 00        		.byte	0
 1409 032d 00        		.byte	0
 1410 032e 00        		.byte	0
 1411 032f 0B        		.uleb128 0xb
 1412 0330 0000 0000 		.long	.LASF37
 1413 0334 B2        		.byte	0xb2
 1414 0335 0000 0000 		.long	.LFB12
 1415 0339 0000 002A 		.long	.LFE12-.LFB12
 1416 033d 01        		.uleb128 0x1
 1417 033e 9C        		.byte	0x9c
 1418 033f 0000 035B 		.long	0x35b
 1419 0343 14        		.uleb128 0x14
 1420 0344 0000 0000 		.long	.LASF38
 1421 0348 B2        		.byte	0xb2
 1422 0349 1A        		.byte	0x1a
 1423 034a 0000 007C 		.long	0x7c
 1424 034e 02        		.uleb128 0x2
 1425 034f 91        		.byte	0x91
 1426 0350 00        		.sleb128 0
 1427 0351 15        		.uleb128 0x15
 1428 0352 0000 0000 		.long	.LVL80
 1429 0356 0000 0266 		.long	0x266
 1430 035a 00        		.byte	0
 1431 035b 0B        		.uleb128 0xb
 1432 035c 0000 0000 		.long	.LASF39
 1433 0360 A7        		.byte	0xa7
 1434 0361 0000 0000 		.long	.LFB11
 1435 0365 0000 00A0 		.long	.LFE11-.LFB11
 1436 0369 01        		.uleb128 0x1
 1437 036a 9C        		.byte	0x9c
 1438 036b 0000 042F 		.long	0x42f
 1439 036f 18        		.uleb128 0x18
 1440 0370 6368 00   		.string	"ch"


 1441 0373 A7        		.byte	0xa7
 1442 0374 10        		.byte	0x10
 1443 0375 0000 006C 		.long	0x6c
 1444 0379 02        		.uleb128 0x2
 1445 037a 91        		.byte	0x91
 1446 037b 00        		.sleb128 0
 1447 037c 19        		.uleb128 0x19
 1448 037d 0000 04A1 		.long	0x4a1
 1449 0381 0000 0000 		.long	.LBI50
 1450 0385 00        		.byte	.LVU208
 1451 0386 0000 0000 		.long	.LLRL20
 1452 038a A8        		.byte	0xa8
 1453 038b 0000 03C5 		.long	0x3c5
 1454 038f 03        		.uleb128 0x3
 1455 0390 0000 04B9 		.long	0x4b9
 1456 0394 0000 0000 		.long	.LLST21
 1457 0398 0000 0000 		.long	.LVUS21
 1458 039c 03        		.uleb128 0x3
 1459 039d 0000 04AE 		.long	0x4ae
 1460 03a1 0000 0000 		.long	.LLST22
 1461 03a5 0000 0000 		.long	.LVUS22
 1462 03a9 04        		.uleb128 0x4
 1463 03aa 0000 04C3 		.long	0x4c3
 1464 03ae 0000 0000 		.long	.LBB52
 1465 03b2 0000 0046 		.long	.LBE52-.LBB52
 1466 03b6 01        		.uleb128 0x1
 1467 03b7 0000 04C4 		.long	0x4c4
 1468 03bb 0000 0000 		.long	.LLST23
 1469 03bf 0000 0000 		.long	.LVUS23
 1470 03c3 00        		.byte	0
 1471 03c4 00        		.byte	0
 1472 03c5 19        		.uleb128 0x19
 1473 03c6 0000 045B 		.long	0x45b
 1474 03ca 0000 0000 		.long	.LBI54
 1475 03ce 02        		.byte	.LVU217
 1476 03cf 0000 0000 		.long	.LLRL24
 1477 03d3 A9        		.byte	0xa9
 1478 03d4 0000 0425 		.long	0x425
 1479 03d8 10        		.uleb128 0x10
 1480 03d9 0000 0464 		.long	0x464
 1481 03dd 0000 0000 		.long	.LBI56
 1482 03e1 04        		.byte	.LVU219
 1483 03e2 0000 0000 		.long	.LLRL25
 1484 03e6 93        		.byte	0x93
 1485 03e7 0E        		.byte	0xe
 1486 03e8 03        		.uleb128 0x3
 1487 03e9 0000 0473 		.long	0x473
 1488 03ed 0000 0000 		.long	.LLST26
 1489 03f1 0000 0000 		.long	.LVUS26
 1490 03f5 1A        		.uleb128 0x1a
 1491 03f6 0000 0000 		.long	.LLRL25
 1492 03fa 01        		.uleb128 0x1
 1493 03fb 0000 047E 		.long	0x47e
 1494 03ff 0000 0000 		.long	.LLST27
 1495 0403 0000 0000 		.long	.LVUS27
 1496 0407 04        		.uleb128 0x4
 1497 0408 0000 0489 		.long	0x489


 1498 040c 0000 0000 		.long	.LBB58
 1499 0410 0000 0018 		.long	.LBE58-.LBB58
 1500 0414 01        		.uleb128 0x1
 1501 0415 0000 048A 		.long	0x48a
 1502 0419 0000 0000 		.long	.LLST28
 1503 041d 0000 0000 		.long	.LVUS28
 1504 0421 00        		.byte	0
 1505 0422 00        		.byte	0
 1506 0423 00        		.byte	0
 1507 0424 00        		.byte	0
 1508 0425 15        		.uleb128 0x15
 1509 0426 0000 0000 		.long	.LVL58
 1510 042a 0000 0226 		.long	0x226
 1511 042e 00        		.byte	0
 1512 042f 0B        		.uleb128 0xb
 1513 0430 0000 0000 		.long	.LASF40
 1514 0434 A0        		.byte	0xa0
 1515 0435 0000 0000 		.long	.LFB10
 1516 0439 0000 002A 		.long	.LFE10-.LFB10
 1517 043d 01        		.uleb128 0x1
 1518 043e 9C        		.byte	0x9c
 1519 043f 0000 045B 		.long	0x45b
 1520 0443 14        		.uleb128 0x14
 1521 0444 0000 0000 		.long	.LASF38
 1522 0448 A0        		.byte	0xa0
 1523 0449 1A        		.byte	0x1a
 1524 044a 0000 007C 		.long	0x7c
 1525 044e 02        		.uleb128 0x2
 1526 044f 91        		.byte	0x91
 1527 0450 00        		.sleb128 0
 1528 0451 15        		.uleb128 0x15
 1529 0452 0000 0000 		.long	.LVL68
 1530 0456 0000 035B 		.long	0x35b
 1531 045a 00        		.byte	0
 1532 045b 29        		.uleb128 0x29
 1533 045c 0000 0000 		.long	.LASF56
 1534 0460 01        		.byte	0x1
 1535 0461 92        		.byte	0x92
 1536 0462 06        		.byte	0x6
 1537 0463 01        		.byte	0x1
 1538 0464 1B        		.uleb128 0x1b
 1539 0465 0000 0000 		.long	.LASF45
 1540 0469 87        		.byte	0x87
 1541 046a 0E        		.byte	0xe
 1542 046b 0000 007C 		.long	0x7c
 1543 046f 0000 0497 		.long	0x497
 1544 0473 1C        		.uleb128 0x1c
 1545 0474 0000 0000 		.long	.LASF44
 1546 0478 87        		.byte	0x87
 1547 0479 24        		.byte	0x24
 1548 047a 0000 0497 		.long	0x497
 1549 047e 0C        		.uleb128 0xc
 1550 047f 0000 0000 		.long	.LASF41
 1551 0483 88        		.byte	0x88
 1552 0484 0F        		.byte	0xf
 1553 0485 0000 007C 		.long	0x7c
 1554 0489 1D        		.uleb128 0x1d


 1555 048a 0C        		.uleb128 0xc
 1556 048b 0000 0000 		.long	.LASF42
 1557 048f 8A        		.byte	0x8a
 1558 0490 0D        		.byte	0xd
 1559 0491 0000 049C 		.long	0x49c
 1560 0495 00        		.byte	0
 1561 0496 00        		.byte	0
 1562 0497 0A        		.uleb128 0xa
 1563 0498 0000 007C 		.long	0x7c
 1564 049c 0A        		.uleb128 0xa
 1565 049d 0000 0102 		.long	0x102
 1566 04a1 2A        		.uleb128 0x2a
 1567 04a2 0000 0000 		.long	.LASF43
 1568 04a6 01        		.byte	0x1
 1569 04a7 74        		.byte	0x74
 1570 04a8 06        		.byte	0x6
 1571 04a9 01        		.byte	0x1
 1572 04aa 0000 04D1 		.long	0x4d1
 1573 04ae 1C        		.uleb128 0x1c
 1574 04af 0000 0000 		.long	.LASF44
 1575 04b3 74        		.byte	0x74
 1576 04b4 19        		.byte	0x19
 1577 04b5 0000 0497 		.long	0x497
 1578 04b9 1E        		.uleb128 0x1e
 1579 04ba 6964 00   		.string	"id"
 1580 04bd 74        		.byte	0x74
 1581 04be 2F        		.byte	0x2f
 1582 04bf 0000 007C 		.long	0x7c
 1583 04c3 1D        		.uleb128 0x1d
 1584 04c4 0C        		.uleb128 0xc
 1585 04c5 0000 0000 		.long	.LASF42
 1586 04c9 79        		.byte	0x79
 1587 04ca 0D        		.byte	0xd
 1588 04cb 0000 049C 		.long	0x49c
 1589 04cf 00        		.byte	0
 1590 04d0 00        		.byte	0
 1591 04d1 1F        		.uleb128 0x1f
 1592 04d2 0000 0000 		.long	.LASF51
 1593 04d6 6C        		.byte	0x6c
 1594 04d7 0000 0000 		.long	.LFB6
 1595 04db 0000 0044 		.long	.LFE6-.LFB6
 1596 04df 01        		.uleb128 0x1
 1597 04e0 9C        		.byte	0x9c
 1598 04e1 0000 054F 		.long	0x54f
 1599 04e5 13        		.uleb128 0x13
 1600 04e6 0000 0464 		.long	0x464
 1601 04ea 0000 0000 		.long	.LBI29
 1602 04ee 02        		.byte	.LVU122
 1603 04ef 0000 0000 		.long	.LBB29
 1604 04f3 0000 0022 		.long	.LBE29-.LBB29
 1605 04f7 6D        		.byte	0x6d
 1606 04f8 0F        		.byte	0xf
 1607 04f9 0000 0533 		.long	0x533
 1608 04fd 03        		.uleb128 0x3
 1609 04fe 0000 0473 		.long	0x473
 1610 0502 0000 0000 		.long	.LLST10
 1611 0506 0000 0000 		.long	.LVUS10


 1612 050a 01        		.uleb128 0x1
 1613 050b 0000 047E 		.long	0x47e
 1614 050f 0000 0000 		.long	.LLST11
 1615 0513 0000 0000 		.long	.LVUS11
 1616 0517 04        		.uleb128 0x4
 1617 0518 0000 0489 		.long	0x489
 1618 051c 0000 0000 		.long	.LBB31
 1619 0520 0000 001A 		.long	.LBE31-.LBB31
 1620 0524 01        		.uleb128 0x1
 1621 0525 0000 048A 		.long	0x48a
 1622 0529 0000 0000 		.long	.LLST12
 1623 052d 0000 0000 		.long	.LVUS12
 1624 0531 00        		.byte	0
 1625 0532 00        		.byte	0
 1626 0533 16        		.uleb128 0x16
 1627 0534 0000 0000 		.long	.LVL34
 1628 0538 0000 0246 		.long	0x246
 1629 053c 16        		.uleb128 0x16
 1630 053d 0000 0000 		.long	.LVL35
 1631 0541 0000 0236 		.long	0x236
 1632 0545 16        		.uleb128 0x16
 1633 0546 0000 0000 		.long	.LVL36
 1634 054a 0000 0781 		.long	0x781
 1635 054e 00        		.byte	0
 1636 054f 1B        		.uleb128 0x1b
 1637 0550 0000 0000 		.long	.LASF46
 1638 0554 56        		.byte	0x56
 1639 0555 07        		.byte	0x7
 1640 0556 0000 0073 		.long	0x73
 1641 055a 0000 057F 		.long	0x57f
 1642 055e 1E        		.uleb128 0x1e
 1643 055f 6964 00   		.string	"id"
 1644 0562 56        		.byte	0x56
 1645 0563 1F        		.byte	0x1f
 1646 0564 0000 007C 		.long	0x7c
 1647 0568 0C        		.uleb128 0xc
 1648 0569 0000 0000 		.long	.LASF47
 1649 056d 57        		.byte	0x57
 1650 056e 0A        		.byte	0xa
 1651 056f 0000 057F 		.long	0x57f
 1652 0573 0C        		.uleb128 0xc
 1653 0574 0000 0000 		.long	.LASF48
 1654 0578 59        		.byte	0x59
 1655 0579 19        		.byte	0x19
 1656 057a 0000 0584 		.long	0x584
 1657 057e 00        		.byte	0
 1658 057f 0A        		.uleb128 0xa
 1659 0580 0000 006C 		.long	0x6c
 1660 0584 0A        		.uleb128 0xa
 1661 0585 0000 003B 		.long	0x3b
 1662 0589 0B        		.uleb128 0xb
 1663 058a 0000 0000 		.long	.LASF49
 1664 058e 39        		.byte	0x39
 1665 058f 0000 0000 		.long	.LFB4
 1666 0593 0000 00D4 		.long	.LFE4-.LFB4
 1667 0597 01        		.uleb128 0x1
 1668 0598 9C        		.byte	0x9c


 1669 0599 0000 0642 		.long	0x642
 1670 059d 14        		.uleb128 0x14
 1671 059e 0000 0000 		.long	.LASF50
 1672 05a2 39        		.byte	0x39
 1673 05a3 16        		.byte	0x16
 1674 05a4 0000 00FD 		.long	0xfd
 1675 05a8 02        		.uleb128 0x2
 1676 05a9 91        		.byte	0x91
 1677 05aa 00        		.sleb128 0
 1678 05ab 20        		.uleb128 0x20
 1679 05ac 6900      		.string	"i"
 1680 05ae 3A        		.byte	0x3a
 1681 05af 12        		.byte	0x12
 1682 05b0 0000 007C 		.long	0x7c
 1683 05b4 0000 0000 		.long	.LLST1
 1684 05b8 0000 0000 		.long	.LVUS1
 1685 05bc 13        		.uleb128 0x13
 1686 05bd 0000 054F 		.long	0x54f
 1687 05c1 0000 0000 		.long	.LBI22
 1688 05c5 01        		.byte	.LVU59
 1689 05c6 0000 0000 		.long	.LBB22
 1690 05ca 0000 002A 		.long	.LBE22-.LBB22
 1691 05ce 41        		.byte	0x41
 1692 05cf 25        		.byte	0x25
 1693 05d0 0000 05FC 		.long	0x5fc
 1694 05d4 03        		.uleb128 0x3
 1695 05d5 0000 055E 		.long	0x55e
 1696 05d9 0000 0000 		.long	.LLST2
 1697 05dd 0000 0000 		.long	.LVUS2
 1698 05e1 01        		.uleb128 0x1
 1699 05e2 0000 0568 		.long	0x568
 1700 05e6 0000 0000 		.long	.LLST3
 1701 05ea 0000 0000 		.long	.LVUS3
 1702 05ee 01        		.uleb128 0x1
 1703 05ef 0000 0573 		.long	0x573
 1704 05f3 0000 0000 		.long	.LLST4
 1705 05f7 0000 0000 		.long	.LVUS4
 1706 05fb 00        		.byte	0
 1707 05fc 10        		.uleb128 0x10
 1708 05fd 0000 04A1 		.long	0x4a1
 1709 0601 0000 0000 		.long	.LBI24
 1710 0605 01        		.byte	.LVU75
 1711 0606 0000 0000 		.long	.LLRL5
 1712 060a 42        		.byte	0x42
 1713 060b 0D        		.byte	0xd
 1714 060c 03        		.uleb128 0x3
 1715 060d 0000 04B9 		.long	0x4b9
 1716 0611 0000 0000 		.long	.LLST6
 1717 0615 0000 0000 		.long	.LVUS6
 1718 0619 08        		.uleb128 0x8
 1719 061a 0000 04AE 		.long	0x4ae
 1720 061e 06        		.uleb128 0x6
 1721 061f 03        		.byte	0x3
 1722 0620 0000 0000 		.long	ready
 1723 0624 9F        		.byte	0x9f
 1724 0625 04        		.uleb128 0x4
 1725 0626 0000 04C3 		.long	0x4c3


 1726 062a 0000 0000 		.long	.LBB26
 1727 062e 0000 0040 		.long	.LBE26-.LBB26
 1728 0632 01        		.uleb128 0x1
 1729 0633 0000 04C4 		.long	0x4c4
 1730 0637 0000 0000 		.long	.LLST7
 1731 063b 0000 0000 		.long	.LVUS7
 1732 063f 00        		.byte	0
 1733 0640 00        		.byte	0
 1734 0641 00        		.byte	0
 1735 0642 1F        		.uleb128 0x1f
 1736 0643 0000 0000 		.long	.LASF52
 1737 0647 15        		.byte	0x15
 1738 0648 0000 0000 		.long	.LFB3
 1739 064c 0000 005C 		.long	.LFE3-.LFB3
 1740 0650 01        		.uleb128 0x1
 1741 0651 9C        		.byte	0x9c
 1742 0652 0000 0668 		.long	0x668
 1743 0656 20        		.uleb128 0x20
 1744 0657 6900      		.string	"i"
 1745 0659 16        		.byte	0x16
 1746 065a 06        		.byte	0x6
 1747 065b 0000 006C 		.long	0x6c
 1748 065f 0000 0000 		.long	.LLST0
 1749 0663 0000 0000 		.long	.LVUS0
 1750 0667 00        		.byte	0
 1751 0668 11        		.uleb128 0x11
 1752 0669 0000 054F 		.long	0x54f
 1753 066d 0000 0000 		.long	.LFB5
 1754 0671 0000 0042 		.long	.LFE5-.LFB5
 1755 0675 01        		.uleb128 0x1
 1756 0676 9C        		.byte	0x9c
 1757 0677 0000 069E 		.long	0x69e
 1758 067b 08        		.uleb128 0x8
 1759 067c 0000 055E 		.long	0x55e
 1760 0680 02        		.uleb128 0x2
 1761 0681 91        		.byte	0x91
 1762 0682 00        		.sleb128 0
 1763 0683 01        		.uleb128 0x1
 1764 0684 0000 0568 		.long	0x568
 1765 0688 0000 0000 		.long	.LLST8
 1766 068c 0000 0000 		.long	.LVUS8
 1767 0690 01        		.uleb128 0x1
 1768 0691 0000 0573 		.long	0x573
 1769 0695 0000 0000 		.long	.LLST9
 1770 0699 0000 0000 		.long	.LVUS9
 1771 069d 00        		.byte	0
 1772 069e 11        		.uleb128 0x11
 1773 069f 0000 04A1 		.long	0x4a1
 1774 06a3 0000 0000 		.long	.LFB7
 1775 06a7 0000 0058 		.long	.LFE7-.LFB7
 1776 06ab 01        		.uleb128 0x1
 1777 06ac 9C        		.byte	0x9c
 1778 06ad 0000 06DD 		.long	0x6dd
 1779 06b1 08        		.uleb128 0x8
 1780 06b2 0000 04AE 		.long	0x4ae
 1781 06b6 02        		.uleb128 0x2
 1782 06b7 91        		.byte	0x91


 1783 06b8 00        		.sleb128 0
 1784 06b9 08        		.uleb128 0x8
 1785 06ba 0000 04B9 		.long	0x4b9
 1786 06be 02        		.uleb128 0x2
 1787 06bf 91        		.byte	0x91
 1788 06c0 04        		.sleb128 4
 1789 06c1 04        		.uleb128 0x4
 1790 06c2 0000 04C3 		.long	0x4c3
 1791 06c6 0000 0000 		.long	.LBB32
 1792 06ca 0000 0048 		.long	.LBE32-.LBB32
 1793 06ce 01        		.uleb128 0x1
 1794 06cf 0000 04C4 		.long	0x4c4
 1795 06d3 0000 0000 		.long	.LLST13
 1796 06d7 0000 0000 		.long	.LVUS13
 1797 06db 00        		.byte	0
 1798 06dc 00        		.byte	0
 1799 06dd 11        		.uleb128 0x11
 1800 06de 0000 0464 		.long	0x464
 1801 06e2 0000 0000 		.long	.LFB8
 1802 06e6 0000 0020 		.long	.LFE8-.LFB8
 1803 06ea 01        		.uleb128 0x1
 1804 06eb 9C        		.byte	0x9c
 1805 06ec 0000 0721 		.long	0x721
 1806 06f0 08        		.uleb128 0x8
 1807 06f1 0000 0473 		.long	0x473
 1808 06f5 02        		.uleb128 0x2
 1809 06f6 91        		.byte	0x91
 1810 06f7 00        		.sleb128 0
 1811 06f8 01        		.uleb128 0x1
 1812 06f9 0000 047E 		.long	0x47e
 1813 06fd 0000 0000 		.long	.LLST14
 1814 0701 0000 0000 		.long	.LVUS14
 1815 0705 04        		.uleb128 0x4
 1816 0706 0000 0489 		.long	0x489
 1817 070a 0000 0000 		.long	.LBB33
 1818 070e 0000 0016 		.long	.LBE33-.LBB33
 1819 0712 01        		.uleb128 0x1
 1820 0713 0000 048A 		.long	0x48a
 1821 0717 0000 0000 		.long	.LLST15
 1822 071b 0000 0000 		.long	.LVUS15
 1823 071f 00        		.byte	0
 1824 0720 00        		.byte	0
 1825 0721 11        		.uleb128 0x11
 1826 0722 0000 045B 		.long	0x45b
 1827 0726 0000 0000 		.long	.LFB9
 1828 072a 0000 002C 		.long	.LFE9-.LFB9
 1829 072e 01        		.uleb128 0x1
 1830 072f 9C        		.byte	0x9c
 1831 0730 0000 0781 		.long	0x781
 1832 0734 10        		.uleb128 0x10
 1833 0735 0000 0464 		.long	0x464
 1834 0739 0000 0000 		.long	.LBI37
 1835 073d 02        		.byte	.LVU182
 1836 073e 0000 0000 		.long	.LLRL16
 1837 0742 93        		.byte	0x93
 1838 0743 0E        		.byte	0xe
 1839 0744 03        		.uleb128 0x3


 1840 0745 0000 0473 		.long	0x473
 1841 0749 0000 0000 		.long	.LLST17
 1842 074d 0000 0000 		.long	.LVUS17
 1843 0751 1A        		.uleb128 0x1a
 1844 0752 0000 0000 		.long	.LLRL16
 1845 0756 01        		.uleb128 0x1
 1846 0757 0000 047E 		.long	0x47e
 1847 075b 0000 0000 		.long	.LLST18
 1848 075f 0000 0000 		.long	.LVUS18
 1849 0763 04        		.uleb128 0x4
 1850 0764 0000 0489 		.long	0x489
 1851 0768 0000 0000 		.long	.LBB39
 1852 076c 0000 001A 		.long	.LBE39-.LBB39
 1853 0770 01        		.uleb128 0x1
 1854 0771 0000 048A 		.long	0x48a
 1855 0775 0000 0000 		.long	.LLST19
 1856 0779 0000 0000 		.long	.LVUS19
 1857 077d 00        		.byte	0
 1858 077e 00        		.byte	0
 1859 077f 00        		.byte	0
 1860 0780 00        		.byte	0
 1861 0781 2B        		.uleb128 0x2b
 1862 0782 0000 0000 		.long	.LASF57
 1863 0786 0000 0000 		.long	.LASF58
 1864 078a 03        		.byte	0x3
 1865 078b 00        		.byte	0
 1866 078c 00        		.byte	0
 1867               		.section	.debug_abbrev,"",@progbits
 1868               	.Ldebug_abbrev0:
 1869 0000 01        		.uleb128 0x1
 1870 0001 34        		.uleb128 0x34
 1871 0002 00        		.byte	0
 1872 0003 31        		.uleb128 0x31
 1873 0004 13        		.uleb128 0x13
 1874 0005 02        		.uleb128 0x2
 1875 0006 17        		.uleb128 0x17
 1876 0007 B742      		.uleb128 0x2137
 1877 0009 17        		.uleb128 0x17
 1878 000a 00        		.byte	0
 1879 000b 00        		.byte	0
 1880 000c 02        		.uleb128 0x2
 1881 000d 24        		.uleb128 0x24
 1882 000e 00        		.byte	0
 1883 000f 0B        		.uleb128 0xb
 1884 0010 0B        		.uleb128 0xb
 1885 0011 3E        		.uleb128 0x3e
 1886 0012 0B        		.uleb128 0xb
 1887 0013 03        		.uleb128 0x3
 1888 0014 0E        		.uleb128 0xe
 1889 0015 00        		.byte	0
 1890 0016 00        		.byte	0
 1891 0017 03        		.uleb128 0x3
 1892 0018 05        		.uleb128 0x5
 1893 0019 00        		.byte	0
 1894 001a 31        		.uleb128 0x31
 1895 001b 13        		.uleb128 0x13
 1896 001c 02        		.uleb128 0x2


 1897 001d 17        		.uleb128 0x17
 1898 001e B742      		.uleb128 0x2137
 1899 0020 17        		.uleb128 0x17
 1900 0021 00        		.byte	0
 1901 0022 00        		.byte	0
 1902 0023 04        		.uleb128 0x4
 1903 0024 0B        		.uleb128 0xb
 1904 0025 01        		.byte	0x1
 1905 0026 31        		.uleb128 0x31
 1906 0027 13        		.uleb128 0x13
 1907 0028 11        		.uleb128 0x11
 1908 0029 01        		.uleb128 0x1
 1909 002a 12        		.uleb128 0x12
 1910 002b 06        		.uleb128 0x6
 1911 002c 00        		.byte	0
 1912 002d 00        		.byte	0
 1913 002e 05        		.uleb128 0x5
 1914 002f 0D        		.uleb128 0xd
 1915 0030 00        		.byte	0
 1916 0031 03        		.uleb128 0x3
 1917 0032 0E        		.uleb128 0xe
 1918 0033 3A        		.uleb128 0x3a
 1919 0034 21        		.uleb128 0x21
 1920 0035 02        		.sleb128 2
 1921 0036 3B        		.uleb128 0x3b
 1922 0037 0B        		.uleb128 0xb
 1923 0038 39        		.uleb128 0x39
 1924 0039 0B        		.uleb128 0xb
 1925 003a 49        		.uleb128 0x49
 1926 003b 13        		.uleb128 0x13
 1927 003c 38        		.uleb128 0x38
 1928 003d 0B        		.uleb128 0xb
 1929 003e 00        		.byte	0
 1930 003f 00        		.byte	0
 1931 0040 06        		.uleb128 0x6
 1932 0041 34        		.uleb128 0x34
 1933 0042 00        		.byte	0
 1934 0043 03        		.uleb128 0x3
 1935 0044 0E        		.uleb128 0xe
 1936 0045 3A        		.uleb128 0x3a
 1937 0046 21        		.uleb128 0x21
 1938 0047 02        		.sleb128 2
 1939 0048 3B        		.uleb128 0x3b
 1940 0049 0B        		.uleb128 0xb
 1941 004a 39        		.uleb128 0x39
 1942 004b 0B        		.uleb128 0xb
 1943 004c 49        		.uleb128 0x49
 1944 004d 13        		.uleb128 0x13
 1945 004e 3F        		.uleb128 0x3f
 1946 004f 19        		.uleb128 0x19
 1947 0050 3C        		.uleb128 0x3c
 1948 0051 19        		.uleb128 0x19
 1949 0052 00        		.byte	0
 1950 0053 00        		.byte	0
 1951 0054 07        		.uleb128 0x7
 1952 0055 34        		.uleb128 0x34
 1953 0056 00        		.byte	0


 1954 0057 47        		.uleb128 0x47
 1955 0058 13        		.uleb128 0x13
 1956 0059 3A        		.uleb128 0x3a
 1957 005a 21        		.uleb128 0x21
 1958 005b 01        		.sleb128 1
 1959 005c 3B        		.uleb128 0x3b
 1960 005d 0B        		.uleb128 0xb
 1961 005e 39        		.uleb128 0x39
 1962 005f 0B        		.uleb128 0xb
 1963 0060 02        		.uleb128 0x2
 1964 0061 18        		.uleb128 0x18
 1965 0062 00        		.byte	0
 1966 0063 00        		.byte	0
 1967 0064 08        		.uleb128 0x8
 1968 0065 05        		.uleb128 0x5
 1969 0066 00        		.byte	0
 1970 0067 31        		.uleb128 0x31
 1971 0068 13        		.uleb128 0x13
 1972 0069 02        		.uleb128 0x2
 1973 006a 18        		.uleb128 0x18
 1974 006b 00        		.byte	0
 1975 006c 00        		.byte	0
 1976 006d 09        		.uleb128 0x9
 1977 006e 18        		.uleb128 0x18
 1978 006f 00        		.byte	0
 1979 0070 00        		.byte	0
 1980 0071 00        		.byte	0
 1981 0072 0A        		.uleb128 0xa
 1982 0073 0F        		.uleb128 0xf
 1983 0074 00        		.byte	0
 1984 0075 0B        		.uleb128 0xb
 1985 0076 21        		.uleb128 0x21
 1986 0077 04        		.sleb128 4
 1987 0078 49        		.uleb128 0x49
 1988 0079 13        		.uleb128 0x13
 1989 007a 00        		.byte	0
 1990 007b 00        		.byte	0
 1991 007c 0B        		.uleb128 0xb
 1992 007d 2E        		.uleb128 0x2e
 1993 007e 01        		.byte	0x1
 1994 007f 3F        		.uleb128 0x3f
 1995 0080 19        		.uleb128 0x19
 1996 0081 03        		.uleb128 0x3
 1997 0082 0E        		.uleb128 0xe
 1998 0083 3A        		.uleb128 0x3a
 1999 0084 21        		.uleb128 0x21
 2000 0085 01        		.sleb128 1
 2001 0086 3B        		.uleb128 0x3b
 2002 0087 0B        		.uleb128 0xb
 2003 0088 39        		.uleb128 0x39
 2004 0089 21        		.uleb128 0x21
 2005 008a 06        		.sleb128 6
 2006 008b 27        		.uleb128 0x27
 2007 008c 19        		.uleb128 0x19
 2008 008d 11        		.uleb128 0x11
 2009 008e 01        		.uleb128 0x1
 2010 008f 12        		.uleb128 0x12


 2011 0090 06        		.uleb128 0x6
 2012 0091 40        		.uleb128 0x40
 2013 0092 18        		.uleb128 0x18
 2014 0093 7A        		.uleb128 0x7a
 2015 0094 19        		.uleb128 0x19
 2016 0095 01        		.uleb128 0x1
 2017 0096 13        		.uleb128 0x13
 2018 0097 00        		.byte	0
 2019 0098 00        		.byte	0
 2020 0099 0C        		.uleb128 0xc
 2021 009a 34        		.uleb128 0x34
 2022 009b 00        		.byte	0
 2023 009c 03        		.uleb128 0x3
 2024 009d 0E        		.uleb128 0xe
 2025 009e 3A        		.uleb128 0x3a
 2026 009f 21        		.uleb128 0x21
 2027 00a0 01        		.sleb128 1
 2028 00a1 3B        		.uleb128 0x3b
 2029 00a2 0B        		.uleb128 0xb
 2030 00a3 39        		.uleb128 0x39
 2031 00a4 0B        		.uleb128 0xb
 2032 00a5 49        		.uleb128 0x49
 2033 00a6 13        		.uleb128 0x13
 2034 00a7 00        		.byte	0
 2035 00a8 00        		.byte	0
 2036 00a9 0D        		.uleb128 0xd
 2037 00aa 16        		.uleb128 0x16
 2038 00ab 00        		.byte	0
 2039 00ac 03        		.uleb128 0x3
 2040 00ad 0E        		.uleb128 0xe
 2041 00ae 3A        		.uleb128 0x3a
 2042 00af 21        		.uleb128 0x21
 2043 00b0 02        		.sleb128 2
 2044 00b1 3B        		.uleb128 0x3b
 2045 00b2 0B        		.uleb128 0xb
 2046 00b3 39        		.uleb128 0x39
 2047 00b4 0B        		.uleb128 0xb
 2048 00b5 49        		.uleb128 0x49
 2049 00b6 13        		.uleb128 0x13
 2050 00b7 00        		.byte	0
 2051 00b8 00        		.byte	0
 2052 00b9 0E        		.uleb128 0xe
 2053 00ba 01        		.uleb128 0x1
 2054 00bb 01        		.byte	0x1
 2055 00bc 49        		.uleb128 0x49
 2056 00bd 13        		.uleb128 0x13
 2057 00be 01        		.uleb128 0x1
 2058 00bf 13        		.uleb128 0x13
 2059 00c0 00        		.byte	0
 2060 00c1 00        		.byte	0
 2061 00c2 0F        		.uleb128 0xf
 2062 00c3 2E        		.uleb128 0x2e
 2063 00c4 01        		.byte	0x1
 2064 00c5 3F        		.uleb128 0x3f
 2065 00c6 19        		.uleb128 0x19
 2066 00c7 03        		.uleb128 0x3
 2067 00c8 0E        		.uleb128 0xe


 2068 00c9 3A        		.uleb128 0x3a
 2069 00ca 21        		.uleb128 0x21
 2070 00cb 02        		.sleb128 2
 2071 00cc 3B        		.uleb128 0x3b
 2072 00cd 0B        		.uleb128 0xb
 2073 00ce 39        		.uleb128 0x39
 2074 00cf 21        		.uleb128 0x21
 2075 00d0 0C        		.sleb128 12
 2076 00d1 49        		.uleb128 0x49
 2077 00d2 13        		.uleb128 0x13
 2078 00d3 3C        		.uleb128 0x3c
 2079 00d4 19        		.uleb128 0x19
 2080 00d5 01        		.uleb128 0x1
 2081 00d6 13        		.uleb128 0x13
 2082 00d7 00        		.byte	0
 2083 00d8 00        		.byte	0
 2084 00d9 10        		.uleb128 0x10
 2085 00da 1D        		.uleb128 0x1d
 2086 00db 01        		.byte	0x1
 2087 00dc 31        		.uleb128 0x31
 2088 00dd 13        		.uleb128 0x13
 2089 00de 52        		.uleb128 0x52
 2090 00df 01        		.uleb128 0x1
 2091 00e0 B842      		.uleb128 0x2138
 2092 00e2 0B        		.uleb128 0xb
 2093 00e3 55        		.uleb128 0x55
 2094 00e4 17        		.uleb128 0x17
 2095 00e5 58        		.uleb128 0x58
 2096 00e6 21        		.uleb128 0x21
 2097 00e7 01        		.sleb128 1
 2098 00e8 59        		.uleb128 0x59
 2099 00e9 0B        		.uleb128 0xb
 2100 00ea 57        		.uleb128 0x57
 2101 00eb 0B        		.uleb128 0xb
 2102 00ec 00        		.byte	0
 2103 00ed 00        		.byte	0
 2104 00ee 11        		.uleb128 0x11
 2105 00ef 2E        		.uleb128 0x2e
 2106 00f0 01        		.byte	0x1
 2107 00f1 31        		.uleb128 0x31
 2108 00f2 13        		.uleb128 0x13
 2109 00f3 11        		.uleb128 0x11
 2110 00f4 01        		.uleb128 0x1
 2111 00f5 12        		.uleb128 0x12
 2112 00f6 06        		.uleb128 0x6
 2113 00f7 40        		.uleb128 0x40
 2114 00f8 18        		.uleb128 0x18
 2115 00f9 7A        		.uleb128 0x7a
 2116 00fa 19        		.uleb128 0x19
 2117 00fb 01        		.uleb128 0x1
 2118 00fc 13        		.uleb128 0x13
 2119 00fd 00        		.byte	0
 2120 00fe 00        		.byte	0
 2121 00ff 12        		.uleb128 0x12
 2122 0100 21        		.uleb128 0x21
 2123 0101 00        		.byte	0
 2124 0102 49        		.uleb128 0x49


 2125 0103 13        		.uleb128 0x13
 2126 0104 2F        		.uleb128 0x2f
 2127 0105 0B        		.uleb128 0xb
 2128 0106 00        		.byte	0
 2129 0107 00        		.byte	0
 2130 0108 13        		.uleb128 0x13
 2131 0109 1D        		.uleb128 0x1d
 2132 010a 01        		.byte	0x1
 2133 010b 31        		.uleb128 0x31
 2134 010c 13        		.uleb128 0x13
 2135 010d 52        		.uleb128 0x52
 2136 010e 01        		.uleb128 0x1
 2137 010f B842      		.uleb128 0x2138
 2138 0111 0B        		.uleb128 0xb
 2139 0112 11        		.uleb128 0x11
 2140 0113 01        		.uleb128 0x1
 2141 0114 12        		.uleb128 0x12
 2142 0115 06        		.uleb128 0x6
 2143 0116 58        		.uleb128 0x58
 2144 0117 21        		.uleb128 0x21
 2145 0118 01        		.sleb128 1
 2146 0119 59        		.uleb128 0x59
 2147 011a 0B        		.uleb128 0xb
 2148 011b 57        		.uleb128 0x57
 2149 011c 0B        		.uleb128 0xb
 2150 011d 01        		.uleb128 0x1
 2151 011e 13        		.uleb128 0x13
 2152 011f 00        		.byte	0
 2153 0120 00        		.byte	0
 2154 0121 14        		.uleb128 0x14
 2155 0122 05        		.uleb128 0x5
 2156 0123 00        		.byte	0
 2157 0124 03        		.uleb128 0x3
 2158 0125 0E        		.uleb128 0xe
 2159 0126 3A        		.uleb128 0x3a
 2160 0127 21        		.uleb128 0x21
 2161 0128 01        		.sleb128 1
 2162 0129 3B        		.uleb128 0x3b
 2163 012a 0B        		.uleb128 0xb
 2164 012b 39        		.uleb128 0x39
 2165 012c 0B        		.uleb128 0xb
 2166 012d 49        		.uleb128 0x49
 2167 012e 13        		.uleb128 0x13
 2168 012f 02        		.uleb128 0x2
 2169 0130 18        		.uleb128 0x18
 2170 0131 00        		.byte	0
 2171 0132 00        		.byte	0
 2172 0133 15        		.uleb128 0x15
 2173 0134 48        		.uleb128 0x48
 2174 0135 00        		.byte	0
 2175 0136 7D        		.uleb128 0x7d
 2176 0137 01        		.uleb128 0x1
 2177 0138 8201      		.uleb128 0x82
 2178 013a 19        		.uleb128 0x19
 2179 013b 7F        		.uleb128 0x7f
 2180 013c 13        		.uleb128 0x13
 2181 013d 00        		.byte	0


 2182 013e 00        		.byte	0
 2183 013f 16        		.uleb128 0x16
 2184 0140 48        		.uleb128 0x48
 2185 0141 00        		.byte	0
 2186 0142 7D        		.uleb128 0x7d
 2187 0143 01        		.uleb128 0x1
 2188 0144 7F        		.uleb128 0x7f
 2189 0145 13        		.uleb128 0x13
 2190 0146 00        		.byte	0
 2191 0147 00        		.byte	0
 2192 0148 17        		.uleb128 0x17
 2193 0149 13        		.uleb128 0x13
 2194 014a 01        		.byte	0x1
 2195 014b 0B        		.uleb128 0xb
 2196 014c 0B        		.uleb128 0xb
 2197 014d 3A        		.uleb128 0x3a
 2198 014e 21        		.uleb128 0x21
 2199 014f 02        		.sleb128 2
 2200 0150 3B        		.uleb128 0x3b
 2201 0151 0B        		.uleb128 0xb
 2202 0152 39        		.uleb128 0x39
 2203 0153 21        		.uleb128 0x21
 2204 0154 09        		.sleb128 9
 2205 0155 01        		.uleb128 0x1
 2206 0156 13        		.uleb128 0x13
 2207 0157 00        		.byte	0
 2208 0158 00        		.byte	0
 2209 0159 18        		.uleb128 0x18
 2210 015a 05        		.uleb128 0x5
 2211 015b 00        		.byte	0
 2212 015c 03        		.uleb128 0x3
 2213 015d 08        		.uleb128 0x8
 2214 015e 3A        		.uleb128 0x3a
 2215 015f 21        		.uleb128 0x21
 2216 0160 01        		.sleb128 1
 2217 0161 3B        		.uleb128 0x3b
 2218 0162 0B        		.uleb128 0xb
 2219 0163 39        		.uleb128 0x39
 2220 0164 0B        		.uleb128 0xb
 2221 0165 49        		.uleb128 0x49
 2222 0166 13        		.uleb128 0x13
 2223 0167 02        		.uleb128 0x2
 2224 0168 18        		.uleb128 0x18
 2225 0169 00        		.byte	0
 2226 016a 00        		.byte	0
 2227 016b 19        		.uleb128 0x19
 2228 016c 1D        		.uleb128 0x1d
 2229 016d 01        		.byte	0x1
 2230 016e 31        		.uleb128 0x31
 2231 016f 13        		.uleb128 0x13
 2232 0170 52        		.uleb128 0x52
 2233 0171 01        		.uleb128 0x1
 2234 0172 B842      		.uleb128 0x2138
 2235 0174 0B        		.uleb128 0xb
 2236 0175 55        		.uleb128 0x55
 2237 0176 17        		.uleb128 0x17
 2238 0177 58        		.uleb128 0x58


 2239 0178 21        		.uleb128 0x21
 2240 0179 01        		.sleb128 1
 2241 017a 59        		.uleb128 0x59
 2242 017b 0B        		.uleb128 0xb
 2243 017c 57        		.uleb128 0x57
 2244 017d 21        		.uleb128 0x21
 2245 017e 02        		.sleb128 2
 2246 017f 01        		.uleb128 0x1
 2247 0180 13        		.uleb128 0x13
 2248 0181 00        		.byte	0
 2249 0182 00        		.byte	0
 2250 0183 1A        		.uleb128 0x1a
 2251 0184 0B        		.uleb128 0xb
 2252 0185 01        		.byte	0x1
 2253 0186 55        		.uleb128 0x55
 2254 0187 17        		.uleb128 0x17
 2255 0188 00        		.byte	0
 2256 0189 00        		.byte	0
 2257 018a 1B        		.uleb128 0x1b
 2258 018b 2E        		.uleb128 0x2e
 2259 018c 01        		.byte	0x1
 2260 018d 3F        		.uleb128 0x3f
 2261 018e 19        		.uleb128 0x19
 2262 018f 03        		.uleb128 0x3
 2263 0190 0E        		.uleb128 0xe
 2264 0191 3A        		.uleb128 0x3a
 2265 0192 21        		.uleb128 0x21
 2266 0193 01        		.sleb128 1
 2267 0194 3B        		.uleb128 0x3b
 2268 0195 0B        		.uleb128 0xb
 2269 0196 39        		.uleb128 0x39
 2270 0197 0B        		.uleb128 0xb
 2271 0198 27        		.uleb128 0x27
 2272 0199 19        		.uleb128 0x19
 2273 019a 49        		.uleb128 0x49
 2274 019b 13        		.uleb128 0x13
 2275 019c 20        		.uleb128 0x20
 2276 019d 21        		.uleb128 0x21
 2277 019e 01        		.sleb128 1
 2278 019f 01        		.uleb128 0x1
 2279 01a0 13        		.uleb128 0x13
 2280 01a1 00        		.byte	0
 2281 01a2 00        		.byte	0
 2282 01a3 1C        		.uleb128 0x1c
 2283 01a4 05        		.uleb128 0x5
 2284 01a5 00        		.byte	0
 2285 01a6 03        		.uleb128 0x3
 2286 01a7 0E        		.uleb128 0xe
 2287 01a8 3A        		.uleb128 0x3a
 2288 01a9 21        		.uleb128 0x21
 2289 01aa 01        		.sleb128 1
 2290 01ab 3B        		.uleb128 0x3b
 2291 01ac 0B        		.uleb128 0xb
 2292 01ad 39        		.uleb128 0x39
 2293 01ae 0B        		.uleb128 0xb
 2294 01af 49        		.uleb128 0x49
 2295 01b0 13        		.uleb128 0x13


 2296 01b1 00        		.byte	0
 2297 01b2 00        		.byte	0
 2298 01b3 1D        		.uleb128 0x1d
 2299 01b4 0B        		.uleb128 0xb
 2300 01b5 01        		.byte	0x1
 2301 01b6 00        		.byte	0
 2302 01b7 00        		.byte	0
 2303 01b8 1E        		.uleb128 0x1e
 2304 01b9 05        		.uleb128 0x5
 2305 01ba 00        		.byte	0
 2306 01bb 03        		.uleb128 0x3
 2307 01bc 08        		.uleb128 0x8
 2308 01bd 3A        		.uleb128 0x3a
 2309 01be 21        		.uleb128 0x21
 2310 01bf 01        		.sleb128 1
 2311 01c0 3B        		.uleb128 0x3b
 2312 01c1 0B        		.uleb128 0xb
 2313 01c2 39        		.uleb128 0x39
 2314 01c3 0B        		.uleb128 0xb
 2315 01c4 49        		.uleb128 0x49
 2316 01c5 13        		.uleb128 0x13
 2317 01c6 00        		.byte	0
 2318 01c7 00        		.byte	0
 2319 01c8 1F        		.uleb128 0x1f
 2320 01c9 2E        		.uleb128 0x2e
 2321 01ca 01        		.byte	0x1
 2322 01cb 3F        		.uleb128 0x3f
 2323 01cc 19        		.uleb128 0x19
 2324 01cd 03        		.uleb128 0x3
 2325 01ce 0E        		.uleb128 0xe
 2326 01cf 3A        		.uleb128 0x3a
 2327 01d0 21        		.uleb128 0x21
 2328 01d1 01        		.sleb128 1
 2329 01d2 3B        		.uleb128 0x3b
 2330 01d3 0B        		.uleb128 0xb
 2331 01d4 39        		.uleb128 0x39
 2332 01d5 21        		.uleb128 0x21
 2333 01d6 06        		.sleb128 6
 2334 01d7 11        		.uleb128 0x11
 2335 01d8 01        		.uleb128 0x1
 2336 01d9 12        		.uleb128 0x12
 2337 01da 06        		.uleb128 0x6
 2338 01db 40        		.uleb128 0x40
 2339 01dc 18        		.uleb128 0x18
 2340 01dd 7A        		.uleb128 0x7a
 2341 01de 19        		.uleb128 0x19
 2342 01df 01        		.uleb128 0x1
 2343 01e0 13        		.uleb128 0x13
 2344 01e1 00        		.byte	0
 2345 01e2 00        		.byte	0
 2346 01e3 20        		.uleb128 0x20
 2347 01e4 34        		.uleb128 0x34
 2348 01e5 00        		.byte	0
 2349 01e6 03        		.uleb128 0x3
 2350 01e7 08        		.uleb128 0x8
 2351 01e8 3A        		.uleb128 0x3a
 2352 01e9 21        		.uleb128 0x21


 2353 01ea 01        		.sleb128 1
 2354 01eb 3B        		.uleb128 0x3b
 2355 01ec 0B        		.uleb128 0xb
 2356 01ed 39        		.uleb128 0x39
 2357 01ee 0B        		.uleb128 0xb
 2358 01ef 49        		.uleb128 0x49
 2359 01f0 13        		.uleb128 0x13
 2360 01f1 02        		.uleb128 0x2
 2361 01f2 17        		.uleb128 0x17
 2362 01f3 B742      		.uleb128 0x2137
 2363 01f5 17        		.uleb128 0x17
 2364 01f6 00        		.byte	0
 2365 01f7 00        		.byte	0
 2366 01f8 21        		.uleb128 0x21
 2367 01f9 11        		.uleb128 0x11
 2368 01fa 01        		.byte	0x1
 2369 01fb 25        		.uleb128 0x25
 2370 01fc 0E        		.uleb128 0xe
 2371 01fd 13        		.uleb128 0x13
 2372 01fe 0B        		.uleb128 0xb
 2373 01ff 03        		.uleb128 0x3
 2374 0200 0E        		.uleb128 0xe
 2375 0201 1B        		.uleb128 0x1b
 2376 0202 0E        		.uleb128 0xe
 2377 0203 11        		.uleb128 0x11
 2378 0204 01        		.uleb128 0x1
 2379 0205 12        		.uleb128 0x12
 2380 0206 06        		.uleb128 0x6
 2381 0207 10        		.uleb128 0x10
 2382 0208 17        		.uleb128 0x17
 2383 0209 00        		.byte	0
 2384 020a 00        		.byte	0
 2385 020b 22        		.uleb128 0x22
 2386 020c 24        		.uleb128 0x24
 2387 020d 00        		.byte	0
 2388 020e 0B        		.uleb128 0xb
 2389 020f 0B        		.uleb128 0xb
 2390 0210 3E        		.uleb128 0x3e
 2391 0211 0B        		.uleb128 0xb
 2392 0212 03        		.uleb128 0x3
 2393 0213 08        		.uleb128 0x8
 2394 0214 00        		.byte	0
 2395 0215 00        		.byte	0
 2396 0216 23        		.uleb128 0x23
 2397 0217 0F        		.uleb128 0xf
 2398 0218 00        		.byte	0
 2399 0219 0B        		.uleb128 0xb
 2400 021a 0B        		.uleb128 0xb
 2401 021b 00        		.byte	0
 2402 021c 00        		.byte	0
 2403 021d 24        		.uleb128 0x24
 2404 021e 15        		.uleb128 0x15
 2405 021f 01        		.byte	0x1
 2406 0220 01        		.uleb128 0x1
 2407 0221 13        		.uleb128 0x13
 2408 0222 00        		.byte	0
 2409 0223 00        		.byte	0


 2410 0224 25        		.uleb128 0x25
 2411 0225 13        		.uleb128 0x13
 2412 0226 01        		.byte	0x1
 2413 0227 0B        		.uleb128 0xb
 2414 0228 05        		.uleb128 0x5
 2415 0229 3A        		.uleb128 0x3a
 2416 022a 0B        		.uleb128 0xb
 2417 022b 3B        		.uleb128 0x3b
 2418 022c 0B        		.uleb128 0xb
 2419 022d 39        		.uleb128 0x39
 2420 022e 0B        		.uleb128 0xb
 2421 022f 01        		.uleb128 0x1
 2422 0230 13        		.uleb128 0x13
 2423 0231 00        		.byte	0
 2424 0232 00        		.byte	0
 2425 0233 26        		.uleb128 0x26
 2426 0234 0D        		.uleb128 0xd
 2427 0235 00        		.byte	0
 2428 0236 03        		.uleb128 0x3
 2429 0237 0E        		.uleb128 0xe
 2430 0238 3A        		.uleb128 0x3a
 2431 0239 0B        		.uleb128 0xb
 2432 023a 3B        		.uleb128 0x3b
 2433 023b 0B        		.uleb128 0xb
 2434 023c 39        		.uleb128 0x39
 2435 023d 0B        		.uleb128 0xb
 2436 023e 49        		.uleb128 0x49
 2437 023f 13        		.uleb128 0x13
 2438 0240 38        		.uleb128 0x38
 2439 0241 05        		.uleb128 0x5
 2440 0242 00        		.byte	0
 2441 0243 00        		.byte	0
 2442 0244 27        		.uleb128 0x27
 2443 0245 21        		.uleb128 0x21
 2444 0246 00        		.byte	0
 2445 0247 49        		.uleb128 0x49
 2446 0248 13        		.uleb128 0x13
 2447 0249 2F        		.uleb128 0x2f
 2448 024a 05        		.uleb128 0x5
 2449 024b 00        		.byte	0
 2450 024c 00        		.byte	0
 2451 024d 28        		.uleb128 0x28
 2452 024e 34        		.uleb128 0x34
 2453 024f 00        		.byte	0
 2454 0250 03        		.uleb128 0x3
 2455 0251 0E        		.uleb128 0xe
 2456 0252 3A        		.uleb128 0x3a
 2457 0253 0B        		.uleb128 0xb
 2458 0254 3B        		.uleb128 0x3b
 2459 0255 0B        		.uleb128 0xb
 2460 0256 39        		.uleb128 0x39
 2461 0257 0B        		.uleb128 0xb
 2462 0258 49        		.uleb128 0x49
 2463 0259 13        		.uleb128 0x13
 2464 025a 02        		.uleb128 0x2
 2465 025b 17        		.uleb128 0x17
 2466 025c B742      		.uleb128 0x2137


 2467 025e 17        		.uleb128 0x17
 2468 025f 00        		.byte	0
 2469 0260 00        		.byte	0
 2470 0261 29        		.uleb128 0x29
 2471 0262 2E        		.uleb128 0x2e
 2472 0263 00        		.byte	0
 2473 0264 3F        		.uleb128 0x3f
 2474 0265 19        		.uleb128 0x19
 2475 0266 03        		.uleb128 0x3
 2476 0267 0E        		.uleb128 0xe
 2477 0268 3A        		.uleb128 0x3a
 2478 0269 0B        		.uleb128 0xb
 2479 026a 3B        		.uleb128 0x3b
 2480 026b 0B        		.uleb128 0xb
 2481 026c 39        		.uleb128 0x39
 2482 026d 0B        		.uleb128 0xb
 2483 026e 20        		.uleb128 0x20
 2484 026f 0B        		.uleb128 0xb
 2485 0270 00        		.byte	0
 2486 0271 00        		.byte	0
 2487 0272 2A        		.uleb128 0x2a
 2488 0273 2E        		.uleb128 0x2e
 2489 0274 01        		.byte	0x1
 2490 0275 3F        		.uleb128 0x3f
 2491 0276 19        		.uleb128 0x19
 2492 0277 03        		.uleb128 0x3
 2493 0278 0E        		.uleb128 0xe
 2494 0279 3A        		.uleb128 0x3a
 2495 027a 0B        		.uleb128 0xb
 2496 027b 3B        		.uleb128 0x3b
 2497 027c 0B        		.uleb128 0xb
 2498 027d 39        		.uleb128 0x39
 2499 027e 0B        		.uleb128 0xb
 2500 027f 27        		.uleb128 0x27
 2501 0280 19        		.uleb128 0x19
 2502 0281 20        		.uleb128 0x20
 2503 0282 0B        		.uleb128 0xb
 2504 0283 01        		.uleb128 0x1
 2505 0284 13        		.uleb128 0x13
 2506 0285 00        		.byte	0
 2507 0286 00        		.byte	0
 2508 0287 2B        		.uleb128 0x2b
 2509 0288 2E        		.uleb128 0x2e
 2510 0289 00        		.byte	0
 2511 028a 3F        		.uleb128 0x3f
 2512 028b 19        		.uleb128 0x19
 2513 028c 3C        		.uleb128 0x3c
 2514 028d 19        		.uleb128 0x19
 2515 028e 6E        		.uleb128 0x6e
 2516 028f 0E        		.uleb128 0xe
 2517 0290 03        		.uleb128 0x3
 2518 0291 0E        		.uleb128 0xe
 2519 0292 3A        		.uleb128 0x3a
 2520 0293 0B        		.uleb128 0xb
 2521 0294 3B        		.uleb128 0x3b
 2522 0295 0B        		.uleb128 0xb
 2523 0296 00        		.byte	0


 2524 0297 00        		.byte	0
 2525 0298 00        		.byte	0
 2526               		.section	.debug_loclists,"",@progbits
 2527 0000 0000 0422 		.long	.Ldebug_loc3-.Ldebug_loc2
 2528               	.Ldebug_loc2:
 2529 0004 0005      		.word	0x5
 2530 0006 04        		.byte	0x4
 2531 0007 00        		.byte	0
 2532 0008 0000 0000 		.long	0
 2533               	.Ldebug_loc0:
 2534               	.LVUS29:
 2535 000c 02        		.uleb128 .LVU300
 2536 000d 00        		.uleb128 0
 2537               	.LLST29:
 2538 000e 04        		.byte	0x4
 2539 000f D406      		.uleb128 .LVL74-.Ltext0
 2540 0011 B007      		.uleb128 .LFE13-.Ltext0
 2541 0013 01        		.uleb128 0x1
 2542 0014 59        		.byte	0x59
 2543 0015 00        		.byte	0
 2544               	.LVUS30:
 2545 0016 02        		.uleb128 .LVU286
 2546 0017 00        		.uleb128 .LVU289
 2547 0018 00        		.uleb128 .LVU289
 2548 0019 02        		.uleb128 .LVU300
 2549               	.LLST30:
 2550 001a 04        		.byte	0x4
 2551 001b A606      		.uleb128 .LVL70-.Ltext0
 2552 001d B206      		.uleb128 .LVL71-.Ltext0
 2553 001f 0C        		.uleb128 0xc
 2554 0020 91        		.byte	0x91
 2555 0021 70        		.sleb128 -16
 2556 0022 06        		.byte	0x6
 2557 0023 33        		.byte	0x33
 2558 0024 24        		.byte	0x24
 2559 0025 03        		.byte	0x3
 2560 0026 0000 0000 		.long	semaphore+4
 2561 002a 22        		.byte	0x22
 2562 002b 9F        		.byte	0x9f
 2563 002c 04        		.byte	0x4
 2564 002d B206      		.uleb128 .LVL71-.Ltext0
 2565 002f D406      		.uleb128 .LVL74-.Ltext0
 2566 0031 01        		.uleb128 0x1
 2567 0032 50        		.byte	0x50
 2568 0033 00        		.byte	0
 2569               	.LVUS31:
 2570 0034 00        		.uleb128 .LVU290
 2571 0035 02        		.uleb128 .LVU300
 2572               	.LLST31:
 2573 0036 04        		.byte	0x4
 2574 0037 B606      		.uleb128 .LVL72-.Ltext0
 2575 0039 D406      		.uleb128 .LVL74-.Ltext0
 2576 003b 01        		.uleb128 0x1
 2577 003c 59        		.byte	0x59
 2578 003d 00        		.byte	0
 2579               	.LVUS32:
 2580 003e 01        		.uleb128 .LVU293


 2581 003f 00        		.uleb128 .LVU298
 2582               	.LLST32:
 2583 0040 04        		.byte	0x4
 2584 0041 BC06      		.uleb128 .LVL73-.Ltext0
 2585 0043 D406      		.uleb128 .LVL74-.Ltext0
 2586 0045 0B        		.uleb128 0xb
 2587 0046 79        		.byte	0x79
 2588 0047 00        		.sleb128 0
 2589 0048 44        		.byte	0x44
 2590 0049 1E        		.byte	0x1e
 2591 004a 03        		.byte	0x3
 2592 004b 0000 0000 		.long	task_tab
 2593 004f 22        		.byte	0x22
 2594 0050 9F        		.byte	0x9f
 2595 0051 00        		.byte	0
 2596               	.LVUS34:
 2597 0052 04        		.uleb128 .LVU302
 2598 0053 00        		.uleb128 0
 2599               	.LLST34:
 2600 0054 04        		.byte	0x4
 2601 0055 D406      		.uleb128 .LVL74-.Ltext0
 2602 0057 B007      		.uleb128 .LFE13-.Ltext0
 2603 0059 01        		.uleb128 0x1
 2604 005a 59        		.byte	0x59
 2605 005b 00        		.byte	0
 2606               	.LVUS35:
 2607 005c 01        		.uleb128 .LVU310
 2608 005d 00        		.uleb128 .LVU314
 2609 005e 00        		.uleb128 .LVU314
 2610 005f 01        		.uleb128 .LVU315
 2611 0060 01        		.uleb128 .LVU315
 2612 0061 00        		.uleb128 .LVU319
 2613 0062 00        		.uleb128 .LVU319
 2614 0063 00        		.uleb128 .LVU322
 2615               	.LLST35:
 2616 0064 04        		.byte	0x4
 2617 0065 E606      		.uleb128 .LVL75-.Ltext0
 2618 0067 8207      		.uleb128 .LVL76-.Ltext0
 2619 0069 0B        		.uleb128 0xb
 2620 006a 71        		.byte	0x71
 2621 006b 00        		.sleb128 0
 2622 006c 44        		.byte	0x44
 2623 006d 1E        		.byte	0x1e
 2624 006e 03        		.byte	0x3
 2625 006f 0000 0000 		.long	task_tab
 2626 0073 22        		.byte	0x22
 2627 0074 9F        		.byte	0x9f
 2628 0075 04        		.byte	0x4
 2629 0076 8207      		.uleb128 .LVL76-.Ltext0
 2630 0078 8207      		.uleb128 .LVL76-.Ltext0
 2631 007a 0F        		.uleb128 0xf
 2632 007b 03        		.byte	0x3
 2633 007c 0000 0000 		.long	ready
 2634 0080 06        		.byte	0x6
 2635 0081 44        		.byte	0x44
 2636 0082 1E        		.byte	0x1e
 2637 0083 03        		.byte	0x3


 2638 0084 0000 0000 		.long	task_tab
 2639 0088 22        		.byte	0x22
 2640 0089 9F        		.byte	0x9f
 2641 008a 04        		.byte	0x4
 2642 008b 8207      		.uleb128 .LVL76-.Ltext0
 2643 008d 8607      		.uleb128 .LVL77-.Ltext0
 2644 008f 0B        		.uleb128 0xb
 2645 0090 70        		.byte	0x70
 2646 0091 00        		.sleb128 0
 2647 0092 44        		.byte	0x44
 2648 0093 1E        		.byte	0x1e
 2649 0094 03        		.byte	0x3
 2650 0095 0000 0000 		.long	task_tab
 2651 0099 22        		.byte	0x22
 2652 009a 9F        		.byte	0x9f
 2653 009b 04        		.byte	0x4
 2654 009c 8607      		.uleb128 .LVL77-.Ltext0
 2655 009e A807      		.uleb128 .LVL78-.Ltext0
 2656 00a0 0B        		.uleb128 0xb
 2657 00a1 71        		.byte	0x71
 2658 00a2 00        		.sleb128 0
 2659 00a3 44        		.byte	0x44
 2660 00a4 1E        		.byte	0x1e
 2661 00a5 03        		.byte	0x3
 2662 00a6 0000 0000 		.long	task_tab
 2663 00aa 22        		.byte	0x22
 2664 00ab 9F        		.byte	0x9f
 2665 00ac 00        		.byte	0
 2666               	.LVUS21:
 2667 00ad 00        		.uleb128 .LVU208
 2668 00ae 00        		.uleb128 .LVU215
 2669 00af 00        		.uleb128 .LVU237
 2670 00b0 01        		.uleb128 .LVU255
 2671               	.LLST21:
 2672 00b1 04        		.byte	0x4
 2673 00b2 E204      		.uleb128 .LVL52-.Ltext0
 2674 00b4 FC04      		.uleb128 .LVL54-.Ltext0
 2675 00b6 01        		.uleb128 0x1
 2676 00b7 52        		.byte	0x52
 2677 00b8 04        		.byte	0x4
 2678 00b9 AA05      		.uleb128 .LVL58-.Ltext0
 2679 00bb F005      		.uleb128 .LVL64-.Ltext0
 2680 00bd 01        		.uleb128 0x1
 2681 00be 52        		.byte	0x52
 2682 00bf 00        		.byte	0
 2683               	.LVUS22:
 2684 00c0 00        		.uleb128 .LVU208
 2685 00c1 00        		.uleb128 .LVU211
 2686 00c2 00        		.uleb128 .LVU211
 2687 00c3 00        		.uleb128 .LVU215
 2688 00c4 00        		.uleb128 .LVU237
 2689 00c5 00        		.uleb128 .LVU241
 2690 00c6 00        		.uleb128 .LVU241
 2691 00c7 00        		.uleb128 .LVU242
 2692 00c8 00        		.uleb128 .LVU242
 2693 00c9 01        		.uleb128 .LVU255
 2694               	.LLST22:


 2695 00ca 04        		.byte	0x4
 2696 00cb E204      		.uleb128 .LVL52-.Ltext0
 2697 00cd EE04      		.uleb128 .LVL53-.Ltext0
 2698 00cf 0C        		.uleb128 0xc
 2699 00d0 91        		.byte	0x91
 2700 00d1 70        		.sleb128 -16
 2701 00d2 06        		.byte	0x6
 2702 00d3 33        		.byte	0x33
 2703 00d4 24        		.byte	0x24
 2704 00d5 03        		.byte	0x3
 2705 00d6 0000 0000 		.long	semaphore+4
 2706 00da 22        		.byte	0x22
 2707 00db 9F        		.byte	0x9f
 2708 00dc 04        		.byte	0x4
 2709 00dd EE04      		.uleb128 .LVL53-.Ltext0
 2710 00df FC04      		.uleb128 .LVL54-.Ltext0
 2711 00e1 01        		.uleb128 0x1
 2712 00e2 50        		.byte	0x50
 2713 00e3 04        		.byte	0x4
 2714 00e4 AA05      		.uleb128 .LVL58-.Ltext0
 2715 00e6 B205      		.uleb128 .LVL59-.Ltext0
 2716 00e8 01        		.uleb128 0x1
 2717 00e9 50        		.byte	0x50
 2718 00ea 04        		.byte	0x4
 2719 00eb B205      		.uleb128 .LVL59-.Ltext0
 2720 00ed C005      		.uleb128 .LVL60-.Ltext0
 2721 00ef 01        		.uleb128 0x1
 2722 00f0 58        		.byte	0x58
 2723 00f1 04        		.byte	0x4
 2724 00f2 C005      		.uleb128 .LVL60-.Ltext0
 2725 00f4 F005      		.uleb128 .LVL64-.Ltext0
 2726 00f6 0C        		.uleb128 0xc
 2727 00f7 91        		.byte	0x91
 2728 00f8 70        		.sleb128 -16
 2729 00f9 06        		.byte	0x6
 2730 00fa 33        		.byte	0x33
 2731 00fb 24        		.byte	0x24
 2732 00fc 03        		.byte	0x3
 2733 00fd 0000 0000 		.long	semaphore+4
 2734 0101 22        		.byte	0x22
 2735 0102 9F        		.byte	0x9f
 2736 0103 00        		.byte	0
 2737               	.LVUS23:
 2738 0104 01        		.uleb128 .LVU238
 2739 0105 00        		.uleb128 .LVU244
 2740 0106 00        		.uleb128 .LVU244
 2741 0107 01        		.uleb128 .LVU245
 2742 0108 01        		.uleb128 .LVU245
 2743 0109 00        		.uleb128 .LVU249
 2744 010a 00        		.uleb128 .LVU249
 2745 010b 00        		.uleb128 .LVU252
 2746               	.LLST23:
 2747 010c 04        		.byte	0x4
 2748 010d AA05      		.uleb128 .LVL58-.Ltext0
 2749 010f C605      		.uleb128 .LVL61-.Ltext0
 2750 0111 0B        		.uleb128 0xb
 2751 0112 71        		.byte	0x71


 2752 0113 00        		.sleb128 0
 2753 0114 44        		.byte	0x44
 2754 0115 1E        		.byte	0x1e
 2755 0116 03        		.byte	0x3
 2756 0117 0000 0000 		.long	task_tab
 2757 011b 22        		.byte	0x22
 2758 011c 9F        		.byte	0x9f
 2759 011d 04        		.byte	0x4
 2760 011e C605      		.uleb128 .LVL61-.Ltext0
 2761 0120 C605      		.uleb128 .LVL61-.Ltext0
 2762 0122 15        		.uleb128 0x15
 2763 0123 91        		.byte	0x91
 2764 0124 70        		.sleb128 -16
 2765 0125 06        		.byte	0x6
 2766 0126 33        		.byte	0x33
 2767 0127 24        		.byte	0x24
 2768 0128 03        		.byte	0x3
 2769 0129 0000 0000 		.long	semaphore+4
 2770 012d 22        		.byte	0x22
 2771 012e 06        		.byte	0x6
 2772 012f 44        		.byte	0x44
 2773 0130 1E        		.byte	0x1e
 2774 0131 03        		.byte	0x3
 2775 0132 0000 0000 		.long	task_tab
 2776 0136 22        		.byte	0x22
 2777 0137 9F        		.byte	0x9f
 2778 0138 04        		.byte	0x4
 2779 0139 C605      		.uleb128 .LVL61-.Ltext0
 2780 013b CA05      		.uleb128 .LVL62-.Ltext0
 2781 013d 0B        		.uleb128 0xb
 2782 013e 70        		.byte	0x70
 2783 013f 00        		.sleb128 0
 2784 0140 44        		.byte	0x44
 2785 0141 1E        		.byte	0x1e
 2786 0142 03        		.byte	0x3
 2787 0143 0000 0000 		.long	task_tab
 2788 0147 22        		.byte	0x22
 2789 0148 9F        		.byte	0x9f
 2790 0149 04        		.byte	0x4
 2791 014a CA05      		.uleb128 .LVL62-.Ltext0
 2792 014c EC05      		.uleb128 .LVL63-.Ltext0
 2793 014e 0B        		.uleb128 0xb
 2794 014f 71        		.byte	0x71
 2795 0150 00        		.sleb128 0
 2796 0151 44        		.byte	0x44
 2797 0152 1E        		.byte	0x1e
 2798 0153 03        		.byte	0x3
 2799 0154 0000 0000 		.long	task_tab
 2800 0158 22        		.byte	0x22
 2801 0159 9F        		.byte	0x9f
 2802 015a 00        		.byte	0
 2803               	.LVUS26:
 2804 015b 04        		.uleb128 .LVU219
 2805 015c 01        		.uleb128 .LVU231
 2806 015d 05        		.uleb128 .LVU259
 2807 015e 01        		.uleb128 .LVU265
 2808               	.LLST26:


 2809 015f 04        		.byte	0x4
 2810 0160 FC04      		.uleb128 .LVL54-.Ltext0
 2811 0162 9C05      		.uleb128 .LVL57-.Ltext0
 2812 0164 06        		.uleb128 0x6
 2813 0165 03        		.byte	0x3
 2814 0166 0000 0000 		.long	ready
 2815 016a 9F        		.byte	0x9f
 2816 016b 04        		.byte	0x4
 2817 016c F005      		.uleb128 .LVL64-.Ltext0
 2818 016e F805      		.uleb128 .LVL66-.Ltext0
 2819 0170 06        		.uleb128 0x6
 2820 0171 03        		.byte	0x3
 2821 0172 0000 0000 		.long	ready
 2822 0176 9F        		.byte	0x9f
 2823 0177 00        		.byte	0
 2824               	.LVUS27:
 2825 0178 00        		.uleb128 .LVU222
 2826 0179 01        		.uleb128 .LVU231
 2827 017a 00        		.uleb128 .LVU262
 2828 017b 01        		.uleb128 .LVU265
 2829               	.LLST27:
 2830 017c 04        		.byte	0x4
 2831 017d 8205      		.uleb128 .LVL55-.Ltext0
 2832 017f 9C05      		.uleb128 .LVL57-.Ltext0
 2833 0181 01        		.uleb128 0x1
 2834 0182 51        		.byte	0x51
 2835 0183 04        		.byte	0x4
 2836 0184 F605      		.uleb128 .LVL65-.Ltext0
 2837 0186 F805      		.uleb128 .LVL66-.Ltext0
 2838 0188 01        		.uleb128 0x1
 2839 0189 51        		.byte	0x51
 2840 018a 00        		.byte	0
 2841               	.LVUS28:
 2842 018b 01        		.uleb128 .LVU225
 2843 018c 00        		.uleb128 .LVU237
 2844               	.LLST28:
 2845 018d 04        		.byte	0x4
 2846 018e 8405      		.uleb128 .LVL56-.Ltext0
 2847 0190 A905      		.uleb128 .LVL58-1-.Ltext0
 2848 0192 0B        		.uleb128 0xb
 2849 0193 71        		.byte	0x71
 2850 0194 00        		.sleb128 0
 2851 0195 44        		.byte	0x44
 2852 0196 1E        		.byte	0x1e
 2853 0197 03        		.byte	0x3
 2854 0198 0000 0000 		.long	task_tab
 2855 019c 22        		.byte	0x22
 2856 019d 9F        		.byte	0x9f
 2857 019e 00        		.byte	0
 2858               	.LVUS10:
 2859 019f 02        		.uleb128 .LVU122
 2860 01a0 02        		.uleb128 .LVU135
 2861               	.LLST10:
 2862 01a1 04        		.byte	0x4
 2863 01a2 F202      		.uleb128 .LVL30-.Ltext0
 2864 01a4 9403      		.uleb128 .LVL33-.Ltext0
 2865 01a6 06        		.uleb128 0x6


 2866 01a7 03        		.byte	0x3
 2867 01a8 0000 0000 		.long	ready
 2868 01ac 9F        		.byte	0x9f
 2869 01ad 00        		.byte	0
 2870               	.LVUS11:
 2871 01ae 00        		.uleb128 .LVU125
 2872 01af 02        		.uleb128 .LVU135
 2873               	.LLST11:
 2874 01b0 04        		.byte	0x4
 2875 01b1 F802      		.uleb128 .LVL31-.Ltext0
 2876 01b3 9403      		.uleb128 .LVL33-.Ltext0
 2877 01b5 01        		.uleb128 0x1
 2878 01b6 50        		.byte	0x50
 2879 01b7 00        		.byte	0
 2880               	.LVUS12:
 2881 01b8 01        		.uleb128 .LVU128
 2882 01b9 00        		.uleb128 .LVU133
 2883               	.LLST12:
 2884 01ba 04        		.byte	0x4
 2885 01bb FA02      		.uleb128 .LVL32-.Ltext0
 2886 01bd 9403      		.uleb128 .LVL33-.Ltext0
 2887 01bf 0B        		.uleb128 0xb
 2888 01c0 70        		.byte	0x70
 2889 01c1 00        		.sleb128 0
 2890 01c2 44        		.byte	0x44
 2891 01c3 1E        		.byte	0x1e
 2892 01c4 03        		.byte	0x3
 2893 01c5 0000 0000 		.long	task_tab
 2894 01c9 22        		.byte	0x22
 2895 01ca 9F        		.byte	0x9f
 2896 01cb 00        		.byte	0
 2897               	.LVUS1:
 2898 01cc 02        		.uleb128 .LVU45
 2899 01cd 00        		.uleb128 .LVU47
 2900 01ce 00        		.uleb128 .LVU47
 2901 01cf 00        		.uleb128 0
 2902               	.LLST1:
 2903 01d0 04        		.byte	0x4
 2904 01d1 60        		.uleb128 .LVL7-.Ltext0
 2905 01d2 68        		.uleb128 .LVL8-.Ltext0
 2906 01d3 02        		.uleb128 0x2
 2907 01d4 31        		.byte	0x31
 2908 01d5 9F        		.byte	0x9f
 2909 01d6 04        		.byte	0x4
 2910 01d7 68        		.uleb128 .LVL8-.Ltext0
 2911 01d8 B002      		.uleb128 .LFE4-.Ltext0
 2912 01da 01        		.uleb128 0x1
 2913 01db 51        		.byte	0x51
 2914 01dc 00        		.byte	0
 2915               	.LVUS2:
 2916 01dd 01        		.uleb128 .LVU59
 2917 01de 01        		.uleb128 .LVU72
 2918               	.LLST2:
 2919 01df 04        		.byte	0x4
 2920 01e0 A801      		.uleb128 .LVL10-.Ltext0
 2921 01e2 CA01      		.uleb128 .LVL14-.Ltext0
 2922 01e4 05        		.uleb128 0x5


 2923 01e5 03        		.byte	0x3
 2924 01e6 0000 0000 		.long	new_task
 2925 01ea 00        		.byte	0
 2926               	.LVUS3:
 2927 01eb 00        		.uleb128 .LVU62
 2928 01ec 01        		.uleb128 .LVU63
 2929 01ed 01        		.uleb128 .LVU63
 2930 01ee 01        		.uleb128 .LVU68
 2931 01ef 01        		.uleb128 .LVU68
 2932 01f0 02        		.uleb128 .LVU69
 2933 01f1 02        		.uleb128 .LVU69
 2934 01f2 03        		.uleb128 .LVU70
 2935 01f3 03        		.uleb128 .LVU70
 2936 01f4 01        		.uleb128 .LVU72
 2937               	.LLST3:
 2938 01f5 04        		.byte	0x4
 2939 01f6 B601      		.uleb128 .LVL11-.Ltext0
 2940 01f8 B601      		.uleb128 .LVL11-.Ltext0
 2941 01fa 01        		.uleb128 0x1
 2942 01fb 5A        		.byte	0x5a
 2943 01fc 04        		.byte	0x4
 2944 01fd B601      		.uleb128 .LVL11-.Ltext0
 2945 01ff C001      		.uleb128 .LVL13-.Ltext0
 2946 0201 03        		.uleb128 0x3
 2947 0202 7A        		.byte	0x7a
 2948 0203 7C        		.sleb128 -4
 2949 0204 9F        		.byte	0x9f
 2950 0205 04        		.byte	0x4
 2951 0206 C001      		.uleb128 .LVL13-.Ltext0
 2952 0208 C001      		.uleb128 .LVL13-.Ltext0
 2953 020a 03        		.uleb128 0x3
 2954 020b 7A        		.byte	0x7a
 2955 020c 7A        		.sleb128 -6
 2956 020d 9F        		.byte	0x9f
 2957 020e 04        		.byte	0x4
 2958 020f C001      		.uleb128 .LVL13-.Ltext0
 2959 0211 C001      		.uleb128 .LVL13-.Ltext0
 2960 0213 04        		.uleb128 0x4
 2961 0214 7A        		.byte	0x7a
 2962 0215 BE7F      		.sleb128 -66
 2963 0217 9F        		.byte	0x9f
 2964 0218 04        		.byte	0x4
 2965 0219 C001      		.uleb128 .LVL13-.Ltext0
 2966 021b CA01      		.uleb128 .LVL14-.Ltext0
 2967 021d 04        		.uleb128 0x4
 2968 021e 7A        		.byte	0x7a
 2969 021f BA7F      		.sleb128 -70
 2970 0221 9F        		.byte	0x9f
 2971 0222 00        		.byte	0
 2972               	.LVUS4:
 2973 0223 01        		.uleb128 .LVU65
 2974 0224 02        		.uleb128 .LVU66
 2975 0225 02        		.uleb128 .LVU66
 2976 0226 00        		.uleb128 .LVU73
 2977 0227 00        		.uleb128 .LVU73
 2978 0228 00        		.uleb128 .LVU82
 2979 0229 00        		.uleb128 .LVU82


 2980 022a 00        		.uleb128 .LVU83
 2981 022b 00        		.uleb128 .LVU83
 2982 022c 00        		.uleb128 .LVU102
 2983 022d 00        		.uleb128 .LVU102
 2984 022e 00        		.uleb128 0
 2985               	.LLST4:
 2986 022f 04        		.byte	0x4
 2987 0230 BC01      		.uleb128 .LVL12-.Ltext0
 2988 0232 BC01      		.uleb128 .LVL12-.Ltext0
 2989 0234 03        		.uleb128 0x3
 2990 0235 7A        		.byte	0x7a
 2991 0236 7C        		.sleb128 -4
 2992 0237 9F        		.byte	0x9f
 2993 0238 04        		.byte	0x4
 2994 0239 BC01      		.uleb128 .LVL12-.Ltext0
 2995 023b CE01      		.uleb128 .LVL15-.Ltext0
 2996 023d 03        		.uleb128 0x3
 2997 023e 7A        		.byte	0x7a
 2998 023f 7A        		.sleb128 -6
 2999 0240 9F        		.byte	0x9f
 3000 0241 04        		.byte	0x4
 3001 0242 CE01      		.uleb128 .LVL15-.Ltext0
 3002 0244 E801      		.uleb128 .LVL18-.Ltext0
 3003 0246 04        		.uleb128 0x4
 3004 0247 7A        		.byte	0x7a
 3005 0248 C000      		.sleb128 64
 3006 024a 9F        		.byte	0x9f
 3007 024b 04        		.byte	0x4
 3008 024c E801      		.uleb128 .LVL18-.Ltext0
 3009 024e EA01      		.uleb128 .LVL19-.Ltext0
 3010 0250 15        		.uleb128 0x15
 3011 0251 71        		.byte	0x71
 3012 0252 00        		.sleb128 0
 3013 0253 71        		.byte	0x71
 3014 0254 00        		.sleb128 0
 3015 0255 22        		.byte	0x22
 3016 0256 31        		.byte	0x31
 3017 0257 24        		.byte	0x24
 3018 0258 71        		.byte	0x71
 3019 0259 00        		.sleb128 0
 3020 025a 22        		.byte	0x22
 3021 025b 32        		.byte	0x32
 3022 025c 24        		.byte	0x24
 3023 025d 79        		.byte	0x79
 3024 025e 00        		.sleb128 0
 3025 025f 22        		.byte	0x22
 3026 0260 23        		.byte	0x23
 3027 0261 04        		.uleb128 0x4
 3028 0262 06        		.byte	0x6
 3029 0263 23        		.byte	0x23
 3030 0264 40        		.uleb128 0x40
 3031 0265 9F        		.byte	0x9f
 3032 0266 04        		.byte	0x4
 3033 0267 EA01      		.uleb128 .LVL19-.Ltext0
 3034 0269 AE02      		.uleb128 .LVL24-.Ltext0
 3035 026b 04        		.uleb128 0x4
 3036 026c 7A        		.byte	0x7a


 3037 026d C000      		.sleb128 64
 3038 026f 9F        		.byte	0x9f
 3039 0270 04        		.byte	0x4
 3040 0271 AE02      		.uleb128 .LVL24-.Ltext0
 3041 0273 B002      		.uleb128 .LFE4-.Ltext0
 3042 0275 15        		.uleb128 0x15
 3043 0276 71        		.byte	0x71
 3044 0277 00        		.sleb128 0
 3045 0278 71        		.byte	0x71
 3046 0279 00        		.sleb128 0
 3047 027a 22        		.byte	0x22
 3048 027b 31        		.byte	0x31
 3049 027c 24        		.byte	0x24
 3050 027d 71        		.byte	0x71
 3051 027e 00        		.sleb128 0
 3052 027f 22        		.byte	0x22
 3053 0280 32        		.byte	0x32
 3054 0281 24        		.byte	0x24
 3055 0282 79        		.byte	0x79
 3056 0283 00        		.sleb128 0
 3057 0284 22        		.byte	0x22
 3058 0285 23        		.byte	0x23
 3059 0286 04        		.uleb128 0x4
 3060 0287 06        		.byte	0x6
 3061 0288 23        		.byte	0x23
 3062 0289 40        		.uleb128 0x40
 3063 028a 9F        		.byte	0x9f
 3064 028b 00        		.byte	0
 3065               	.LVUS6:
 3066 028c 01        		.uleb128 .LVU75
 3067 028d 00        		.uleb128 .LVU79
 3068 028e 00        		.uleb128 .LVU79
 3069 028f 00        		.uleb128 0
 3070               	.LLST6:
 3071 0290 04        		.byte	0x4
 3072 0291 D201      		.uleb128 .LVL16-.Ltext0
 3073 0293 DE01      		.uleb128 .LVL17-.Ltext0
 3074 0295 05        		.uleb128 0x5
 3075 0296 03        		.byte	0x3
 3076 0297 0000 0000 		.long	new_task
 3077 029b 04        		.byte	0x4
 3078 029c DE01      		.uleb128 .LVL17-.Ltext0
 3079 029e B002      		.uleb128 .LFE4-.Ltext0
 3080 02a0 01        		.uleb128 0x1
 3081 02a1 51        		.byte	0x51
 3082 02a2 00        		.byte	0
 3083               	.LVUS7:
 3084 02a3 01        		.uleb128 .LVU84
 3085 02a4 00        		.uleb128 .LVU87
 3086 02a5 00        		.uleb128 .LVU87
 3087 02a6 01        		.uleb128 .LVU90
 3088 02a7 01        		.uleb128 .LVU90
 3089 02a8 00        		.uleb128 .LVU94
 3090 02a9 00        		.uleb128 .LVU94
 3091 02aa 00        		.uleb128 .LVU97
 3092               	.LLST7:
 3093 02ab 04        		.byte	0x4


 3094 02ac EA01      		.uleb128 .LVL19-.Ltext0
 3095 02ae FA01      		.uleb128 .LVL20-.Ltext0
 3096 02b0 0B        		.uleb128 0xb
 3097 02b1 78        		.byte	0x78
 3098 02b2 00        		.sleb128 0
 3099 02b3 44        		.byte	0x44
 3100 02b4 1E        		.byte	0x1e
 3101 02b5 03        		.byte	0x3
 3102 02b6 0000 0000 		.long	task_tab
 3103 02ba 22        		.byte	0x22
 3104 02bb 9F        		.byte	0x9f
 3105 02bc 04        		.byte	0x4
 3106 02bd FA01      		.uleb128 .LVL20-.Ltext0
 3107 02bf 8002      		.uleb128 .LVL21-.Ltext0
 3108 02c1 0F        		.uleb128 0xf
 3109 02c2 03        		.byte	0x3
 3110 02c3 0000 0000 		.long	ready
 3111 02c7 06        		.byte	0x6
 3112 02c8 44        		.byte	0x44
 3113 02c9 1E        		.byte	0x1e
 3114 02ca 03        		.byte	0x3
 3115 02cb 0000 0000 		.long	task_tab
 3116 02cf 22        		.byte	0x22
 3117 02d0 9F        		.byte	0x9f
 3118 02d1 04        		.byte	0x4
 3119 02d2 8002      		.uleb128 .LVL21-.Ltext0
 3120 02d4 8402      		.uleb128 .LVL22-.Ltext0
 3121 02d6 0B        		.uleb128 0xb
 3122 02d7 70        		.byte	0x70
 3123 02d8 00        		.sleb128 0
 3124 02d9 44        		.byte	0x44
 3125 02da 1E        		.byte	0x1e
 3126 02db 03        		.byte	0x3
 3127 02dc 0000 0000 		.long	task_tab
 3128 02e0 22        		.byte	0x22
 3129 02e1 9F        		.byte	0x9f
 3130 02e2 04        		.byte	0x4
 3131 02e3 8402      		.uleb128 .LVL22-.Ltext0
 3132 02e5 A002      		.uleb128 .LVL23-.Ltext0
 3133 02e7 0B        		.uleb128 0xb
 3134 02e8 78        		.byte	0x78
 3135 02e9 00        		.sleb128 0
 3136 02ea 44        		.byte	0x44
 3137 02eb 1E        		.byte	0x1e
 3138 02ec 03        		.byte	0x3
 3139 02ed 0000 0000 		.long	task_tab
 3140 02f1 22        		.byte	0x22
 3141 02f2 9F        		.byte	0x9f
 3142 02f3 00        		.byte	0
 3143               	.LVUS0:
 3144 02f4 03        		.uleb128 .LVU3
 3145 02f5 00        		.uleb128 .LVU4
 3146 02f6 01        		.uleb128 .LVU21
 3147 02f7 01        		.uleb128 .LVU27
 3148 02f8 01        		.uleb128 .LVU27
 3149 02f9 01        		.uleb128 .LVU33
 3150 02fa 01        		.uleb128 .LVU33


 3151 02fb 01        		.uleb128 .LVU39
 3152 02fc 01        		.uleb128 .LVU39
 3153 02fd 00        		.uleb128 0
 3154               	.LLST0:
 3155 02fe 04        		.byte	0x4
 3156 02ff 00        		.uleb128 .LVL0-.Ltext0
 3157 0300 0C        		.uleb128 .LVL1-.Ltext0
 3158 0301 02        		.uleb128 0x2
 3159 0302 30        		.byte	0x30
 3160 0303 9F        		.byte	0x9f
 3161 0304 04        		.byte	0x4
 3162 0305 34        		.uleb128 .LVL2-.Ltext0
 3163 0306 42        		.uleb128 .LVL3-.Ltext0
 3164 0307 02        		.uleb128 0x2
 3165 0308 30        		.byte	0x30
 3166 0309 9F        		.byte	0x9f
 3167 030a 04        		.byte	0x4
 3168 030b 42        		.uleb128 .LVL3-.Ltext0
 3169 030c 4E        		.uleb128 .LVL4-.Ltext0
 3170 030d 02        		.uleb128 0x2
 3171 030e 31        		.byte	0x31
 3172 030f 9F        		.byte	0x9f
 3173 0310 04        		.byte	0x4
 3174 0311 4E        		.uleb128 .LVL4-.Ltext0
 3175 0312 5A        		.uleb128 .LVL5-.Ltext0
 3176 0313 02        		.uleb128 0x2
 3177 0314 32        		.byte	0x32
 3178 0315 9F        		.byte	0x9f
 3179 0316 04        		.byte	0x4
 3180 0317 5A        		.uleb128 .LVL5-.Ltext0
 3181 0318 5C        		.uleb128 .LFE3-.Ltext0
 3182 0319 02        		.uleb128 0x2
 3183 031a 33        		.byte	0x33
 3184 031b 9F        		.byte	0x9f
 3185 031c 00        		.byte	0
 3186               	.LVUS8:
 3187 031d 00        		.uleb128 .LVU107
 3188 031e 01        		.uleb128 .LVU108
 3189 031f 01        		.uleb128 .LVU108
 3190 0320 01        		.uleb128 .LVU114
 3191 0321 01        		.uleb128 .LVU114
 3192 0322 02        		.uleb128 .LVU115
 3193 0323 02        		.uleb128 .LVU115
 3194 0324 03        		.uleb128 .LVU116
 3195 0325 03        		.uleb128 .LVU116
 3196 0326 00        		.uleb128 .LVU119
 3197 0327 00        		.uleb128 .LVU119
 3198 0328 00        		.uleb128 0
 3199               	.LLST8:
 3200 0329 04        		.byte	0x4
 3201 032a C402      		.uleb128 .LVL26-.Ltext0
 3202 032c C402      		.uleb128 .LVL26-.Ltext0
 3203 032e 01        		.uleb128 0x1
 3204 032f 58        		.byte	0x58
 3205 0330 04        		.byte	0x4
 3206 0331 C402      		.uleb128 .LVL26-.Ltext0
 3207 0333 E002      		.uleb128 .LVL28-.Ltext0


 3208 0335 03        		.uleb128 0x3
 3209 0336 78        		.byte	0x78
 3210 0337 7C        		.sleb128 -4
 3211 0338 9F        		.byte	0x9f
 3212 0339 04        		.byte	0x4
 3213 033a E002      		.uleb128 .LVL28-.Ltext0
 3214 033c E002      		.uleb128 .LVL28-.Ltext0
 3215 033e 03        		.uleb128 0x3
 3216 033f 78        		.byte	0x78
 3217 0340 7A        		.sleb128 -6
 3218 0341 9F        		.byte	0x9f
 3219 0342 04        		.byte	0x4
 3220 0343 E002      		.uleb128 .LVL28-.Ltext0
 3221 0345 E002      		.uleb128 .LVL28-.Ltext0
 3222 0347 04        		.uleb128 0x4
 3223 0348 78        		.byte	0x78
 3224 0349 BE7F      		.sleb128 -66
 3225 034b 9F        		.byte	0x9f
 3226 034c 04        		.byte	0x4
 3227 034d E002      		.uleb128 .LVL28-.Ltext0
 3228 034f EE02      		.uleb128 .LVL29-.Ltext0
 3229 0351 04        		.uleb128 0x4
 3230 0352 78        		.byte	0x78
 3231 0353 BA7F      		.sleb128 -70
 3232 0355 9F        		.byte	0x9f
 3233 0356 04        		.byte	0x4
 3234 0357 EE02      		.uleb128 .LVL29-.Ltext0
 3235 0359 F202      		.uleb128 .LFE5-.Ltext0
 3236 035b 01        		.uleb128 0x1
 3237 035c 50        		.byte	0x50
 3238 035d 00        		.byte	0
 3239               	.LVUS9:
 3240 035e 01        		.uleb128 .LVU111
 3241 035f 02        		.uleb128 .LVU112
 3242 0360 02        		.uleb128 .LVU112
 3243 0361 00        		.uleb128 0
 3244               	.LLST9:
 3245 0362 04        		.byte	0x4
 3246 0363 DC02      		.uleb128 .LVL27-.Ltext0
 3247 0365 DC02      		.uleb128 .LVL27-.Ltext0
 3248 0367 03        		.uleb128 0x3
 3249 0368 78        		.byte	0x78
 3250 0369 7C        		.sleb128 -4
 3251 036a 9F        		.byte	0x9f
 3252 036b 04        		.byte	0x4
 3253 036c DC02      		.uleb128 .LVL27-.Ltext0
 3254 036e F202      		.uleb128 .LFE5-.Ltext0
 3255 0370 03        		.uleb128 0x3
 3256 0371 78        		.byte	0x78
 3257 0372 7A        		.sleb128 -6
 3258 0373 9F        		.byte	0x9f
 3259 0374 00        		.byte	0
 3260               	.LVUS13:
 3261 0375 01        		.uleb128 .LVU150
 3262 0376 00        		.uleb128 .LVU154
 3263 0377 00        		.uleb128 .LVU154
 3264 0378 01        		.uleb128 .LVU155


 3265 0379 01        		.uleb128 .LVU155
 3266 037a 00        		.uleb128 .LVU159
 3267 037b 00        		.uleb128 .LVU159
 3268 037c 00        		.uleb128 .LVU162
 3269               	.LLST13:
 3270 037d 04        		.byte	0x4
 3271 037e C403      		.uleb128 .LVL38-.Ltext0
 3272 0380 E003      		.uleb128 .LVL39-.Ltext0
 3273 0382 0B        		.uleb128 0xb
 3274 0383 71        		.byte	0x71
 3275 0384 00        		.sleb128 0
 3276 0385 44        		.byte	0x44
 3277 0386 1E        		.byte	0x1e
 3278 0387 03        		.byte	0x3
 3279 0388 0000 0000 		.long	task_tab
 3280 038c 22        		.byte	0x22
 3281 038d 9F        		.byte	0x9f
 3282 038e 04        		.byte	0x4
 3283 038f E003      		.uleb128 .LVL39-.Ltext0
 3284 0391 E003      		.uleb128 .LVL39-.Ltext0
 3285 0393 0D        		.uleb128 0xd
 3286 0394 91        		.byte	0x91
 3287 0395 70        		.sleb128 -16
 3288 0396 06        		.byte	0x6
 3289 0397 06        		.byte	0x6
 3290 0398 44        		.byte	0x44
 3291 0399 1E        		.byte	0x1e
 3292 039a 03        		.byte	0x3
 3293 039b 0000 0000 		.long	task_tab
 3294 039f 22        		.byte	0x22
 3295 03a0 9F        		.byte	0x9f
 3296 03a1 04        		.byte	0x4
 3297 03a2 E003      		.uleb128 .LVL39-.Ltext0
 3298 03a4 E403      		.uleb128 .LVL40-.Ltext0
 3299 03a6 0B        		.uleb128 0xb
 3300 03a7 70        		.byte	0x70
 3301 03a8 00        		.sleb128 0
 3302 03a9 44        		.byte	0x44
 3303 03aa 1E        		.byte	0x1e
 3304 03ab 03        		.byte	0x3
 3305 03ac 0000 0000 		.long	task_tab
 3306 03b0 22        		.byte	0x22
 3307 03b1 9F        		.byte	0x9f
 3308 03b2 04        		.byte	0x4
 3309 03b3 E403      		.uleb128 .LVL40-.Ltext0
 3310 03b5 8604      		.uleb128 .LVL41-.Ltext0
 3311 03b7 0B        		.uleb128 0xb
 3312 03b8 71        		.byte	0x71
 3313 03b9 00        		.sleb128 0
 3314 03ba 44        		.byte	0x44
 3315 03bb 1E        		.byte	0x1e
 3316 03bc 03        		.byte	0x3
 3317 03bd 0000 0000 		.long	task_tab
 3318 03c1 22        		.byte	0x22
 3319 03c2 9F        		.byte	0x9f
 3320 03c3 00        		.byte	0
 3321               	.LVUS14:


 3322 03c4 00        		.uleb128 .LVU170
 3323 03c5 00        		.uleb128 0
 3324               	.LLST14:
 3325 03c6 04        		.byte	0x4
 3326 03c7 9404      		.uleb128 .LVL43-.Ltext0
 3327 03c9 AE04      		.uleb128 .LFE8-.Ltext0
 3328 03cb 01        		.uleb128 0x1
 3329 03cc 50        		.byte	0x50
 3330 03cd 00        		.byte	0
 3331               	.LVUS15:
 3332 03ce 01        		.uleb128 .LVU173
 3333 03cf 01        		.uleb128 .LVU179
 3334               	.LLST15:
 3335 03d0 04        		.byte	0x4
 3336 03d1 9604      		.uleb128 .LVL44-.Ltext0
 3337 03d3 AC04      		.uleb128 .LVL45-.Ltext0
 3338 03d5 0B        		.uleb128 0xb
 3339 03d6 70        		.byte	0x70
 3340 03d7 00        		.sleb128 0
 3341 03d8 44        		.byte	0x44
 3342 03d9 1E        		.byte	0x1e
 3343 03da 03        		.byte	0x3
 3344 03db 0000 0000 		.long	task_tab
 3345 03df 22        		.byte	0x22
 3346 03e0 9F        		.byte	0x9f
 3347 03e1 00        		.byte	0
 3348               	.LVUS17:
 3349 03e2 02        		.uleb128 .LVU182
 3350 03e3 01        		.uleb128 .LVU194
 3351 03e4 00        		.uleb128 .LVU198
 3352 03e5 01        		.uleb128 .LVU199
 3353               	.LLST17:
 3354 03e6 04        		.byte	0x4
 3355 03e7 AE04      		.uleb128 .LVL46-.Ltext0
 3356 03e9 D004      		.uleb128 .LVL49-.Ltext0
 3357 03eb 06        		.uleb128 0x6
 3358 03ec 03        		.byte	0x3
 3359 03ed 0000 0000 		.long	ready
 3360 03f1 9F        		.byte	0x9f
 3361 03f2 04        		.byte	0x4
 3362 03f3 D804      		.uleb128 .LVL50-.Ltext0
 3363 03f5 D804      		.uleb128 .LVL50-.Ltext0
 3364 03f7 06        		.uleb128 0x6
 3365 03f8 03        		.byte	0x3
 3366 03f9 0000 0000 		.long	ready
 3367 03fd 9F        		.byte	0x9f
 3368 03fe 00        		.byte	0
 3369               	.LVUS18:
 3370 03ff 00        		.uleb128 .LVU185
 3371 0400 01        		.uleb128 .LVU194
 3372 0401 00        		.uleb128 .LVU198
 3373 0402 01        		.uleb128 .LVU199
 3374               	.LLST18:
 3375 0403 04        		.byte	0x4
 3376 0404 B404      		.uleb128 .LVL47-.Ltext0
 3377 0406 D004      		.uleb128 .LVL49-.Ltext0
 3378 0408 01        		.uleb128 0x1


 3379 0409 50        		.byte	0x50
 3380 040a 04        		.byte	0x4
 3381 040b D804      		.uleb128 .LVL50-.Ltext0
 3382 040d D804      		.uleb128 .LVL50-.Ltext0
 3383 040f 01        		.uleb128 0x1
 3384 0410 50        		.byte	0x50
 3385 0411 00        		.byte	0
 3386               	.LVUS19:
 3387 0412 01        		.uleb128 .LVU188
 3388 0413 00        		.uleb128 .LVU198
 3389               	.LLST19:
 3390 0414 04        		.byte	0x4
 3391 0415 B604      		.uleb128 .LVL48-.Ltext0
 3392 0417 D804      		.uleb128 .LVL50-.Ltext0
 3393 0419 0B        		.uleb128 0xb
 3394 041a 70        		.byte	0x70
 3395 041b 00        		.sleb128 0
 3396 041c 44        		.byte	0x44
 3397 041d 1E        		.byte	0x1e
 3398 041e 03        		.byte	0x3
 3399 041f 0000 0000 		.long	task_tab
 3400 0423 22        		.byte	0x22
 3401 0424 9F        		.byte	0x9f
 3402 0425 00        		.byte	0
 3403               	.Ldebug_loc3:
 3404               		.section	.debug_aranges,"",@progbits
 3405 0000 0000 001C 		.long	0x1c
 3406 0004 0002      		.word	0x2
 3407 0006 0000 0000 		.long	.Ldebug_info0
 3408 000a 04        		.byte	0x4
 3409 000b 00        		.byte	0
 3410 000c 0000      		.word	0
 3411 000e 0000      		.word	0
 3412 0010 0000 0000 		.long	.Ltext0
 3413 0014 0000 03DA 		.long	.Letext0-.Ltext0
 3414 0018 0000 0000 		.long	0
 3415 001c 0000 0000 		.long	0
 3416               		.section	.debug_rnglists,"",@progbits
 3417               	.Ldebug_ranges0:
 3418 0000 0000 004A 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 3419               	.Ldebug_ranges2:
 3420 0004 0005      		.word	0x5
 3421 0006 04        		.byte	0x4
 3422 0007 00        		.byte	0
 3423 0008 0000 0000 		.long	0
 3424               	.LLRL5:
 3425 000c 04        		.byte	0x4
 3426 000d D201      		.uleb128 .LBB24-.Ltext0
 3427 000f E401      		.uleb128 .LBE24-.Ltext0
 3428 0011 04        		.byte	0x4
 3429 0012 EA01      		.uleb128 .LBB28-.Ltext0
 3430 0014 AA02      		.uleb128 .LBE28-.Ltext0
 3431 0016 00        		.byte	0
 3432               	.LLRL16:
 3433 0017 04        		.byte	0x4
 3434 0018 AE04      		.uleb128 .LBB37-.Ltext0
 3435 001a D004      		.uleb128 .LBE37-.Ltext0


 3436 001c 04        		.byte	0x4
 3437 001d D804      		.uleb128 .LBB41-.Ltext0
 3438 001f D804      		.uleb128 .LBE41-.Ltext0
 3439 0021 00        		.byte	0
 3440               	.LLRL20:
 3441 0022 04        		.byte	0x4
 3442 0023 E204      		.uleb128 .LBB50-.Ltext0
 3443 0025 FC04      		.uleb128 .LBE50-.Ltext0
 3444 0027 04        		.byte	0x4
 3445 0028 AA05      		.uleb128 .LBB62-.Ltext0
 3446 002a F005      		.uleb128 .LBE62-.Ltext0
 3447 002c 00        		.byte	0
 3448               	.LLRL24:
 3449 002d 04        		.byte	0x4
 3450 002e FC04      		.uleb128 .LBB54-.Ltext0
 3451 0030 A205      		.uleb128 .LBE54-.Ltext0
 3452 0032 04        		.byte	0x4
 3453 0033 F005      		.uleb128 .LBB63-.Ltext0
 3454 0035 FA05      		.uleb128 .LBE63-.Ltext0
 3455 0037 00        		.byte	0
 3456               	.LLRL25:
 3457 0038 04        		.byte	0x4
 3458 0039 FC04      		.uleb128 .LBB56-.Ltext0
 3459 003b 9C05      		.uleb128 .LBE56-.Ltext0
 3460 003d 04        		.byte	0x4
 3461 003e F005      		.uleb128 .LBB60-.Ltext0
 3462 0040 F805      		.uleb128 .LBE60-.Ltext0
 3463 0042 00        		.byte	0
 3464               	.LLRL33:
 3465 0043 04        		.byte	0x4
 3466 0044 D406      		.uleb128 .LBB67-.Ltext0
 3467 0046 E206      		.uleb128 .LBE67-.Ltext0
 3468 0048 04        		.byte	0x4
 3469 0049 E606      		.uleb128 .LBB71-.Ltext0
 3470 004b AC07      		.uleb128 .LBE71-.Ltext0
 3471 004d 00        		.byte	0
 3472               	.Ldebug_ranges3:
 3473               		.section	.debug_line,"",@progbits
 3474               	.Ldebug_line0:
 3475 0000 0000 0577 		.section	.debug_str,"MS",@progbits,1
 3475      0003 0000 
 3475      0037 0201 
 3475      FB0E 0D00 
 3475      0101 0101 
 3476               	.LASF55:
 3477 0000 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/3-1_stream-assignment_compiled"
 3477      652F 7374 
 3477      7564 656E 
 3477      7473 2F35 
 3477      3233 3335 
 3478               	.LASF26:
 3479 0046 7374 6163 		.string	"stacks"
 3479      6B73 00
 3480               	.LASF19:
 3481 004d 6E65 7874 		.string	"next"
 3481      00
 3482               	.LASF47:


 3483 0052 696E 745F 		.string	"int_ssp"
 3483      7373 7000 
 3484               	.LASF54:
 3485 005a 6D74 6B5F 		.string	"mtk_c.c"
 3485      632E 6300 
 3486               	.LASF32:
 3487 0062 6669 7273 		.string	"first_task"
 3487      745F 7461 
 3487      736B 00
 3488               	.LASF11:
 3489 006d 636F 756E 		.string	"count"
 3489      7400 
 3490               	.LASF16:
 3491 0073 7374 6163 		.string	"stack_ptr"
 3491      6B5F 7074 
 3491      7200 
 3492               	.LASF34:
 3493 007d 7076 5F68 		.string	"pv_handler"
 3493      616E 646C 
 3493      6572 00
 3494               	.LASF20:
 3495 0088 5443 425F 		.string	"TCB_TYPE"
 3495      5459 5045 
 3495      00
 3496               	.LASF18:
 3497 0091 7374 6174 		.string	"status"
 3497      7573 00
 3498               	.LASF28:
 3499 0098 6E65 775F 		.string	"new_task"
 3499      7461 736B 
 3499      00
 3500               	.LASF46:
 3501 00a1 696E 6974 		.string	"init_stack"
 3501      5F73 7461 
 3501      636B 00
 3502               	.LASF27:
 3503 00ac 6375 7272 		.string	"curr_task"
 3503      5F74 6173 
 3503      6B00 
 3504               	.LASF48:
 3505 00b6 7368 6F72 		.string	"short_ssp"
 3505      745F 7373 
 3505      7000 
 3506               	.LASF58:
 3507 00c0 5F5F 6275 		.string	"__builtin_puts"
 3507      696C 7469 
 3507      6E5F 7075 
 3507      7473 00
 3508               	.LASF49:
 3509 00cf 7365 745F 		.string	"set_task"
 3509      7461 736B 
 3509      00
 3510               	.LASF1:
 3511 00d8 756E 7369 		.string	"unsigned char"
 3511      676E 6564 
 3511      2063 6861 
 3511      7200 


 3512               	.LASF14:
 3513 00e6 5345 4D41 		.string	"SEMAPHORE_TYPE"
 3513      5048 4F52 
 3513      455F 5459 
 3513      5045 00
 3514               	.LASF45:
 3515 00f5 7265 6D6F 		.string	"removeq"
 3515      7665 7100 
 3516               	.LASF5:
 3517 00fd 6C6F 6E67 		.string	"long unsigned int"
 3517      2075 6E73 
 3517      6967 6E65 
 3517      6420 696E 
 3517      7400 
 3518               	.LASF43:
 3519 010f 6164 6471 		.string	"addq"
 3519      00
 3520               	.LASF3:
 3521 0114 7368 6F72 		.string	"short unsigned int"
 3521      7420 756E 
 3521      7369 676E 
 3521      6564 2069 
 3521      6E74 00
 3522               	.LASF15:
 3523 0127 7461 736B 		.string	"task_addr"
 3523      5F61 6464 
 3523      7200 
 3524               	.LASF17:
 3525 0131 7072 696F 		.string	"priority"
 3525      7269 7479 
 3525      00
 3526               	.LASF21:
 3527 013a 7573 7461 		.string	"ustack"
 3527      636B 00
 3528               	.LASF24:
 3529 0141 7365 6D61 		.string	"semaphore"
 3529      7068 6F72 
 3529      6500 
 3530               	.LASF29:
 3531 014b 6E65 7874 		.string	"next_task"
 3531      5F74 6173 
 3531      6B00 
 3532               	.LASF2:
 3533 0155 7368 6F72 		.string	"short int"
 3533      7420 696E 
 3533      7400 
 3534               	.LASF31:
 3535 015f 7377 7463 		.string	"swtch"
 3535      6800 
 3536               	.LASF53:
 3537 0165 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 3537      4331 3720 
 3537      3131 2E34 
 3537      2E30 202D 
 3537      6D63 7075 
 3538               	.LASF9:
 3539 01a9 756E 7369 		.string	"unsigned int"


 3539      676E 6564 
 3539      2069 6E74 
 3539      00
 3540               	.LASF37:
 3541 01b6 765F 626F 		.string	"v_body"
 3541      6479 00
 3542               	.LASF30:
 3543 01bd 7265 6164 		.string	"ready"
 3543      7900 
 3544               	.LASF7:
 3545 01c3 6C6F 6E67 		.string	"long long unsigned int"
 3545      206C 6F6E 
 3545      6720 756E 
 3545      7369 676E 
 3545      6564 2069 
 3546               	.LASF13:
 3547 01da 5441 534B 		.string	"TASK_ID_TYPE"
 3547      5F49 445F 
 3547      5459 5045 
 3547      00
 3548               	.LASF12:
 3549 01e7 7461 736B 		.string	"task_list"
 3549      5F6C 6973 
 3549      7400 
 3550               	.LASF41:
 3551 01f1 725F 6964 		.string	"r_id"
 3551      00
 3552               	.LASF52:
 3553 01f6 696E 6974 		.string	"init_kernel"
 3553      5F6B 6572 
 3553      6E65 6C00 
 3554               	.LASF8:
 3555 0202 6C6F 6E67 		.string	"long double"
 3555      2064 6F75 
 3555      626C 6500 
 3556               	.LASF40:
 3557 020e 705F 626F 		.string	"p_body"
 3557      6479 00
 3558               	.LASF6:
 3559 0215 6C6F 6E67 		.string	"long long int"
 3559      206C 6F6E 
 3559      6720 696E 
 3559      7400 
 3560               	.LASF10:
 3561 0223 6368 6172 		.string	"char"
 3561      00
 3562               	.LASF42:
 3563 0228 7461 736B 		.string	"task_ptr"
 3563      5F70 7472 
 3563      00
 3564               	.LASF36:
 3565 0231 7761 6B65 		.string	"wakeup"
 3565      7570 00
 3566               	.LASF44:
 3567 0238 7175 655F 		.string	"que_ptr"
 3567      7074 7200 
 3568               	.LASF51:


 3569 0240 6265 6769 		.string	"begin_sch"
 3569      6E5F 7363 
 3569      6800 
 3570               	.LASF22:
 3571 024a 7373 7461 		.string	"sstack"
 3571      636B 00
 3572               	.LASF38:
 3573 0251 735F 6964 		.string	"s_id"
 3573      00
 3574               	.LASF4:
 3575 0256 6C6F 6E67 		.string	"long int"
 3575      2069 6E74 
 3575      00
 3576               	.LASF33:
 3577 025f 696E 6974 		.string	"init_timer"
 3577      5F74 696D 
 3577      6572 00
 3578               	.LASF57:
 3579 026a 7075 7473 		.string	"puts"
 3579      00
 3580               	.LASF35:
 3581 026f 7761 6B65 		.string	"wakeup_id"
 3581      7570 5F69 
 3581      6400 
 3582               	.LASF0:
 3583 0279 7369 676E 		.string	"signed char"
 3583      6564 2063 
 3583      6861 7200 
 3584               	.LASF23:
 3585 0285 5354 4143 		.string	"STACK_TYPE"
 3585      4B5F 5459 
 3585      5045 00
 3586               	.LASF39:
 3587 0290 736C 6565 		.string	"sleep"
 3587      7000 
 3588               	.LASF50:
 3589 0296 7573 6572 		.string	"usertask_ptr"
 3589      7461 736B 
 3589      5F70 7472 
 3589      00
 3590               	.LASF56:
 3591 02a3 7363 6865 		.string	"sched"
 3591      6400 
 3592               	.LASF25:
 3593 02a9 7461 736B 		.string	"task_tab"
 3593      5F74 6162 
 3593      00
 3594               		.ident	"GCC: (GNU) 11.4.0"




   1               	.include "equdefs.inc"
   1               	***************************************************************
   2               	**各種レジスタ定義
   3               	***************************************************************
   4               	***************
   5               	**レジスタ群の先頭
   6               	***************
   7               	.equ REGBASE,   0xFFF000          | DMAPを使用．
   8               	.equ IOBASE,    0x00d00000
   9               	***************
  10               	**割り込み関係のレジスタ
  11               	***************
  12               	.equ IVR,       REGBASE+0x300     |割り込みベクタレジスタ
  13               	.equ IMR,       REGBASE+0x304     |割り込みマスクレジスタ
  14               	.equ ISR,       REGBASE+0x30c     |割り込みステータスレジスタ
  15               	.equ IPR,       REGBASE+0x310     |割り込みペンディングレジスタ
  16               	***************
  17               	**タイマ関係のレジスタ
  18               	***************
  19               	.equ TCTL1,     REGBASE+0x600     |タイマ１コントロールレジスタ
  20               	.equ TPRER1,    REGBASE+0x602     |タイマ１プリスケーラレジスタ
  21               	.equ TCMP1,     REGBASE+0x604     |タイマ１コンペアレジスタ
  22               	.equ TCN1,      REGBASE+0x608     |タイマ１カウンタレジスタ
  23               	.equ TSTAT1,    REGBASE+0x60a     |タイマ１ステータスレジスタ
  24               	***************
  25               	** UART1（送受信）関係のレジスタ
  26               	***************
  27               	.equ USTCNT1,   REGBASE+0x900     | UART1ステータス/コントロールレジスタ
  28               	.equ UBAUD1,    REGBASE+0x902     | UART1ボーコントロールレジスタ
  29               	.equ URX1,      REGBASE+0x904     | UART1受信レジスタ
  30               	.equ UTX1,      REGBASE+0x906     | UART1送信レジスタ
  31               	***************
  32               	** LED
  33               	***************
  34               	.equ LED7,      IOBASE+0x000002f  |ボード搭載のLED用レジスタ
  35               	.equ LED6,      IOBASE+0x000002d  |使用法については付録A.4.3.1
  36               	.equ LED5,      IOBASE+0x000002b
  37               	.equ LED4,      IOBASE+0x0000029
  38               	.equ LED3,      IOBASE+0x000003f
  39               	.equ LED2,      IOBASE+0x000003d
  40               	.equ LED1,      IOBASE+0x000003b
  41               	.equ LED0,      IOBASE+0x0000039
  42               	
  43               	***************
  44               	**システムコール番号
  45               	***************
  46               	.equ SYSCALL_NUM_GETSTRING,     1
  47               	.equ SYSCALL_NUM_PUTSTRING,     2
  48               	.equ SYSCALL_NUM_RESET_TIMER,   3
  49               	.equ SYSCALL_NUM_SET_TIMER,     4
   2               	.global outbyte
   3               	
   4               	.text
   5               	.even
   6               	
   7               	outbyte:
   8 0000 48E7 7040 		movem.l %d1-%d3/%a1, -(%SP)	/* STORE REGISTERS */


   9               	outbyte_loop:
  10               		/* OBTAIN ARGUMENTS TO DISPLAY */
  11               		/* By the stack storing above, */
  12               		/*     the values of 4 registers and PC re are stored */
  13               		/*     which means that, the value of stack pointer is decreased */
  14               		/* To execute GETSTRING, calculate the address where the actual data to display is stored */
  15               	
  16               		/* Add 3 bytes because the argument is stored begin sign-extended 4 bytes from 1 byte */
  17               		/* 23 [bytes] = 5 [registers] * 4 [bytes/register] + 3 [byte] */
  18               	
  19 0004 224F      		movea.l	%sp,   %a1			/* copy head address of stack pointer */
  20 0006 7417      		move.l	#23,   %d2			/* calculate the necessary address number to obtain the argument */
  21 0008 D3C2      		adda.l	%d2,   %a1			/* by summing, go to the target to display */
  22               	
  23 000a 13D1 0000 		move.b	(%a1), obDATA		/* copy data to obDATA */
  23      0000 
  24 0010 13F9 0000 		move.b obDATA, LED6
  24      0000 00D0 
  24      002D 
  25               	
  26 001a 7401      		move.l  #1,    %d2			/* go to the address of the argument */
  27 001c D3C2      		adda.l  %d2,   %a1			/* because the arg is 4 bytes long and stored just next to the obDATA */
  28               	
  29               		/* SYSCALL: PUTSTRING */
  30 001e 7002      		move.l #SYSCALL_NUM_PUTSTRING, %D0
  31 0020 2211      		move.l (%a1),  %D1         	| ch = fd
  32 0022 243C 0000 		move.l #obDATA, %D2       	| p  = #obDATA
  32      0000 
  33 0028 7601      		move.l #1, %D3          	| size = 1
  34 002a 4E40      		trap #0
  35               	
  36               		/* FLAG CHECK */
  37 002c 0C80 0000 		cmp.l #0, %d0				/* see if PUTSTRING is successful */
  37      0000 
  38 0032 6700 FFD0 		beq outbyte_loop			/* if false, retry */
  39               	
  40               		/* SUCCESS */
  41 0036 4CDF 020E 		movem.l (%SP)+, %d1-%d3/%a1 /* RESTORE REGISTERS */
  42 003a 4E75      		rts
  43               	        
  44               	.section .bss
  45               	.even
  46               	
  47               	.global obDATA
  48               	obDATA:
  49 0000 00        		.ds.b 1
  50 0001 00        		.even




   1               	#NO_APP
   2               		.file	"test3.c"
   3               		.text
   4               	.Ltext0:
   5               		.cfi_sections	.debug_frame
   6               		.align	2
   7               		.globl	fcntl
   8               		.type	fcntl, @function
   9               	fcntl:
  10               	.LVL0:
  11               	.LFB3:
  12               		.file 1 "test3.c"
   1:test3.c       **** #include <stdio.h>
   2:test3.c       **** #include "mtk_c.h"
   3:test3.c       **** #include <fcntl.h>
   4:test3.c       **** #include <stdarg.h>
   5:test3.c       **** #include <errno.h>
   6:test3.c       **** 
   7:test3.c       **** extern SEMAPHORE_TYPE semaphore[NUMSEMAPHORE];
   8:test3.c       **** 
   9:test3.c       **** FILE* com0in; 
  10:test3.c       **** FILE* com0out;
  11:test3.c       **** FILE* com1in;
  12:test3.c       **** FILE* com1out;
  13:test3.c       **** 
  14:test3.c       **** int fcntl(int fd, int cmd, ...){
  13               		.loc 1 14 32 view -0
  14               		.cfi_startproc
  15:test3.c       **** 	return cmd == F_GETFL ? O_RDWR : 0;
  15               		.loc 1 15 2 view .LVU1
  16               		.loc 1 15 33 is_stmt 0 view .LVU2
  17 0000 7203      		moveq #3,%d1
  18 0002 B2AF 0008 		cmp.l 8(%sp),%d1
  19 0006 57C0      		seq %d0
  20 0008 4880      		ext.w %d0
  21 000a 48C0      		ext.l %d0
  22 000c 4480      		neg.l %d0
  16:test3.c       **** }
  23               		.loc 1 16 1 view .LVU3
  24 000e D080      		add.l %d0,%d0
  25 0010 4E75      		rts
  26               		.cfi_endproc
  27               	.LFE3:
  28               		.size	fcntl, .-fcntl
  29               		.align	2
  30               		.globl	task1
  31               		.type	task1, @function
  32               	task1:
  33               	.LFB4:
  17:test3.c       **** 
  18:test3.c       **** void task1(){
  34               		.loc 1 18 13 is_stmt 1 view -0
  35               		.cfi_startproc
  36               	.L4:
  19:test3.c       ****     while(1){
  37               		.loc 1 19 5 discriminator 1 view .LVU5
  20:test3.c       **** 


  21:test3.c       ****     }
  38               		.loc 1 21 5 discriminator 1 view .LVU6
  19:test3.c       ****     while(1){
  39               		.loc 1 19 10 discriminator 1 view .LVU7
  40 0012 60FE      		jra .L4
  41               		.cfi_endproc
  42               	.LFE4:
  43               		.size	task1, .-task1
  44               		.align	2
  45               		.globl	task2
  46               		.type	task2, @function
  47               	task2:
  48               	.LFB5:
  22:test3.c       **** }
  23:test3.c       **** 
  24:test3.c       **** void task2(){
  49               		.loc 1 24 13 view -0
  50               		.cfi_startproc
  51               	.L7:
  25:test3.c       ****     while(1){
  52               		.loc 1 25 5 discriminator 1 view .LVU9
  26:test3.c       **** 
  27:test3.c       ****     }
  53               		.loc 1 27 5 discriminator 1 view .LVU10
  25:test3.c       ****     while(1){
  54               		.loc 1 25 10 discriminator 1 view .LVU11
  55 0014 60FE      		jra .L7
  56               		.cfi_endproc
  57               	.LFE5:
  58               		.size	task2, .-task2
  59               		.section	.rodata.str1.1,"aMS",@progbits,1
  60               	.LC0:
  61 0000 7200      		.string	"r"
  62               	.LC1:
  63 0002 7700      		.string	"w"
  64               	.LC2:
  65 0004 2563 00   		.string	"%c"
  66               		.section	.text.startup,"ax",@progbits
  67               		.align	2
  68               		.globl	main
  69               		.type	main, @function
  70               	main:
  71               	.LFB6:
  28:test3.c       **** }
  29:test3.c       **** 
  30:test3.c       **** int main(void){
  72               		.loc 1 30 15 view -0
  73               		.cfi_startproc
  74 0000 598F      		subq.l #4,%sp
  75               		.cfi_def_cfa_offset 8
  76 0002 48E7 2030 		movem.l #8240,-(%sp)
  77               		.cfi_def_cfa_offset 20
  78               		.cfi_offset 2, -20
  79               		.cfi_offset 10, -16
  80               		.cfi_offset 11, -12
  31:test3.c       ****     char key_in;
  81               		.loc 1 31 5 view .LVU13


  32:test3.c       ****     com0in	= fdopen(3, "r");
  82               		.loc 1 32 5 view .LVU14
  83               		.loc 1 32 14 is_stmt 0 view .LVU15
  84 0006 4879 0000 		pea .LC0
  84      0000 
  85               		.cfi_def_cfa_offset 24
  86 000c 4878 0003 		pea 3.w
  87               		.cfi_def_cfa_offset 28
  88 0010 45F9 0000 		lea fdopen,%a2
  88      0000 
  89 0016 4E92      		jsr (%a2)
  90               	.LVL1:
  91               		.loc 1 32 12 view .LVU16
  92 0018 23C0 0000 		move.l %d0,com0in
  92      0000 
  33:test3.c       ****     com0out = fdopen(3, "w");
  93               		.loc 1 33 5 is_stmt 1 view .LVU17
  94               		.loc 1 33 15 is_stmt 0 view .LVU18
  95 001e 4879 0000 		pea .LC1
  95      0000 
  96               		.cfi_def_cfa_offset 32
  97 0024 4878 0003 		pea 3.w
  98               		.cfi_def_cfa_offset 36
  99 0028 4E92      		jsr (%a2)
 100               	.LVL2:
 101               		.loc 1 33 13 view .LVU19
 102 002a 23C0 0000 		move.l %d0,com0out
 102      0000 
  34:test3.c       ****     com1in	= fdopen(4, "r");
 103               		.loc 1 34 5 is_stmt 1 view .LVU20
 104               		.loc 1 34 14 is_stmt 0 view .LVU21
 105 0030 4879 0000 		pea .LC0
 105      0000 
 106               		.cfi_def_cfa_offset 40
 107 0036 4878 0004 		pea 4.w
 108               		.cfi_def_cfa_offset 44
 109 003a 4E92      		jsr (%a2)
 110               	.LVL3:
 111               		.loc 1 34 12 view .LVU22
 112 003c 23C0 0000 		move.l %d0,com1in
 112      0000 
  35:test3.c       ****     com1out = fdopen(4, "w");
 113               		.loc 1 35 5 is_stmt 1 view .LVU23
 114               		.loc 1 35 15 is_stmt 0 view .LVU24
 115 0042 4879 0000 		pea .LC1
 115      0000 
 116               		.cfi_def_cfa_offset 48
 117 0048 4878 0004 		pea 4.w
 118               		.cfi_def_cfa_offset 52
 119 004c 4E92      		jsr (%a2)
 120               	.LVL4:
 121               		.loc 1 35 13 view .LVU25
 122 004e 23C0 0000 		move.l %d0,com1out
 122      0000 
 123 0054 4FEF 0020 		lea (32,%sp),%sp
 124               		.cfi_def_cfa_offset 20
 125 0058 740F      		moveq #15,%d2


 126 005a D48F      		add.l %sp,%d2
 127 005c 47F9 0000 		lea fscanf,%a3
 127      0000 
 128 0062 45F9 0000 		lea fputc,%a2
 128      0000 
 129               	.L10:
  36:test3.c       ****     
  37:test3.c       ****     while(1){
 130               		.loc 1 37 5 is_stmt 1 discriminator 1 view .LVU26
  38:test3.c       ****         fscanf(com0in, "%c", &key_in);
 131               		.loc 1 38 9 discriminator 1 view .LVU27
 132 0068 2F02      		move.l %d2,-(%sp)
 133               		.cfi_def_cfa_offset 24
 134 006a 4879 0000 		pea .LC2
 134      0000 
 135               		.cfi_def_cfa_offset 28
 136 0070 2F39 0000 		move.l com0in,-(%sp)
 136      0000 
 137               		.cfi_def_cfa_offset 32
 138 0076 4E93      		jsr (%a3)
 139               	.LVL5:
  39:test3.c       ****         fprintf(com1out, "%c", key_in);
 140               		.loc 1 39 9 discriminator 1 view .LVU28
 141 0078 2F39 0000 		move.l com1out,-(%sp)
 141      0000 
 142               		.cfi_def_cfa_offset 36
 143 007e 102F 001F 		move.b 31(%sp),%d0
 144 0082 4880      		ext.w %d0
 145 0084 3040      		move.w %d0,%a0
 146 0086 2F08      		move.l %a0,-(%sp)
 147               		.cfi_def_cfa_offset 40
 148 0088 4E92      		jsr (%a2)
 149               	.LVL6:
  37:test3.c       ****         fscanf(com0in, "%c", &key_in);
 150               		.loc 1 37 10 discriminator 1 view .LVU29
 151               		.loc 1 39 9 is_stmt 0 discriminator 1 view .LVU30
 152 008a 4FEF 0014 		lea (20,%sp),%sp
 153               		.cfi_def_cfa_offset 20
  37:test3.c       ****         fscanf(com0in, "%c", &key_in);
 154               		.loc 1 37 5 is_stmt 1 discriminator 1 view .LVU31
  38:test3.c       ****         fscanf(com0in, "%c", &key_in);
 155               		.loc 1 38 9 discriminator 1 view .LVU32
 156 008e 2F02      		move.l %d2,-(%sp)
 157               		.cfi_def_cfa_offset 24
 158 0090 4879 0000 		pea .LC2
 158      0000 
 159               		.cfi_def_cfa_offset 28
 160 0096 2F39 0000 		move.l com0in,-(%sp)
 160      0000 
 161               		.cfi_def_cfa_offset 32
 162 009c 4E93      		jsr (%a3)
 163               	.LVL7:
 164               		.loc 1 39 9 discriminator 1 view .LVU33
 165 009e 2F39 0000 		move.l com1out,-(%sp)
 165      0000 
 166               		.cfi_def_cfa_offset 36
 167 00a4 102F 001F 		move.b 31(%sp),%d0


 168 00a8 4880      		ext.w %d0
 169 00aa 3040      		move.w %d0,%a0
 170 00ac 2F08      		move.l %a0,-(%sp)
 171               		.cfi_def_cfa_offset 40
 172 00ae 4E92      		jsr (%a2)
 173               	.LVL8:
  37:test3.c       ****         fscanf(com0in, "%c", &key_in);
 174               		.loc 1 37 10 discriminator 1 view .LVU34
 175               		.loc 1 39 9 is_stmt 0 discriminator 1 view .LVU35
 176 00b0 4FEF 0014 		lea (20,%sp),%sp
 177               		.cfi_def_cfa_offset 20
 178 00b4 60B2      		jra .L10
 179               		.cfi_endproc
 180               	.LFE6:
 181               		.size	main, .-main
 182               		.globl	com1out
 183               		.section	.bss
 184               		.align	2
 185               		.type	com1out, @object
 186               		.size	com1out, 4
 187               	com1out:
 188 0000 0000 0000 		.zero	4
 189               		.globl	com1in
 190               		.align	2
 191               		.type	com1in, @object
 192               		.size	com1in, 4
 193               	com1in:
 194 0004 0000 0000 		.zero	4
 195               		.globl	com0out
 196               		.align	2
 197               		.type	com0out, @object
 198               		.size	com0out, 4
 199               	com0out:
 200 0008 0000 0000 		.zero	4
 201               		.globl	com0in
 202               		.align	2
 203               		.type	com0in, @object
 204               		.size	com0in, 4
 205               	com0in:
 206 000c 0000 0000 		.zero	4
 207               		.text
 208               	.Letext0:
 209               		.file 2 "/usr/local/lib/gcc/m68k-elf/11.4.0/include/stddef.h"
 210               		.file 3 "/usr/local/m68k-elf/include/sys/_types.h"
 211               		.file 4 "/usr/local/m68k-elf/include/sys/reent.h"
 212               		.file 5 "/usr/local/m68k-elf/include/sys/lock.h"
 213               		.file 6 "/usr/local/m68k-elf/include/stdio.h"
 214               		.file 7 "/usr/local/m68k-elf/include/sys/_default_fcntl.h"
 215               		.file 8 "<built-in>"
 216               		.section	.debug_info,"",@progbits
 217               	.Ldebug_info0:
 218 0000 0000 085B 		.long	0x85b
 219 0004 0005      		.word	0x5
 220 0006 01        		.byte	0x1
 221 0007 04        		.byte	0x4
 222 0008 0000 0000 		.long	.Ldebug_abbrev0
 223 000c 17        		.uleb128 0x17


 224 000d 0000 0000 		.long	.LASF112
 225 0011 1D        		.byte	0x1d
 226 0012 0000 0000 		.long	.LASF113
 227 0016 0000 0000 		.long	.LASF114
 228 001a 0000 0000 		.long	.LLRL0
 229 001e 0000 0000 		.long	0
 230 0022 0000 0000 		.long	.Ldebug_line0
 231 0026 05        		.uleb128 0x5
 232 0027 01        		.byte	0x1
 233 0028 06        		.byte	0x6
 234 0029 0000 0000 		.long	.LASF0
 235 002d 05        		.uleb128 0x5
 236 002e 01        		.byte	0x1
 237 002f 08        		.byte	0x8
 238 0030 0000 0000 		.long	.LASF1
 239 0034 05        		.uleb128 0x5
 240 0035 02        		.byte	0x2
 241 0036 05        		.byte	0x5
 242 0037 0000 0000 		.long	.LASF2
 243 003b 05        		.uleb128 0x5
 244 003c 02        		.byte	0x2
 245 003d 07        		.byte	0x7
 246 003e 0000 0000 		.long	.LASF3
 247 0042 05        		.uleb128 0x5
 248 0043 04        		.byte	0x4
 249 0044 05        		.byte	0x5
 250 0045 0000 0000 		.long	.LASF4
 251 0049 05        		.uleb128 0x5
 252 004a 04        		.byte	0x4
 253 004b 07        		.byte	0x7
 254 004c 0000 0000 		.long	.LASF5
 255 0050 05        		.uleb128 0x5
 256 0051 08        		.byte	0x8
 257 0052 05        		.byte	0x5
 258 0053 0000 0000 		.long	.LASF6
 259 0057 05        		.uleb128 0x5
 260 0058 08        		.byte	0x8
 261 0059 07        		.byte	0x7
 262 005a 0000 0000 		.long	.LASF7
 263 005e 05        		.uleb128 0x5
 264 005f 0C        		.byte	0xc
 265 0060 04        		.byte	0x4
 266 0061 0000 0000 		.long	.LASF8
 267 0065 0E        		.uleb128 0xe
 268 0066 0000 0000 		.long	.LASF10
 269 006a 02        		.byte	0x2
 270 006b 015E      		.word	0x15e
 271 006d 17        		.byte	0x17
 272 006e 0000 0072 		.long	0x72
 273 0072 05        		.uleb128 0x5
 274 0073 04        		.byte	0x4
 275 0074 07        		.byte	0x7
 276 0075 0000 0000 		.long	.LASF9
 277 0079 09        		.uleb128 0x9
 278 007a 0000 0000 		.long	.LASF11
 279 007e 03        		.byte	0x3
 280 007f 2E        		.byte	0x2e


 281 0080 0E        		.byte	0xe
 282 0081 0000 0042 		.long	0x42
 283 0085 18        		.uleb128 0x18
 284 0086 04        		.byte	0x4
 285 0087 05        		.byte	0x5
 286 0088 696E 7400 		.string	"int"
 287 008c 09        		.uleb128 0x9
 288 008d 0000 0000 		.long	.LASF12
 289 0091 03        		.byte	0x3
 290 0092 74        		.byte	0x74
 291 0093 0E        		.byte	0xe
 292 0094 0000 0042 		.long	0x42
 293 0098 09        		.uleb128 0x9
 294 0099 0000 0000 		.long	.LASF13
 295 009d 03        		.byte	0x3
 296 009e 93        		.byte	0x93
 297 009f 17        		.byte	0x17
 298 00a0 0000 0042 		.long	0x42
 299 00a4 19        		.uleb128 0x19
 300 00a5 04        		.byte	0x4
 301 00a6 03        		.byte	0x3
 302 00a7 A5        		.byte	0xa5
 303 00a8 03        		.byte	0x3
 304 00a9 0000 00C4 		.long	0xc4
 305 00ad 0F        		.uleb128 0xf
 306 00ae 0000 0000 		.long	.LASF14
 307 00b2 A7        		.byte	0xa7
 308 00b3 0C        		.byte	0xc
 309 00b4 0000 0065 		.long	0x65
 310 00b8 0F        		.uleb128 0xf
 311 00b9 0000 0000 		.long	.LASF15
 312 00bd A8        		.byte	0xa8
 313 00be 13        		.byte	0x13
 314 00bf 0000 00C4 		.long	0xc4
 315 00c3 00        		.byte	0
 316 00c4 07        		.uleb128 0x7
 317 00c5 0000 002D 		.long	0x2d
 318 00c9 0000 00D4 		.long	0xd4
 319 00cd 08        		.uleb128 0x8
 320 00ce 0000 0049 		.long	0x49
 321 00d2 03        		.byte	0x3
 322 00d3 00        		.byte	0
 323 00d4 1A        		.uleb128 0x1a
 324 00d5 08        		.byte	0x8
 325 00d6 03        		.byte	0x3
 326 00d7 A2        		.byte	0xa2
 327 00d8 09        		.byte	0x9
 328 00d9 0000 00F8 		.long	0xf8
 329 00dd 02        		.uleb128 0x2
 330 00de 0000 0000 		.long	.LASF16
 331 00e2 03        		.byte	0x3
 332 00e3 A4        		.byte	0xa4
 333 00e4 07        		.byte	0x7
 334 00e5 0000 0085 		.long	0x85
 335 00e9 00        		.byte	0
 336 00ea 02        		.uleb128 0x2
 337 00eb 0000 0000 		.long	.LASF17


 338 00ef 03        		.byte	0x3
 339 00f0 A9        		.byte	0xa9
 340 00f1 05        		.byte	0x5
 341 00f2 0000 00A4 		.long	0xa4
 342 00f6 04        		.byte	0x4
 343 00f7 00        		.byte	0
 344 00f8 09        		.uleb128 0x9
 345 00f9 0000 0000 		.long	.LASF18
 346 00fd 03        		.byte	0x3
 347 00fe AA        		.byte	0xaa
 348 00ff 03        		.byte	0x3
 349 0100 0000 00D4 		.long	0xd4
 350 0104 1B        		.uleb128 0x1b
 351 0105 04        		.byte	0x4
 352 0106 09        		.uleb128 0x9
 353 0107 0000 0000 		.long	.LASF19
 354 010b 04        		.byte	0x4
 355 010c 16        		.byte	0x16
 356 010d 19        		.byte	0x19
 357 010e 0000 0049 		.long	0x49
 358 0112 09        		.uleb128 0x9
 359 0113 0000 0000 		.long	.LASF20
 360 0117 05        		.byte	0x5
 361 0118 0C        		.byte	0xc
 362 0119 0D        		.byte	0xd
 363 011a 0000 0085 		.long	0x85
 364 011e 09        		.uleb128 0x9
 365 011f 0000 0000 		.long	.LASF21
 366 0123 04        		.byte	0x4
 367 0124 23        		.byte	0x23
 368 0125 1B        		.byte	0x1b
 369 0126 0000 0112 		.long	0x112
 370 012a 0B        		.uleb128 0xb
 371 012b 0000 0000 		.long	.LASF26
 372 012f 18        		.byte	0x18
 373 0130 34        		.byte	0x34
 374 0131 0000 0180 		.long	0x180
 375 0135 02        		.uleb128 0x2
 376 0136 0000 0000 		.long	.LASF22
 377 013a 04        		.byte	0x4
 378 013b 36        		.byte	0x36
 379 013c 13        		.byte	0x13
 380 013d 0000 0180 		.long	0x180
 381 0141 00        		.byte	0
 382 0142 06        		.uleb128 0x6
 383 0143 5F6B 00   		.string	"_k"
 384 0146 37        		.byte	0x37
 385 0147 07        		.byte	0x7
 386 0148 0000 0085 		.long	0x85
 387 014c 04        		.byte	0x4
 388 014d 02        		.uleb128 0x2
 389 014e 0000 0000 		.long	.LASF23
 390 0152 04        		.byte	0x4
 391 0153 37        		.byte	0x37
 392 0154 0B        		.byte	0xb
 393 0155 0000 0085 		.long	0x85
 394 0159 08        		.byte	0x8


 395 015a 02        		.uleb128 0x2
 396 015b 0000 0000 		.long	.LASF24
 397 015f 04        		.byte	0x4
 398 0160 37        		.byte	0x37
 399 0161 14        		.byte	0x14
 400 0162 0000 0085 		.long	0x85
 401 0166 0C        		.byte	0xc
 402 0167 02        		.uleb128 0x2
 403 0168 0000 0000 		.long	.LASF25
 404 016c 04        		.byte	0x4
 405 016d 37        		.byte	0x37
 406 016e 1B        		.byte	0x1b
 407 016f 0000 0085 		.long	0x85
 408 0173 10        		.byte	0x10
 409 0174 06        		.uleb128 0x6
 410 0175 5F78 00   		.string	"_x"
 411 0178 38        		.byte	0x38
 412 0179 0B        		.byte	0xb
 413 017a 0000 0185 		.long	0x185
 414 017e 14        		.byte	0x14
 415 017f 00        		.byte	0
 416 0180 04        		.uleb128 0x4
 417 0181 0000 012A 		.long	0x12a
 418 0185 07        		.uleb128 0x7
 419 0186 0000 0106 		.long	0x106
 420 018a 0000 0195 		.long	0x195
 421 018e 08        		.uleb128 0x8
 422 018f 0000 0049 		.long	0x49
 423 0193 00        		.byte	0
 424 0194 00        		.byte	0
 425 0195 0B        		.uleb128 0xb
 426 0196 0000 0000 		.long	.LASF27
 427 019a 24        		.byte	0x24
 428 019b 3C        		.byte	0x3c
 429 019c 0000 0216 		.long	0x216
 430 01a0 02        		.uleb128 0x2
 431 01a1 0000 0000 		.long	.LASF28
 432 01a5 04        		.byte	0x4
 433 01a6 3E        		.byte	0x3e
 434 01a7 09        		.byte	0x9
 435 01a8 0000 0085 		.long	0x85
 436 01ac 00        		.byte	0
 437 01ad 02        		.uleb128 0x2
 438 01ae 0000 0000 		.long	.LASF29
 439 01b2 04        		.byte	0x4
 440 01b3 3F        		.byte	0x3f
 441 01b4 09        		.byte	0x9
 442 01b5 0000 0085 		.long	0x85
 443 01b9 04        		.byte	0x4
 444 01ba 02        		.uleb128 0x2
 445 01bb 0000 0000 		.long	.LASF30
 446 01bf 04        		.byte	0x4
 447 01c0 40        		.byte	0x40
 448 01c1 09        		.byte	0x9
 449 01c2 0000 0085 		.long	0x85
 450 01c6 08        		.byte	0x8
 451 01c7 02        		.uleb128 0x2


 452 01c8 0000 0000 		.long	.LASF31
 453 01cc 04        		.byte	0x4
 454 01cd 41        		.byte	0x41
 455 01ce 09        		.byte	0x9
 456 01cf 0000 0085 		.long	0x85
 457 01d3 0C        		.byte	0xc
 458 01d4 02        		.uleb128 0x2
 459 01d5 0000 0000 		.long	.LASF32
 460 01d9 04        		.byte	0x4
 461 01da 42        		.byte	0x42
 462 01db 09        		.byte	0x9
 463 01dc 0000 0085 		.long	0x85
 464 01e0 10        		.byte	0x10
 465 01e1 02        		.uleb128 0x2
 466 01e2 0000 0000 		.long	.LASF33
 467 01e6 04        		.byte	0x4
 468 01e7 43        		.byte	0x43
 469 01e8 09        		.byte	0x9
 470 01e9 0000 0085 		.long	0x85
 471 01ed 14        		.byte	0x14
 472 01ee 02        		.uleb128 0x2
 473 01ef 0000 0000 		.long	.LASF34
 474 01f3 04        		.byte	0x4
 475 01f4 44        		.byte	0x44
 476 01f5 09        		.byte	0x9
 477 01f6 0000 0085 		.long	0x85
 478 01fa 18        		.byte	0x18
 479 01fb 02        		.uleb128 0x2
 480 01fc 0000 0000 		.long	.LASF35
 481 0200 04        		.byte	0x4
 482 0201 45        		.byte	0x45
 483 0202 09        		.byte	0x9
 484 0203 0000 0085 		.long	0x85
 485 0207 1C        		.byte	0x1c
 486 0208 02        		.uleb128 0x2
 487 0209 0000 0000 		.long	.LASF36
 488 020d 04        		.byte	0x4
 489 020e 46        		.byte	0x46
 490 020f 09        		.byte	0x9
 491 0210 0000 0085 		.long	0x85
 492 0214 20        		.byte	0x20
 493 0215 00        		.byte	0
 494 0216 0B        		.uleb128 0xb
 495 0217 0000 0000 		.long	.LASF37
 496 021b 08        		.byte	0x8
 497 021c 73        		.byte	0x73
 498 021d 0000 023C 		.long	0x23c
 499 0221 02        		.uleb128 0x2
 500 0222 0000 0000 		.long	.LASF38
 501 0226 04        		.byte	0x4
 502 0227 74        		.byte	0x74
 503 0228 11        		.byte	0x11
 504 0229 0000 023C 		.long	0x23c
 505 022d 00        		.byte	0
 506 022e 02        		.uleb128 0x2
 507 022f 0000 0000 		.long	.LASF39
 508 0233 04        		.byte	0x4


 509 0234 75        		.byte	0x75
 510 0235 06        		.byte	0x6
 511 0236 0000 0085 		.long	0x85
 512 023a 04        		.byte	0x4
 513 023b 00        		.byte	0
 514 023c 04        		.uleb128 0x4
 515 023d 0000 002D 		.long	0x2d
 516 0241 0B        		.uleb128 0xb
 517 0242 0000 0000 		.long	.LASF40
 518 0246 68        		.byte	0x68
 519 0247 98        		.byte	0x98
 520 0248 0000 037A 		.long	0x37a
 521 024c 06        		.uleb128 0x6
 522 024d 5F70 00   		.string	"_p"
 523 0250 99        		.byte	0x99
 524 0251 12        		.byte	0x12
 525 0252 0000 023C 		.long	0x23c
 526 0256 00        		.byte	0
 527 0257 06        		.uleb128 0x6
 528 0258 5F72 00   		.string	"_r"
 529 025b 9A        		.byte	0x9a
 530 025c 07        		.byte	0x7
 531 025d 0000 0085 		.long	0x85
 532 0261 04        		.byte	0x4
 533 0262 06        		.uleb128 0x6
 534 0263 5F77 00   		.string	"_w"
 535 0266 9B        		.byte	0x9b
 536 0267 07        		.byte	0x7
 537 0268 0000 0085 		.long	0x85
 538 026c 08        		.byte	0x8
 539 026d 02        		.uleb128 0x2
 540 026e 0000 0000 		.long	.LASF41
 541 0272 04        		.byte	0x4
 542 0273 9C        		.byte	0x9c
 543 0274 09        		.byte	0x9
 544 0275 0000 0034 		.long	0x34
 545 0279 0C        		.byte	0xc
 546 027a 02        		.uleb128 0x2
 547 027b 0000 0000 		.long	.LASF42
 548 027f 04        		.byte	0x4
 549 0280 9D        		.byte	0x9d
 550 0281 09        		.byte	0x9
 551 0282 0000 0034 		.long	0x34
 552 0286 0E        		.byte	0xe
 553 0287 06        		.uleb128 0x6
 554 0288 5F62 6600 		.string	"_bf"
 555 028c 9E        		.byte	0x9e
 556 028d 11        		.byte	0x11
 557 028e 0000 0216 		.long	0x216
 558 0292 10        		.byte	0x10
 559 0293 02        		.uleb128 0x2
 560 0294 0000 0000 		.long	.LASF43
 561 0298 04        		.byte	0x4
 562 0299 9F        		.byte	0x9f
 563 029a 07        		.byte	0x7
 564 029b 0000 0085 		.long	0x85
 565 029f 18        		.byte	0x18


 566 02a0 02        		.uleb128 0x2
 567 02a1 0000 0000 		.long	.LASF44
 568 02a5 04        		.byte	0x4
 569 02a6 A6        		.byte	0xa6
 570 02a7 0A        		.byte	0xa
 571 02a8 0000 0104 		.long	0x104
 572 02ac 1C        		.byte	0x1c
 573 02ad 02        		.uleb128 0x2
 574 02ae 0000 0000 		.long	.LASF45
 575 02b2 04        		.byte	0x4
 576 02b3 A8        		.byte	0xa8
 577 02b4 1D        		.byte	0x1d
 578 02b5 0000 0490 		.long	0x490
 579 02b9 20        		.byte	0x20
 580 02ba 02        		.uleb128 0x2
 581 02bb 0000 0000 		.long	.LASF46
 582 02bf 04        		.byte	0x4
 583 02c0 AA        		.byte	0xaa
 584 02c1 1D        		.byte	0x1d
 585 02c2 0000 04BD 		.long	0x4bd
 586 02c6 24        		.byte	0x24
 587 02c7 02        		.uleb128 0x2
 588 02c8 0000 0000 		.long	.LASF47
 589 02cc 04        		.byte	0x4
 590 02cd AD        		.byte	0xad
 591 02ce 0D        		.byte	0xd
 592 02cf 0000 04E0 		.long	0x4e0
 593 02d3 28        		.byte	0x28
 594 02d4 02        		.uleb128 0x2
 595 02d5 0000 0000 		.long	.LASF48
 596 02d9 04        		.byte	0x4
 597 02da AE        		.byte	0xae
 598 02db 09        		.byte	0x9
 599 02dc 0000 04F9 		.long	0x4f9
 600 02e0 2C        		.byte	0x2c
 601 02e1 06        		.uleb128 0x6
 602 02e2 5F75 6200 		.string	"_ub"
 603 02e6 B1        		.byte	0xb1
 604 02e7 11        		.byte	0x11
 605 02e8 0000 0216 		.long	0x216
 606 02ec 30        		.byte	0x30
 607 02ed 06        		.uleb128 0x6
 608 02ee 5F75 7000 		.string	"_up"
 609 02f2 B2        		.byte	0xb2
 610 02f3 12        		.byte	0x12
 611 02f4 0000 023C 		.long	0x23c
 612 02f8 38        		.byte	0x38
 613 02f9 06        		.uleb128 0x6
 614 02fa 5F75 7200 		.string	"_ur"
 615 02fe B3        		.byte	0xb3
 616 02ff 07        		.byte	0x7
 617 0300 0000 0085 		.long	0x85
 618 0304 3C        		.byte	0x3c
 619 0305 02        		.uleb128 0x2
 620 0306 0000 0000 		.long	.LASF49
 621 030a 04        		.byte	0x4
 622 030b B6        		.byte	0xb6


 623 030c 11        		.byte	0x11
 624 030d 0000 04FE 		.long	0x4fe
 625 0311 40        		.byte	0x40
 626 0312 02        		.uleb128 0x2
 627 0313 0000 0000 		.long	.LASF50
 628 0317 04        		.byte	0x4
 629 0318 B7        		.byte	0xb7
 630 0319 11        		.byte	0x11
 631 031a 0000 050E 		.long	0x50e
 632 031e 43        		.byte	0x43
 633 031f 06        		.uleb128 0x6
 634 0320 5F6C 6200 		.string	"_lb"
 635 0324 BA        		.byte	0xba
 636 0325 11        		.byte	0x11
 637 0326 0000 0216 		.long	0x216
 638 032a 44        		.byte	0x44
 639 032b 02        		.uleb128 0x2
 640 032c 0000 0000 		.long	.LASF51
 641 0330 04        		.byte	0x4
 642 0331 BD        		.byte	0xbd
 643 0332 07        		.byte	0x7
 644 0333 0000 0085 		.long	0x85
 645 0337 4C        		.byte	0x4c
 646 0338 02        		.uleb128 0x2
 647 0339 0000 0000 		.long	.LASF52
 648 033d 04        		.byte	0x4
 649 033e BE        		.byte	0xbe
 650 033f 0A        		.byte	0xa
 651 0340 0000 0079 		.long	0x79
 652 0344 50        		.byte	0x50
 653 0345 02        		.uleb128 0x2
 654 0346 0000 0000 		.long	.LASF53
 655 034a 04        		.byte	0x4
 656 034b C1        		.byte	0xc1
 657 034c 12        		.byte	0x12
 658 034d 0000 0398 		.long	0x398
 659 0351 54        		.byte	0x54
 660 0352 02        		.uleb128 0x2
 661 0353 0000 0000 		.long	.LASF54
 662 0357 04        		.byte	0x4
 663 0358 C5        		.byte	0xc5
 664 0359 0C        		.byte	0xc
 665 035a 0000 011E 		.long	0x11e
 666 035e 58        		.byte	0x58
 667 035f 02        		.uleb128 0x2
 668 0360 0000 0000 		.long	.LASF55
 669 0364 04        		.byte	0x4
 670 0365 C7        		.byte	0xc7
 671 0366 0E        		.byte	0xe
 672 0367 0000 00F8 		.long	0xf8
 673 036b 5C        		.byte	0x5c
 674 036c 02        		.uleb128 0x2
 675 036d 0000 0000 		.long	.LASF56
 676 0371 04        		.byte	0x4
 677 0372 C8        		.byte	0xc8
 678 0373 09        		.byte	0x9
 679 0374 0000 0085 		.long	0x85


 680 0378 64        		.byte	0x64
 681 0379 00        		.byte	0
 682 037a 0C        		.uleb128 0xc
 683 037b 0000 0098 		.long	0x98
 684 037f 0000 0398 		.long	0x398
 685 0383 03        		.uleb128 0x3
 686 0384 0000 0398 		.long	0x398
 687 0388 03        		.uleb128 0x3
 688 0389 0000 0104 		.long	0x104
 689 038d 03        		.uleb128 0x3
 690 038e 0000 047F 		.long	0x47f
 691 0392 03        		.uleb128 0x3
 692 0393 0000 0085 		.long	0x85
 693 0397 00        		.byte	0
 694 0398 04        		.uleb128 0x4
 695 0399 0000 039D 		.long	0x39d
 696 039d 1C        		.uleb128 0x1c
 697 039e 0000 0000 		.long	.LASF57
 698 03a2 0116      		.word	0x116
 699 03a4 04        		.byte	0x4
 700 03a5 0237      		.word	0x237
 701 03a7 08        		.byte	0x8
 702 03a8 0000 047F 		.long	0x47f
 703 03ac 01        		.uleb128 0x1
 704 03ad 0000 0000 		.long	.LASF58
 705 03b1 0239      		.word	0x239
 706 03b3 07        		.byte	0x7
 707 03b4 0000 0085 		.long	0x85
 708 03b8 00        		.byte	0
 709 03b9 01        		.uleb128 0x1
 710 03ba 0000 0000 		.long	.LASF59
 711 03be 023E      		.word	0x23e
 712 03c0 0B        		.byte	0xb
 713 03c1 0000 052B 		.long	0x52b
 714 03c5 04        		.byte	0x4
 715 03c6 01        		.uleb128 0x1
 716 03c7 0000 0000 		.long	.LASF60
 717 03cb 023E      		.word	0x23e
 718 03cd 14        		.byte	0x14
 719 03ce 0000 052B 		.long	0x52b
 720 03d2 08        		.byte	0x8
 721 03d3 01        		.uleb128 0x1
 722 03d4 0000 0000 		.long	.LASF61
 723 03d8 023E      		.word	0x23e
 724 03da 1E        		.byte	0x1e
 725 03db 0000 052B 		.long	0x52b
 726 03df 0C        		.byte	0xc
 727 03e0 01        		.uleb128 0x1
 728 03e1 0000 0000 		.long	.LASF62
 729 03e5 0240      		.word	0x240
 730 03e7 08        		.byte	0x8
 731 03e8 0000 0085 		.long	0x85
 732 03ec 10        		.byte	0x10
 733 03ed 01        		.uleb128 0x1
 734 03ee 0000 0000 		.long	.LASF63
 735 03f2 0241      		.word	0x241
 736 03f4 08        		.byte	0x8


 737 03f5 0000 06B3 		.long	0x6b3
 738 03f9 14        		.byte	0x14
 739 03fa 01        		.uleb128 0x1
 740 03fb 0000 0000 		.long	.LASF64
 741 03ff 0246      		.word	0x246
 742 0401 16        		.byte	0x16
 743 0402 0000 06C8 		.long	0x6c8
 744 0406 2E        		.byte	0x2e
 745 0407 01        		.uleb128 0x1
 746 0408 0000 0000 		.long	.LASF65
 747 040c 024C      		.word	0x24c
 748 040e 0A        		.byte	0xa
 749 040f 0000 06D8 		.long	0x6d8
 750 0413 32        		.byte	0x32
 751 0414 01        		.uleb128 0x1
 752 0415 0000 0000 		.long	.LASF66
 753 0419 024F      		.word	0x24f
 754 041b 13        		.byte	0x13
 755 041c 0000 0180 		.long	0x180
 756 0420 36        		.byte	0x36
 757 0421 01        		.uleb128 0x1
 758 0422 0000 0000 		.long	.LASF67
 759 0426 0250      		.word	0x250
 760 0428 07        		.byte	0x7
 761 0429 0000 0085 		.long	0x85
 762 042d 3A        		.byte	0x3a
 763 042e 01        		.uleb128 0x1
 764 042f 0000 0000 		.long	.LASF68
 765 0433 0251      		.word	0x251
 766 0435 13        		.byte	0x13
 767 0436 0000 0180 		.long	0x180
 768 043a 3E        		.byte	0x3e
 769 043b 01        		.uleb128 0x1
 770 043c 0000 0000 		.long	.LASF69
 771 0440 0252      		.word	0x252
 772 0442 14        		.byte	0x14
 773 0443 0000 06DD 		.long	0x6dd
 774 0447 42        		.byte	0x42
 775 0448 01        		.uleb128 0x1
 776 0449 0000 0000 		.long	.LASF70
 777 044d 0255      		.word	0x255
 778 044f 07        		.byte	0x7
 779 0450 0000 0085 		.long	0x85
 780 0454 46        		.byte	0x46
 781 0455 01        		.uleb128 0x1
 782 0456 0000 0000 		.long	.LASF71
 783 045a 0256      		.word	0x256
 784 045c 09        		.byte	0x9
 785 045d 0000 047F 		.long	0x47f
 786 0461 4A        		.byte	0x4a
 787 0462 01        		.uleb128 0x1
 788 0463 0000 0000 		.long	.LASF72
 789 0467 0279      		.word	0x279
 790 0469 07        		.byte	0x7
 791 046a 0000 069B 		.long	0x69b
 792 046e 4E        		.byte	0x4e
 793 046f 1D        		.uleb128 0x1d


 794 0470 0000 0000 		.long	.LASF73
 795 0474 04        		.byte	0x4
 796 0475 0281      		.word	0x281
 797 0477 0B        		.byte	0xb
 798 0478 0000 06ED 		.long	0x6ed
 799 047c 0112      		.word	0x112
 800 047e 00        		.byte	0
 801 047f 04        		.uleb128 0x4
 802 0480 0000 0484 		.long	0x484
 803 0484 05        		.uleb128 0x5
 804 0485 01        		.byte	0x1
 805 0486 06        		.byte	0x6
 806 0487 0000 0000 		.long	.LASF74
 807 048b 1E        		.uleb128 0x1e
 808 048c 0000 0484 		.long	0x484
 809 0490 04        		.uleb128 0x4
 810 0491 0000 037A 		.long	0x37a
 811 0495 0C        		.uleb128 0xc
 812 0496 0000 0098 		.long	0x98
 813 049a 0000 04B3 		.long	0x4b3
 814 049e 03        		.uleb128 0x3
 815 049f 0000 0398 		.long	0x398
 816 04a3 03        		.uleb128 0x3
 817 04a4 0000 0104 		.long	0x104
 818 04a8 03        		.uleb128 0x3
 819 04a9 0000 04B3 		.long	0x4b3
 820 04ad 03        		.uleb128 0x3
 821 04ae 0000 0085 		.long	0x85
 822 04b2 00        		.byte	0
 823 04b3 04        		.uleb128 0x4
 824 04b4 0000 048B 		.long	0x48b
 825 04b8 10        		.uleb128 0x10
 826 04b9 0000 04B3 		.long	0x4b3
 827 04bd 04        		.uleb128 0x4
 828 04be 0000 0495 		.long	0x495
 829 04c2 0C        		.uleb128 0xc
 830 04c3 0000 008C 		.long	0x8c
 831 04c7 0000 04E0 		.long	0x4e0
 832 04cb 03        		.uleb128 0x3
 833 04cc 0000 0398 		.long	0x398
 834 04d0 03        		.uleb128 0x3
 835 04d1 0000 0104 		.long	0x104
 836 04d5 03        		.uleb128 0x3
 837 04d6 0000 008C 		.long	0x8c
 838 04da 03        		.uleb128 0x3
 839 04db 0000 0085 		.long	0x85
 840 04df 00        		.byte	0
 841 04e0 04        		.uleb128 0x4
 842 04e1 0000 04C2 		.long	0x4c2
 843 04e5 0C        		.uleb128 0xc
 844 04e6 0000 0085 		.long	0x85
 845 04ea 0000 04F9 		.long	0x4f9
 846 04ee 03        		.uleb128 0x3
 847 04ef 0000 0398 		.long	0x398
 848 04f3 03        		.uleb128 0x3
 849 04f4 0000 0104 		.long	0x104
 850 04f8 00        		.byte	0


 851 04f9 04        		.uleb128 0x4
 852 04fa 0000 04E5 		.long	0x4e5
 853 04fe 07        		.uleb128 0x7
 854 04ff 0000 002D 		.long	0x2d
 855 0503 0000 050E 		.long	0x50e
 856 0507 08        		.uleb128 0x8
 857 0508 0000 0049 		.long	0x49
 858 050c 02        		.byte	0x2
 859 050d 00        		.byte	0
 860 050e 07        		.uleb128 0x7
 861 050f 0000 002D 		.long	0x2d
 862 0513 0000 051E 		.long	0x51e
 863 0517 08        		.uleb128 0x8
 864 0518 0000 0049 		.long	0x49
 865 051c 00        		.byte	0
 866 051d 00        		.byte	0
 867 051e 0E        		.uleb128 0xe
 868 051f 0000 0000 		.long	.LASF75
 869 0523 04        		.byte	0x4
 870 0524 010D      		.word	0x10d
 871 0526 1A        		.byte	0x1a
 872 0527 0000 0241 		.long	0x241
 873 052b 04        		.uleb128 0x4
 874 052c 0000 051E 		.long	0x51e
 875 0530 1F        		.uleb128 0x1f
 876 0531 0000 0000 		.long	.LASF76
 877 0535 0E        		.byte	0xe
 878 0536 04        		.byte	0x4
 879 0537 0131      		.word	0x131
 880 0539 08        		.byte	0x8
 881 053a 0000 0566 		.long	0x566
 882 053e 01        		.uleb128 0x1
 883 053f 0000 0000 		.long	.LASF77
 884 0543 0132      		.word	0x132
 885 0545 12        		.byte	0x12
 886 0546 0000 0566 		.long	0x566
 887 054a 00        		.byte	0
 888 054b 01        		.uleb128 0x1
 889 054c 0000 0000 		.long	.LASF78
 890 0550 0133      		.word	0x133
 891 0552 12        		.byte	0x12
 892 0553 0000 0566 		.long	0x566
 893 0557 06        		.byte	0x6
 894 0558 01        		.uleb128 0x1
 895 0559 0000 0000 		.long	.LASF79
 896 055d 0134      		.word	0x134
 897 055f 12        		.byte	0x12
 898 0560 0000 003B 		.long	0x3b
 899 0564 0C        		.byte	0xc
 900 0565 00        		.byte	0
 901 0566 07        		.uleb128 0x7
 902 0567 0000 003B 		.long	0x3b
 903 056b 0000 0576 		.long	0x576
 904 056f 08        		.uleb128 0x8
 905 0570 0000 0049 		.long	0x49
 906 0574 02        		.byte	0x2
 907 0575 00        		.byte	0


 908 0576 20        		.uleb128 0x20
 909 0577 C4        		.byte	0xc4
 910 0578 04        		.byte	0x4
 911 0579 025A      		.word	0x25a
 912 057b 07        		.byte	0x7
 913 057c 0000 066B 		.long	0x66b
 914 0580 01        		.uleb128 0x1
 915 0581 0000 0000 		.long	.LASF80
 916 0585 025F      		.word	0x25f
 917 0587 12        		.byte	0x12
 918 0588 0000 047F 		.long	0x47f
 919 058c 00        		.byte	0
 920 058d 01        		.uleb128 0x1
 921 058e 0000 0000 		.long	.LASF81
 922 0592 0260      		.word	0x260
 923 0594 10        		.byte	0x10
 924 0595 0000 066B 		.long	0x66b
 925 0599 04        		.byte	0x4
 926 059a 01        		.uleb128 0x1
 927 059b 0000 0000 		.long	.LASF82
 928 059f 0261      		.word	0x261
 929 05a1 17        		.byte	0x17
 930 05a2 0000 0195 		.long	0x195
 931 05a6 1E        		.byte	0x1e
 932 05a7 01        		.uleb128 0x1
 933 05a8 0000 0000 		.long	.LASF83
 934 05ac 0262      		.word	0x262
 935 05ae 0F        		.byte	0xf
 936 05af 0000 0085 		.long	0x85
 937 05b3 42        		.byte	0x42
 938 05b4 01        		.uleb128 0x1
 939 05b5 0000 0000 		.long	.LASF84
 940 05b9 0263      		.word	0x263
 941 05bb 2C        		.byte	0x2c
 942 05bc 0000 0057 		.long	0x57
 943 05c0 46        		.byte	0x46
 944 05c1 01        		.uleb128 0x1
 945 05c2 0000 0000 		.long	.LASF85
 946 05c6 0264      		.word	0x264
 947 05c8 1A        		.byte	0x1a
 948 05c9 0000 0530 		.long	0x530
 949 05cd 4E        		.byte	0x4e
 950 05ce 01        		.uleb128 0x1
 951 05cf 0000 0000 		.long	.LASF86
 952 05d3 0265      		.word	0x265
 953 05d5 16        		.byte	0x16
 954 05d6 0000 00F8 		.long	0xf8
 955 05da 5C        		.byte	0x5c
 956 05db 01        		.uleb128 0x1
 957 05dc 0000 0000 		.long	.LASF87
 958 05e0 0266      		.word	0x266
 959 05e2 16        		.byte	0x16
 960 05e3 0000 00F8 		.long	0xf8
 961 05e7 64        		.byte	0x64
 962 05e8 01        		.uleb128 0x1
 963 05e9 0000 0000 		.long	.LASF88
 964 05ed 0267      		.word	0x267


 965 05ef 16        		.byte	0x16
 966 05f0 0000 00F8 		.long	0xf8
 967 05f4 6C        		.byte	0x6c
 968 05f5 01        		.uleb128 0x1
 969 05f6 0000 0000 		.long	.LASF89
 970 05fa 0268      		.word	0x268
 971 05fc 10        		.byte	0x10
 972 05fd 0000 067B 		.long	0x67b
 973 0601 74        		.byte	0x74
 974 0602 01        		.uleb128 0x1
 975 0603 0000 0000 		.long	.LASF90
 976 0607 0269      		.word	0x269
 977 0609 10        		.byte	0x10
 978 060a 0000 068B 		.long	0x68b
 979 060e 7C        		.byte	0x7c
 980 060f 01        		.uleb128 0x1
 981 0610 0000 0000 		.long	.LASF91
 982 0614 026A      		.word	0x26a
 983 0616 0F        		.byte	0xf
 984 0617 0000 0085 		.long	0x85
 985 061b 94        		.byte	0x94
 986 061c 01        		.uleb128 0x1
 987 061d 0000 0000 		.long	.LASF92
 988 0621 026B      		.word	0x26b
 989 0623 16        		.byte	0x16
 990 0624 0000 00F8 		.long	0xf8
 991 0628 98        		.byte	0x98
 992 0629 01        		.uleb128 0x1
 993 062a 0000 0000 		.long	.LASF93
 994 062e 026C      		.word	0x26c
 995 0630 16        		.byte	0x16
 996 0631 0000 00F8 		.long	0xf8
 997 0635 A0        		.byte	0xa0
 998 0636 01        		.uleb128 0x1
 999 0637 0000 0000 		.long	.LASF94
 1000 063b 026D      		.word	0x26d
 1001 063d 16        		.byte	0x16
 1002 063e 0000 00F8 		.long	0xf8
 1003 0642 A8        		.byte	0xa8
 1004 0643 01        		.uleb128 0x1
 1005 0644 0000 0000 		.long	.LASF95
 1006 0648 026E      		.word	0x26e
 1007 064a 16        		.byte	0x16
 1008 064b 0000 00F8 		.long	0xf8
 1009 064f B0        		.byte	0xb0
 1010 0650 01        		.uleb128 0x1
 1011 0651 0000 0000 		.long	.LASF96
 1012 0655 026F      		.word	0x26f
 1013 0657 16        		.byte	0x16
 1014 0658 0000 00F8 		.long	0xf8
 1015 065c B8        		.byte	0xb8
 1016 065d 01        		.uleb128 0x1
 1017 065e 0000 0000 		.long	.LASF97
 1018 0662 0270      		.word	0x270
 1019 0664 08        		.byte	0x8
 1020 0665 0000 0085 		.long	0x85
 1021 0669 C0        		.byte	0xc0


 1022 066a 00        		.byte	0
 1023 066b 07        		.uleb128 0x7
 1024 066c 0000 0484 		.long	0x484
 1025 0670 0000 067B 		.long	0x67b
 1026 0674 08        		.uleb128 0x8
 1027 0675 0000 0049 		.long	0x49
 1028 0679 19        		.byte	0x19
 1029 067a 00        		.byte	0
 1030 067b 07        		.uleb128 0x7
 1031 067c 0000 0484 		.long	0x484
 1032 0680 0000 068B 		.long	0x68b
 1033 0684 08        		.uleb128 0x8
 1034 0685 0000 0049 		.long	0x49
 1035 0689 07        		.byte	0x7
 1036 068a 00        		.byte	0
 1037 068b 07        		.uleb128 0x7
 1038 068c 0000 0484 		.long	0x484
 1039 0690 0000 069B 		.long	0x69b
 1040 0694 08        		.uleb128 0x8
 1041 0695 0000 0049 		.long	0x49
 1042 0699 17        		.byte	0x17
 1043 069a 00        		.byte	0
 1044 069b 21        		.uleb128 0x21
 1045 069c C4        		.byte	0xc4
 1046 069d 04        		.byte	0x4
 1047 069e 0258      		.word	0x258
 1048 06a0 03        		.byte	0x3
 1049 06a1 0000 06B3 		.long	0x6b3
 1050 06a5 22        		.uleb128 0x22
 1051 06a6 0000 0000 		.long	.LASF57
 1052 06aa 04        		.byte	0x4
 1053 06ab 0271      		.word	0x271
 1054 06ad 0B        		.byte	0xb
 1055 06ae 0000 0576 		.long	0x576
 1056 06b2 00        		.byte	0
 1057 06b3 07        		.uleb128 0x7
 1058 06b4 0000 0484 		.long	0x484
 1059 06b8 0000 06C3 		.long	0x6c3
 1060 06bc 08        		.uleb128 0x8
 1061 06bd 0000 0049 		.long	0x49
 1062 06c1 18        		.byte	0x18
 1063 06c2 00        		.byte	0
 1064 06c3 23        		.uleb128 0x23
 1065 06c4 0000 0000 		.long	.LASF115
 1066 06c8 04        		.uleb128 0x4
 1067 06c9 0000 06C3 		.long	0x6c3
 1068 06cd 11        		.uleb128 0x11
 1069 06ce 0000 06D8 		.long	0x6d8
 1070 06d2 03        		.uleb128 0x3
 1071 06d3 0000 0398 		.long	0x398
 1072 06d7 00        		.byte	0
 1073 06d8 04        		.uleb128 0x4
 1074 06d9 0000 06CD 		.long	0x6cd
 1075 06dd 04        		.uleb128 0x4
 1076 06de 0000 0180 		.long	0x180
 1077 06e2 11        		.uleb128 0x11
 1078 06e3 0000 06ED 		.long	0x6ed


 1079 06e7 03        		.uleb128 0x3
 1080 06e8 0000 0085 		.long	0x85
 1081 06ec 00        		.byte	0
 1082 06ed 04        		.uleb128 0x4
 1083 06ee 0000 06F2 		.long	0x6f2
 1084 06f2 04        		.uleb128 0x4
 1085 06f3 0000 06E2 		.long	0x6e2
 1086 06f7 09        		.uleb128 0x9
 1087 06f8 0000 0000 		.long	.LASF98
 1088 06fc 06        		.byte	0x6
 1089 06fd 42        		.byte	0x42
 1090 06fe 10        		.byte	0x10
 1091 06ff 0000 051E 		.long	0x51e
 1092 0703 0D        		.uleb128 0xd
 1093 0704 0000 0000 		.long	.LASF99
 1094 0708 09        		.byte	0x9
 1095 0709 0000 0713 		.long	0x713
 1096 070d 05        		.uleb128 0x5
 1097 070e 03        		.byte	0x3
 1098 070f 0000 0000 		.long	com0in
 1099 0713 04        		.uleb128 0x4
 1100 0714 0000 06F7 		.long	0x6f7
 1101 0718 10        		.uleb128 0x10
 1102 0719 0000 0713 		.long	0x713
 1103 071d 0D        		.uleb128 0xd
 1104 071e 0000 0000 		.long	.LASF100
 1105 0722 0A        		.byte	0xa
 1106 0723 0000 0713 		.long	0x713
 1107 0727 05        		.uleb128 0x5
 1108 0728 03        		.byte	0x3
 1109 0729 0000 0000 		.long	com0out
 1110 072d 0D        		.uleb128 0xd
 1111 072e 0000 0000 		.long	.LASF101
 1112 0732 0B        		.byte	0xb
 1113 0733 0000 0713 		.long	0x713
 1114 0737 05        		.uleb128 0x5
 1115 0738 03        		.byte	0x3
 1116 0739 0000 0000 		.long	com1in
 1117 073d 0D        		.uleb128 0xd
 1118 073e 0000 0000 		.long	.LASF102
 1119 0742 0C        		.byte	0xc
 1120 0743 0000 0713 		.long	0x713
 1121 0747 05        		.uleb128 0x5
 1122 0748 03        		.byte	0x3
 1123 0749 0000 0000 		.long	com1out
 1124 074d 24        		.uleb128 0x24
 1125 074e 0000 0000 		.long	.LASF103
 1126 0752 06        		.byte	0x6
 1127 0753 CC        		.byte	0xcc
 1128 0754 05        		.byte	0x5
 1129 0755 0000 0085 		.long	0x85
 1130 0759 0000 0769 		.long	0x769
 1131 075d 03        		.uleb128 0x3
 1132 075e 0000 0718 		.long	0x718
 1133 0762 03        		.uleb128 0x3
 1134 0763 0000 04B8 		.long	0x4b8
 1135 0767 12        		.uleb128 0x12


 1136 0768 00        		.byte	0
 1137 0769 25        		.uleb128 0x25
 1138 076a 0000 0000 		.long	.LASF104
 1139 076e 06        		.byte	0x6
 1140 076f 0159      		.word	0x159
 1141 0771 08        		.byte	0x8
 1142 0772 0000 0713 		.long	0x713
 1143 0776 0000 0785 		.long	0x785
 1144 077a 03        		.uleb128 0x3
 1145 077b 0000 0085 		.long	0x85
 1146 077f 03        		.uleb128 0x3
 1147 0780 0000 04B3 		.long	0x4b3
 1148 0784 00        		.byte	0
 1149 0785 13        		.uleb128 0x13
 1150 0786 0000 0000 		.long	.LASF107
 1151 078a 01        		.byte	0x1
 1152 078b 1E        		.byte	0x1e
 1153 078c 05        		.byte	0x5
 1154 078d 0000 0085 		.long	0x85
 1155 0791 0000 0000 		.long	.LFB6
 1156 0795 0000 00B6 		.long	.LFE6-.LFB6
 1157 0799 01        		.uleb128 0x1
 1158 079a 9C        		.byte	0x9c
 1159 079b 0000 07F7 		.long	0x7f7
 1160 079f 26        		.uleb128 0x26
 1161 07a0 0000 0000 		.long	.LASF116
 1162 07a4 01        		.byte	0x1
 1163 07a5 1F        		.byte	0x1f
 1164 07a6 0A        		.byte	0xa
 1165 07a7 0000 0484 		.long	0x484
 1166 07ab 02        		.uleb128 0x2
 1167 07ac 91        		.byte	0x91
 1168 07ad 7B        		.sleb128 -5
 1169 07ae 0A        		.uleb128 0xa
 1170 07af 0000 0000 		.long	.LVL1
 1171 07b3 0000 0769 		.long	0x769
 1172 07b7 0A        		.uleb128 0xa
 1173 07b8 0000 0000 		.long	.LVL2
 1174 07bc 0000 0769 		.long	0x769
 1175 07c0 0A        		.uleb128 0xa
 1176 07c1 0000 0000 		.long	.LVL3
 1177 07c5 0000 0769 		.long	0x769
 1178 07c9 0A        		.uleb128 0xa
 1179 07ca 0000 0000 		.long	.LVL4
 1180 07ce 0000 0769 		.long	0x769
 1181 07d2 0A        		.uleb128 0xa
 1182 07d3 0000 0000 		.long	.LVL5
 1183 07d7 0000 084C 		.long	0x84c
 1184 07db 0A        		.uleb128 0xa
 1185 07dc 0000 0000 		.long	.LVL6
 1186 07e0 0000 0855 		.long	0x855
 1187 07e4 0A        		.uleb128 0xa
 1188 07e5 0000 0000 		.long	.LVL7
 1189 07e9 0000 084C 		.long	0x84c
 1190 07ed 0A        		.uleb128 0xa
 1191 07ee 0000 0000 		.long	.LVL8
 1192 07f2 0000 0855 		.long	0x855


 1193 07f6 00        		.byte	0
 1194 07f7 14        		.uleb128 0x14
 1195 07f8 0000 0000 		.long	.LASF105
 1196 07fc 18        		.byte	0x18
 1197 07fd 0000 0000 		.long	.LFB5
 1198 0801 0000 0002 		.long	.LFE5-.LFB5
 1199 0805 01        		.uleb128 0x1
 1200 0806 9C        		.byte	0x9c
 1201 0807 14        		.uleb128 0x14
 1202 0808 0000 0000 		.long	.LASF106
 1203 080c 12        		.byte	0x12
 1204 080d 0000 0000 		.long	.LFB4
 1205 0811 0000 0002 		.long	.LFE4-.LFB4
 1206 0815 01        		.uleb128 0x1
 1207 0816 9C        		.byte	0x9c
 1208 0817 13        		.uleb128 0x13
 1209 0818 0000 0000 		.long	.LASF108
 1210 081c 07        		.byte	0x7
 1211 081d DA        		.byte	0xda
 1212 081e 0C        		.byte	0xc
 1213 081f 0000 0085 		.long	0x85
 1214 0823 0000 0000 		.long	.LFB3
 1215 0827 0000 0012 		.long	.LFE3-.LFB3
 1216 082b 01        		.uleb128 0x1
 1217 082c 9C        		.byte	0x9c
 1218 082d 0000 084C 		.long	0x84c
 1219 0831 15        		.uleb128 0x15
 1220 0832 6664 00   		.string	"fd"
 1221 0835 0F        		.byte	0xf
 1222 0836 0000 0085 		.long	0x85
 1223 083a 02        		.uleb128 0x2
 1224 083b 91        		.byte	0x91
 1225 083c 00        		.sleb128 0
 1226 083d 15        		.uleb128 0x15
 1227 083e 636D 6400 		.string	"cmd"
 1228 0842 17        		.byte	0x17
 1229 0843 0000 0085 		.long	0x85
 1230 0847 02        		.uleb128 0x2
 1231 0848 91        		.byte	0x91
 1232 0849 04        		.sleb128 4
 1233 084a 12        		.uleb128 0x12
 1234 084b 00        		.byte	0
 1235 084c 16        		.uleb128 0x16
 1236 084d 0000 0000 		.long	.LASF103
 1237 0851 0000 0000 		.long	.LASF110
 1238 0855 16        		.uleb128 0x16
 1239 0856 0000 0000 		.long	.LASF109
 1240 085a 0000 0000 		.long	.LASF111
 1241 085e 00        		.byte	0
 1242               		.section	.debug_abbrev,"",@progbits
 1243               	.Ldebug_abbrev0:
 1244 0000 01        		.uleb128 0x1
 1245 0001 0D        		.uleb128 0xd
 1246 0002 00        		.byte	0
 1247 0003 03        		.uleb128 0x3
 1248 0004 0E        		.uleb128 0xe
 1249 0005 3A        		.uleb128 0x3a


 1250 0006 21        		.uleb128 0x21
 1251 0007 04        		.sleb128 4
 1252 0008 3B        		.uleb128 0x3b
 1253 0009 05        		.uleb128 0x5
 1254 000a 39        		.uleb128 0x39
 1255 000b 0B        		.uleb128 0xb
 1256 000c 49        		.uleb128 0x49
 1257 000d 13        		.uleb128 0x13
 1258 000e 38        		.uleb128 0x38
 1259 000f 0B        		.uleb128 0xb
 1260 0010 00        		.byte	0
 1261 0011 00        		.byte	0
 1262 0012 02        		.uleb128 0x2
 1263 0013 0D        		.uleb128 0xd
 1264 0014 00        		.byte	0
 1265 0015 03        		.uleb128 0x3
 1266 0016 0E        		.uleb128 0xe
 1267 0017 3A        		.uleb128 0x3a
 1268 0018 0B        		.uleb128 0xb
 1269 0019 3B        		.uleb128 0x3b
 1270 001a 0B        		.uleb128 0xb
 1271 001b 39        		.uleb128 0x39
 1272 001c 0B        		.uleb128 0xb
 1273 001d 49        		.uleb128 0x49
 1274 001e 13        		.uleb128 0x13
 1275 001f 38        		.uleb128 0x38
 1276 0020 0B        		.uleb128 0xb
 1277 0021 00        		.byte	0
 1278 0022 00        		.byte	0
 1279 0023 03        		.uleb128 0x3
 1280 0024 05        		.uleb128 0x5
 1281 0025 00        		.byte	0
 1282 0026 49        		.uleb128 0x49
 1283 0027 13        		.uleb128 0x13
 1284 0028 00        		.byte	0
 1285 0029 00        		.byte	0
 1286 002a 04        		.uleb128 0x4
 1287 002b 0F        		.uleb128 0xf
 1288 002c 00        		.byte	0
 1289 002d 0B        		.uleb128 0xb
 1290 002e 21        		.uleb128 0x21
 1291 002f 04        		.sleb128 4
 1292 0030 49        		.uleb128 0x49
 1293 0031 13        		.uleb128 0x13
 1294 0032 00        		.byte	0
 1295 0033 00        		.byte	0
 1296 0034 05        		.uleb128 0x5
 1297 0035 24        		.uleb128 0x24
 1298 0036 00        		.byte	0
 1299 0037 0B        		.uleb128 0xb
 1300 0038 0B        		.uleb128 0xb
 1301 0039 3E        		.uleb128 0x3e
 1302 003a 0B        		.uleb128 0xb
 1303 003b 03        		.uleb128 0x3
 1304 003c 0E        		.uleb128 0xe
 1305 003d 00        		.byte	0
 1306 003e 00        		.byte	0


 1307 003f 06        		.uleb128 0x6
 1308 0040 0D        		.uleb128 0xd
 1309 0041 00        		.byte	0
 1310 0042 03        		.uleb128 0x3
 1311 0043 08        		.uleb128 0x8
 1312 0044 3A        		.uleb128 0x3a
 1313 0045 21        		.uleb128 0x21
 1314 0046 04        		.sleb128 4
 1315 0047 3B        		.uleb128 0x3b
 1316 0048 0B        		.uleb128 0xb
 1317 0049 39        		.uleb128 0x39
 1318 004a 0B        		.uleb128 0xb
 1319 004b 49        		.uleb128 0x49
 1320 004c 13        		.uleb128 0x13
 1321 004d 38        		.uleb128 0x38
 1322 004e 0B        		.uleb128 0xb
 1323 004f 00        		.byte	0
 1324 0050 00        		.byte	0
 1325 0051 07        		.uleb128 0x7
 1326 0052 01        		.uleb128 0x1
 1327 0053 01        		.byte	0x1
 1328 0054 49        		.uleb128 0x49
 1329 0055 13        		.uleb128 0x13
 1330 0056 01        		.uleb128 0x1
 1331 0057 13        		.uleb128 0x13
 1332 0058 00        		.byte	0
 1333 0059 00        		.byte	0
 1334 005a 08        		.uleb128 0x8
 1335 005b 21        		.uleb128 0x21
 1336 005c 00        		.byte	0
 1337 005d 49        		.uleb128 0x49
 1338 005e 13        		.uleb128 0x13
 1339 005f 2F        		.uleb128 0x2f
 1340 0060 0B        		.uleb128 0xb
 1341 0061 00        		.byte	0
 1342 0062 00        		.byte	0
 1343 0063 09        		.uleb128 0x9
 1344 0064 16        		.uleb128 0x16
 1345 0065 00        		.byte	0
 1346 0066 03        		.uleb128 0x3
 1347 0067 0E        		.uleb128 0xe
 1348 0068 3A        		.uleb128 0x3a
 1349 0069 0B        		.uleb128 0xb
 1350 006a 3B        		.uleb128 0x3b
 1351 006b 0B        		.uleb128 0xb
 1352 006c 39        		.uleb128 0x39
 1353 006d 0B        		.uleb128 0xb
 1354 006e 49        		.uleb128 0x49
 1355 006f 13        		.uleb128 0x13
 1356 0070 00        		.byte	0
 1357 0071 00        		.byte	0
 1358 0072 0A        		.uleb128 0xa
 1359 0073 48        		.uleb128 0x48
 1360 0074 00        		.byte	0
 1361 0075 7D        		.uleb128 0x7d
 1362 0076 01        		.uleb128 0x1
 1363 0077 7F        		.uleb128 0x7f


 1364 0078 13        		.uleb128 0x13
 1365 0079 00        		.byte	0
 1366 007a 00        		.byte	0
 1367 007b 0B        		.uleb128 0xb
 1368 007c 13        		.uleb128 0x13
 1369 007d 01        		.byte	0x1
 1370 007e 03        		.uleb128 0x3
 1371 007f 0E        		.uleb128 0xe
 1372 0080 0B        		.uleb128 0xb
 1373 0081 0B        		.uleb128 0xb
 1374 0082 3A        		.uleb128 0x3a
 1375 0083 21        		.uleb128 0x21
 1376 0084 04        		.sleb128 4
 1377 0085 3B        		.uleb128 0x3b
 1378 0086 0B        		.uleb128 0xb
 1379 0087 39        		.uleb128 0x39
 1380 0088 21        		.uleb128 0x21
 1381 0089 08        		.sleb128 8
 1382 008a 01        		.uleb128 0x1
 1383 008b 13        		.uleb128 0x13
 1384 008c 00        		.byte	0
 1385 008d 00        		.byte	0
 1386 008e 0C        		.uleb128 0xc
 1387 008f 15        		.uleb128 0x15
 1388 0090 01        		.byte	0x1
 1389 0091 27        		.uleb128 0x27
 1390 0092 19        		.uleb128 0x19
 1391 0093 49        		.uleb128 0x49
 1392 0094 13        		.uleb128 0x13
 1393 0095 01        		.uleb128 0x1
 1394 0096 13        		.uleb128 0x13
 1395 0097 00        		.byte	0
 1396 0098 00        		.byte	0
 1397 0099 0D        		.uleb128 0xd
 1398 009a 34        		.uleb128 0x34
 1399 009b 00        		.byte	0
 1400 009c 03        		.uleb128 0x3
 1401 009d 0E        		.uleb128 0xe
 1402 009e 3A        		.uleb128 0x3a
 1403 009f 21        		.uleb128 0x21
 1404 00a0 01        		.sleb128 1
 1405 00a1 3B        		.uleb128 0x3b
 1406 00a2 0B        		.uleb128 0xb
 1407 00a3 39        		.uleb128 0x39
 1408 00a4 21        		.uleb128 0x21
 1409 00a5 07        		.sleb128 7
 1410 00a6 49        		.uleb128 0x49
 1411 00a7 13        		.uleb128 0x13
 1412 00a8 3F        		.uleb128 0x3f
 1413 00a9 19        		.uleb128 0x19
 1414 00aa 02        		.uleb128 0x2
 1415 00ab 18        		.uleb128 0x18
 1416 00ac 00        		.byte	0
 1417 00ad 00        		.byte	0
 1418 00ae 0E        		.uleb128 0xe
 1419 00af 16        		.uleb128 0x16
 1420 00b0 00        		.byte	0


 1421 00b1 03        		.uleb128 0x3
 1422 00b2 0E        		.uleb128 0xe
 1423 00b3 3A        		.uleb128 0x3a
 1424 00b4 0B        		.uleb128 0xb
 1425 00b5 3B        		.uleb128 0x3b
 1426 00b6 05        		.uleb128 0x5
 1427 00b7 39        		.uleb128 0x39
 1428 00b8 0B        		.uleb128 0xb
 1429 00b9 49        		.uleb128 0x49
 1430 00ba 13        		.uleb128 0x13
 1431 00bb 00        		.byte	0
 1432 00bc 00        		.byte	0
 1433 00bd 0F        		.uleb128 0xf
 1434 00be 0D        		.uleb128 0xd
 1435 00bf 00        		.byte	0
 1436 00c0 03        		.uleb128 0x3
 1437 00c1 0E        		.uleb128 0xe
 1438 00c2 3A        		.uleb128 0x3a
 1439 00c3 21        		.uleb128 0x21
 1440 00c4 03        		.sleb128 3
 1441 00c5 3B        		.uleb128 0x3b
 1442 00c6 0B        		.uleb128 0xb
 1443 00c7 39        		.uleb128 0x39
 1444 00c8 0B        		.uleb128 0xb
 1445 00c9 49        		.uleb128 0x49
 1446 00ca 13        		.uleb128 0x13
 1447 00cb 00        		.byte	0
 1448 00cc 00        		.byte	0
 1449 00cd 10        		.uleb128 0x10
 1450 00ce 37        		.uleb128 0x37
 1451 00cf 00        		.byte	0
 1452 00d0 49        		.uleb128 0x49
 1453 00d1 13        		.uleb128 0x13
 1454 00d2 00        		.byte	0
 1455 00d3 00        		.byte	0
 1456 00d4 11        		.uleb128 0x11
 1457 00d5 15        		.uleb128 0x15
 1458 00d6 01        		.byte	0x1
 1459 00d7 27        		.uleb128 0x27
 1460 00d8 19        		.uleb128 0x19
 1461 00d9 01        		.uleb128 0x1
 1462 00da 13        		.uleb128 0x13
 1463 00db 00        		.byte	0
 1464 00dc 00        		.byte	0
 1465 00dd 12        		.uleb128 0x12
 1466 00de 18        		.uleb128 0x18
 1467 00df 00        		.byte	0
 1468 00e0 00        		.byte	0
 1469 00e1 00        		.byte	0
 1470 00e2 13        		.uleb128 0x13
 1471 00e3 2E        		.uleb128 0x2e
 1472 00e4 01        		.byte	0x1
 1473 00e5 3F        		.uleb128 0x3f
 1474 00e6 19        		.uleb128 0x19
 1475 00e7 03        		.uleb128 0x3
 1476 00e8 0E        		.uleb128 0xe
 1477 00e9 3A        		.uleb128 0x3a


 1478 00ea 0B        		.uleb128 0xb
 1479 00eb 3B        		.uleb128 0x3b
 1480 00ec 0B        		.uleb128 0xb
 1481 00ed 39        		.uleb128 0x39
 1482 00ee 0B        		.uleb128 0xb
 1483 00ef 27        		.uleb128 0x27
 1484 00f0 19        		.uleb128 0x19
 1485 00f1 49        		.uleb128 0x49
 1486 00f2 13        		.uleb128 0x13
 1487 00f3 11        		.uleb128 0x11
 1488 00f4 01        		.uleb128 0x1
 1489 00f5 12        		.uleb128 0x12
 1490 00f6 06        		.uleb128 0x6
 1491 00f7 40        		.uleb128 0x40
 1492 00f8 18        		.uleb128 0x18
 1493 00f9 7A        		.uleb128 0x7a
 1494 00fa 19        		.uleb128 0x19
 1495 00fb 01        		.uleb128 0x1
 1496 00fc 13        		.uleb128 0x13
 1497 00fd 00        		.byte	0
 1498 00fe 00        		.byte	0
 1499 00ff 14        		.uleb128 0x14
 1500 0100 2E        		.uleb128 0x2e
 1501 0101 00        		.byte	0
 1502 0102 3F        		.uleb128 0x3f
 1503 0103 19        		.uleb128 0x19
 1504 0104 03        		.uleb128 0x3
 1505 0105 0E        		.uleb128 0xe
 1506 0106 3A        		.uleb128 0x3a
 1507 0107 21        		.uleb128 0x21
 1508 0108 01        		.sleb128 1
 1509 0109 3B        		.uleb128 0x3b
 1510 010a 0B        		.uleb128 0xb
 1511 010b 39        		.uleb128 0x39
 1512 010c 21        		.uleb128 0x21
 1513 010d 06        		.sleb128 6
 1514 010e 11        		.uleb128 0x11
 1515 010f 01        		.uleb128 0x1
 1516 0110 12        		.uleb128 0x12
 1517 0111 06        		.uleb128 0x6
 1518 0112 40        		.uleb128 0x40
 1519 0113 18        		.uleb128 0x18
 1520 0114 7A        		.uleb128 0x7a
 1521 0115 19        		.uleb128 0x19
 1522 0116 00        		.byte	0
 1523 0117 00        		.byte	0
 1524 0118 15        		.uleb128 0x15
 1525 0119 05        		.uleb128 0x5
 1526 011a 00        		.byte	0
 1527 011b 03        		.uleb128 0x3
 1528 011c 08        		.uleb128 0x8
 1529 011d 3A        		.uleb128 0x3a
 1530 011e 21        		.uleb128 0x21
 1531 011f 01        		.sleb128 1
 1532 0120 3B        		.uleb128 0x3b
 1533 0121 21        		.uleb128 0x21
 1534 0122 0E        		.sleb128 14


 1535 0123 39        		.uleb128 0x39
 1536 0124 0B        		.uleb128 0xb
 1537 0125 49        		.uleb128 0x49
 1538 0126 13        		.uleb128 0x13
 1539 0127 02        		.uleb128 0x2
 1540 0128 18        		.uleb128 0x18
 1541 0129 00        		.byte	0
 1542 012a 00        		.byte	0
 1543 012b 16        		.uleb128 0x16
 1544 012c 2E        		.uleb128 0x2e
 1545 012d 00        		.byte	0
 1546 012e 3F        		.uleb128 0x3f
 1547 012f 19        		.uleb128 0x19
 1548 0130 3C        		.uleb128 0x3c
 1549 0131 19        		.uleb128 0x19
 1550 0132 6E        		.uleb128 0x6e
 1551 0133 0E        		.uleb128 0xe
 1552 0134 03        		.uleb128 0x3
 1553 0135 0E        		.uleb128 0xe
 1554 0136 3A        		.uleb128 0x3a
 1555 0137 21        		.uleb128 0x21
 1556 0138 08        		.sleb128 8
 1557 0139 3B        		.uleb128 0x3b
 1558 013a 21        		.uleb128 0x21
 1559 013b 00        		.sleb128 0
 1560 013c 00        		.byte	0
 1561 013d 00        		.byte	0
 1562 013e 17        		.uleb128 0x17
 1563 013f 11        		.uleb128 0x11
 1564 0140 01        		.byte	0x1
 1565 0141 25        		.uleb128 0x25
 1566 0142 0E        		.uleb128 0xe
 1567 0143 13        		.uleb128 0x13
 1568 0144 0B        		.uleb128 0xb
 1569 0145 03        		.uleb128 0x3
 1570 0146 0E        		.uleb128 0xe
 1571 0147 1B        		.uleb128 0x1b
 1572 0148 0E        		.uleb128 0xe
 1573 0149 55        		.uleb128 0x55
 1574 014a 17        		.uleb128 0x17
 1575 014b 11        		.uleb128 0x11
 1576 014c 01        		.uleb128 0x1
 1577 014d 10        		.uleb128 0x10
 1578 014e 17        		.uleb128 0x17
 1579 014f 00        		.byte	0
 1580 0150 00        		.byte	0
 1581 0151 18        		.uleb128 0x18
 1582 0152 24        		.uleb128 0x24
 1583 0153 00        		.byte	0
 1584 0154 0B        		.uleb128 0xb
 1585 0155 0B        		.uleb128 0xb
 1586 0156 3E        		.uleb128 0x3e
 1587 0157 0B        		.uleb128 0xb
 1588 0158 03        		.uleb128 0x3
 1589 0159 08        		.uleb128 0x8
 1590 015a 00        		.byte	0
 1591 015b 00        		.byte	0


 1592 015c 19        		.uleb128 0x19
 1593 015d 17        		.uleb128 0x17
 1594 015e 01        		.byte	0x1
 1595 015f 0B        		.uleb128 0xb
 1596 0160 0B        		.uleb128 0xb
 1597 0161 3A        		.uleb128 0x3a
 1598 0162 0B        		.uleb128 0xb
 1599 0163 3B        		.uleb128 0x3b
 1600 0164 0B        		.uleb128 0xb
 1601 0165 39        		.uleb128 0x39
 1602 0166 0B        		.uleb128 0xb
 1603 0167 01        		.uleb128 0x1
 1604 0168 13        		.uleb128 0x13
 1605 0169 00        		.byte	0
 1606 016a 00        		.byte	0
 1607 016b 1A        		.uleb128 0x1a
 1608 016c 13        		.uleb128 0x13
 1609 016d 01        		.byte	0x1
 1610 016e 0B        		.uleb128 0xb
 1611 016f 0B        		.uleb128 0xb
 1612 0170 3A        		.uleb128 0x3a
 1613 0171 0B        		.uleb128 0xb
 1614 0172 3B        		.uleb128 0x3b
 1615 0173 0B        		.uleb128 0xb
 1616 0174 39        		.uleb128 0x39
 1617 0175 0B        		.uleb128 0xb
 1618 0176 01        		.uleb128 0x1
 1619 0177 13        		.uleb128 0x13
 1620 0178 00        		.byte	0
 1621 0179 00        		.byte	0
 1622 017a 1B        		.uleb128 0x1b
 1623 017b 0F        		.uleb128 0xf
 1624 017c 00        		.byte	0
 1625 017d 0B        		.uleb128 0xb
 1626 017e 0B        		.uleb128 0xb
 1627 017f 00        		.byte	0
 1628 0180 00        		.byte	0
 1629 0181 1C        		.uleb128 0x1c
 1630 0182 13        		.uleb128 0x13
 1631 0183 01        		.byte	0x1
 1632 0184 03        		.uleb128 0x3
 1633 0185 0E        		.uleb128 0xe
 1634 0186 0B        		.uleb128 0xb
 1635 0187 05        		.uleb128 0x5
 1636 0188 3A        		.uleb128 0x3a
 1637 0189 0B        		.uleb128 0xb
 1638 018a 3B        		.uleb128 0x3b
 1639 018b 05        		.uleb128 0x5
 1640 018c 39        		.uleb128 0x39
 1641 018d 0B        		.uleb128 0xb
 1642 018e 01        		.uleb128 0x1
 1643 018f 13        		.uleb128 0x13
 1644 0190 00        		.byte	0
 1645 0191 00        		.byte	0
 1646 0192 1D        		.uleb128 0x1d
 1647 0193 0D        		.uleb128 0xd
 1648 0194 00        		.byte	0


 1649 0195 03        		.uleb128 0x3
 1650 0196 0E        		.uleb128 0xe
 1651 0197 3A        		.uleb128 0x3a
 1652 0198 0B        		.uleb128 0xb
 1653 0199 3B        		.uleb128 0x3b
 1654 019a 05        		.uleb128 0x5
 1655 019b 39        		.uleb128 0x39
 1656 019c 0B        		.uleb128 0xb
 1657 019d 49        		.uleb128 0x49
 1658 019e 13        		.uleb128 0x13
 1659 019f 38        		.uleb128 0x38
 1660 01a0 05        		.uleb128 0x5
 1661 01a1 00        		.byte	0
 1662 01a2 00        		.byte	0
 1663 01a3 1E        		.uleb128 0x1e
 1664 01a4 26        		.uleb128 0x26
 1665 01a5 00        		.byte	0
 1666 01a6 49        		.uleb128 0x49
 1667 01a7 13        		.uleb128 0x13
 1668 01a8 00        		.byte	0
 1669 01a9 00        		.byte	0
 1670 01aa 1F        		.uleb128 0x1f
 1671 01ab 13        		.uleb128 0x13
 1672 01ac 01        		.byte	0x1
 1673 01ad 03        		.uleb128 0x3
 1674 01ae 0E        		.uleb128 0xe
 1675 01af 0B        		.uleb128 0xb
 1676 01b0 0B        		.uleb128 0xb
 1677 01b1 3A        		.uleb128 0x3a
 1678 01b2 0B        		.uleb128 0xb
 1679 01b3 3B        		.uleb128 0x3b
 1680 01b4 05        		.uleb128 0x5
 1681 01b5 39        		.uleb128 0x39
 1682 01b6 0B        		.uleb128 0xb
 1683 01b7 01        		.uleb128 0x1
 1684 01b8 13        		.uleb128 0x13
 1685 01b9 00        		.byte	0
 1686 01ba 00        		.byte	0
 1687 01bb 20        		.uleb128 0x20
 1688 01bc 13        		.uleb128 0x13
 1689 01bd 01        		.byte	0x1
 1690 01be 0B        		.uleb128 0xb
 1691 01bf 0B        		.uleb128 0xb
 1692 01c0 3A        		.uleb128 0x3a
 1693 01c1 0B        		.uleb128 0xb
 1694 01c2 3B        		.uleb128 0x3b
 1695 01c3 05        		.uleb128 0x5
 1696 01c4 39        		.uleb128 0x39
 1697 01c5 0B        		.uleb128 0xb
 1698 01c6 01        		.uleb128 0x1
 1699 01c7 13        		.uleb128 0x13
 1700 01c8 00        		.byte	0
 1701 01c9 00        		.byte	0
 1702 01ca 21        		.uleb128 0x21
 1703 01cb 17        		.uleb128 0x17
 1704 01cc 01        		.byte	0x1
 1705 01cd 0B        		.uleb128 0xb


 1706 01ce 0B        		.uleb128 0xb
 1707 01cf 3A        		.uleb128 0x3a
 1708 01d0 0B        		.uleb128 0xb
 1709 01d1 3B        		.uleb128 0x3b
 1710 01d2 05        		.uleb128 0x5
 1711 01d3 39        		.uleb128 0x39
 1712 01d4 0B        		.uleb128 0xb
 1713 01d5 01        		.uleb128 0x1
 1714 01d6 13        		.uleb128 0x13
 1715 01d7 00        		.byte	0
 1716 01d8 00        		.byte	0
 1717 01d9 22        		.uleb128 0x22
 1718 01da 0D        		.uleb128 0xd
 1719 01db 00        		.byte	0
 1720 01dc 03        		.uleb128 0x3
 1721 01dd 0E        		.uleb128 0xe
 1722 01de 3A        		.uleb128 0x3a
 1723 01df 0B        		.uleb128 0xb
 1724 01e0 3B        		.uleb128 0x3b
 1725 01e1 05        		.uleb128 0x5
 1726 01e2 39        		.uleb128 0x39
 1727 01e3 0B        		.uleb128 0xb
 1728 01e4 49        		.uleb128 0x49
 1729 01e5 13        		.uleb128 0x13
 1730 01e6 00        		.byte	0
 1731 01e7 00        		.byte	0
 1732 01e8 23        		.uleb128 0x23
 1733 01e9 13        		.uleb128 0x13
 1734 01ea 00        		.byte	0
 1735 01eb 03        		.uleb128 0x3
 1736 01ec 0E        		.uleb128 0xe
 1737 01ed 3C        		.uleb128 0x3c
 1738 01ee 19        		.uleb128 0x19
 1739 01ef 00        		.byte	0
 1740 01f0 00        		.byte	0
 1741 01f1 24        		.uleb128 0x24
 1742 01f2 2E        		.uleb128 0x2e
 1743 01f3 01        		.byte	0x1
 1744 01f4 3F        		.uleb128 0x3f
 1745 01f5 19        		.uleb128 0x19
 1746 01f6 03        		.uleb128 0x3
 1747 01f7 0E        		.uleb128 0xe
 1748 01f8 3A        		.uleb128 0x3a
 1749 01f9 0B        		.uleb128 0xb
 1750 01fa 3B        		.uleb128 0x3b
 1751 01fb 0B        		.uleb128 0xb
 1752 01fc 39        		.uleb128 0x39
 1753 01fd 0B        		.uleb128 0xb
 1754 01fe 27        		.uleb128 0x27
 1755 01ff 19        		.uleb128 0x19
 1756 0200 49        		.uleb128 0x49
 1757 0201 13        		.uleb128 0x13
 1758 0202 3C        		.uleb128 0x3c
 1759 0203 19        		.uleb128 0x19
 1760 0204 01        		.uleb128 0x1
 1761 0205 13        		.uleb128 0x13
 1762 0206 00        		.byte	0


 1763 0207 00        		.byte	0
 1764 0208 25        		.uleb128 0x25
 1765 0209 2E        		.uleb128 0x2e
 1766 020a 01        		.byte	0x1
 1767 020b 3F        		.uleb128 0x3f
 1768 020c 19        		.uleb128 0x19
 1769 020d 03        		.uleb128 0x3
 1770 020e 0E        		.uleb128 0xe
 1771 020f 3A        		.uleb128 0x3a
 1772 0210 0B        		.uleb128 0xb
 1773 0211 3B        		.uleb128 0x3b
 1774 0212 05        		.uleb128 0x5
 1775 0213 39        		.uleb128 0x39
 1776 0214 0B        		.uleb128 0xb
 1777 0215 27        		.uleb128 0x27
 1778 0216 19        		.uleb128 0x19
 1779 0217 49        		.uleb128 0x49
 1780 0218 13        		.uleb128 0x13
 1781 0219 3C        		.uleb128 0x3c
 1782 021a 19        		.uleb128 0x19
 1783 021b 01        		.uleb128 0x1
 1784 021c 13        		.uleb128 0x13
 1785 021d 00        		.byte	0
 1786 021e 00        		.byte	0
 1787 021f 26        		.uleb128 0x26
 1788 0220 34        		.uleb128 0x34
 1789 0221 00        		.byte	0
 1790 0222 03        		.uleb128 0x3
 1791 0223 0E        		.uleb128 0xe
 1792 0224 3A        		.uleb128 0x3a
 1793 0225 0B        		.uleb128 0xb
 1794 0226 3B        		.uleb128 0x3b
 1795 0227 0B        		.uleb128 0xb
 1796 0228 39        		.uleb128 0x39
 1797 0229 0B        		.uleb128 0xb
 1798 022a 49        		.uleb128 0x49
 1799 022b 13        		.uleb128 0x13
 1800 022c 02        		.uleb128 0x2
 1801 022d 18        		.uleb128 0x18
 1802 022e 00        		.byte	0
 1803 022f 00        		.byte	0
 1804 0230 00        		.byte	0
 1805               		.section	.debug_aranges,"",@progbits
 1806 0000 0000 0024 		.long	0x24
 1807 0004 0002      		.word	0x2
 1808 0006 0000 0000 		.long	.Ldebug_info0
 1809 000a 04        		.byte	0x4
 1810 000b 00        		.byte	0
 1811 000c 0000      		.word	0
 1812 000e 0000      		.word	0
 1813 0010 0000 0000 		.long	.Ltext0
 1814 0014 0000 0016 		.long	.Letext0-.Ltext0
 1815 0018 0000 0000 		.long	.LFB6
 1816 001c 0000 00B6 		.long	.LFE6-.LFB6
 1817 0020 0000 0000 		.long	0
 1818 0024 0000 0000 		.long	0
 1819               		.section	.debug_rnglists,"",@progbits


 1820               	.Ldebug_ranges0:
 1821 0000 0000 0016 		.long	.Ldebug_ranges3-.Ldebug_ranges2
 1822               	.Ldebug_ranges2:
 1823 0004 0005      		.word	0x5
 1824 0006 04        		.byte	0x4
 1825 0007 00        		.byte	0
 1826 0008 0000 0000 		.long	0
 1827               	.LLRL0:
 1828 000c 07        		.byte	0x7
 1829 000d 0000 0000 		.long	.Ltext0
 1830 0011 16        		.uleb128 .Letext0-.Ltext0
 1831 0012 07        		.byte	0x7
 1832 0013 0000 0000 		.long	.LFB6
 1833 0017 B601      		.uleb128 .LFE6-.LFB6
 1834 0019 00        		.byte	0
 1835               	.Ldebug_ranges3:
 1836               		.section	.debug_line,"",@progbits
 1837               	.Ldebug_line0:
 1838 0000 0000 01BE 		.section	.debug_str,"MS",@progbits,1
 1838      0003 0000 
 1838      00DF 0201 
 1838      FB0E 0D00 
 1838      0101 0101 
 1839               	.LASF39:
 1840 0000 5F73 697A 		.string	"_size"
 1840      6500 
 1841               	.LASF76:
 1842 0006 5F72 616E 		.string	"_rand48"
 1842      6434 3800 
 1843               	.LASF63:
 1844 000e 5F65 6D65 		.string	"_emergency"
 1844      7267 656E 
 1844      6379 00
 1845               	.LASF53:
 1846 0019 5F64 6174 		.string	"_data"
 1846      6100 
 1847               	.LASF95:
 1848 001f 5F77 6372 		.string	"_wcrtomb_state"
 1848      746F 6D62 
 1848      5F73 7461 
 1848      7465 00
 1849               	.LASF96:
 1850 002e 5F77 6373 		.string	"_wcsrtombs_state"
 1850      7274 6F6D 
 1850      6273 5F73 
 1850      7461 7465 
 1850      00
 1851               	.LASF7:
 1852 003f 6C6F 6E67 		.string	"long long unsigned int"
 1852      206C 6F6E 
 1852      6720 756E 
 1852      7369 676E 
 1852      6564 2069 
 1853               	.LASF104:
 1854 0056 6664 6F70 		.string	"fdopen"
 1854      656E 00
 1855               	.LASF43:


 1856 005d 5F6C 6266 		.string	"_lbfsize"
 1856      7369 7A65 
 1856      00
 1857               	.LASF115:
 1858 0066 5F5F 6C6F 		.string	"__locale_t"
 1858      6361 6C65 
 1858      5F74 00
 1859               	.LASF93:
 1860 0071 5F6D 6272 		.string	"_mbrtowc_state"
 1860      746F 7763 
 1860      5F73 7461 
 1860      7465 00
 1861               	.LASF88:
 1862 0080 5F77 6374 		.string	"_wctomb_state"
 1862      6F6D 625F 
 1862      7374 6174 
 1862      6500 
 1863               	.LASF28:
 1864 008e 5F5F 746D 		.string	"__tm_sec"
 1864      5F73 6563 
 1864      00
 1865               	.LASF6:
 1866 0097 6C6F 6E67 		.string	"long long int"
 1866      206C 6F6E 
 1866      6720 696E 
 1866      7400 
 1867               	.LASF0:
 1868 00a5 7369 676E 		.string	"signed char"
 1868      6564 2063 
 1868      6861 7200 
 1869               	.LASF49:
 1870 00b1 5F75 6275 		.string	"_ubuf"
 1870      6600 
 1871               	.LASF113:
 1872 00b7 7465 7374 		.string	"test3.c"
 1872      332E 6300 
 1873               	.LASF38:
 1874 00bf 5F62 6173 		.string	"_base"
 1874      6500 
 1875               	.LASF30:
 1876 00c5 5F5F 746D 		.string	"__tm_hour"
 1876      5F68 6F75 
 1876      7200 
 1877               	.LASF111:
 1878 00cf 5F5F 6275 		.string	"__builtin_fputc"
 1878      696C 7469 
 1878      6E5F 6670 
 1878      7574 6300 
 1879               	.LASF44:
 1880 00df 5F63 6F6F 		.string	"_cookie"
 1880      6B69 6500 
 1881               	.LASF4:
 1882 00e7 6C6F 6E67 		.string	"long int"
 1882      2069 6E74 
 1882      00
 1883               	.LASF41:
 1884 00f0 5F66 6C61 		.string	"_flags"


 1884      6773 00
 1885               	.LASF98:
 1886 00f7 4649 4C45 		.string	"FILE"
 1886      00
 1887               	.LASF59:
 1888 00fc 5F73 7464 		.string	"_stdin"
 1888      696E 00
 1889               	.LASF51:
 1890 0103 5F62 6C6B 		.string	"_blksize"
 1890      7369 7A65 
 1890      00
 1891               	.LASF100:
 1892 010c 636F 6D30 		.string	"com0out"
 1892      6F75 7400 
 1893               	.LASF71:
 1894 0114 5F63 7674 		.string	"_cvtbuf"
 1894      6275 6600 
 1895               	.LASF52:
 1896 011c 5F6F 6666 		.string	"_offset"
 1896      7365 7400 
 1897               	.LASF108:
 1898 0124 6663 6E74 		.string	"fcntl"
 1898      6C00 
 1899               	.LASF94:
 1900 012a 5F6D 6273 		.string	"_mbsrtowcs_state"
 1900      7274 6F77 
 1900      6373 5F73 
 1900      7461 7465 
 1900      00
 1901               	.LASF92:
 1902 013b 5F6D 6272 		.string	"_mbrlen_state"
 1902      6C65 6E5F 
 1902      7374 6174 
 1902      6500 
 1903               	.LASF24:
 1904 0149 5F73 6967 		.string	"_sign"
 1904      6E00 
 1905               	.LASF21:
 1906 014f 5F66 6C6F 		.string	"_flock_t"
 1906      636B 5F74 
 1906      00
 1907               	.LASF61:
 1908 0158 5F73 7464 		.string	"_stderr"
 1908      6572 7200 
 1909               	.LASF26:
 1910 0160 5F42 6967 		.string	"_Bigint"
 1910      696E 7400 
 1911               	.LASF83:
 1912 0168 5F67 616D 		.string	"_gamma_signgam"
 1912      6D61 5F73 
 1912      6967 6E67 
 1912      616D 00
 1913               	.LASF45:
 1914 0177 5F72 6561 		.string	"_read"
 1914      6400 
 1915               	.LASF67:
 1916 017d 5F72 6573 		.string	"_result_k"


 1916      756C 745F 
 1916      6B00 
 1917               	.LASF27:
 1918 0187 5F5F 746D 		.string	"__tm"
 1918      00
 1919               	.LASF9:
 1920 018c 756E 7369 		.string	"unsigned int"
 1920      676E 6564 
 1920      2069 6E74 
 1920      00
 1921               	.LASF15:
 1922 0199 5F5F 7763 		.string	"__wchb"
 1922      6862 00
 1923               	.LASF60:
 1924 01a0 5F73 7464 		.string	"_stdout"
 1924      6F75 7400 
 1925               	.LASF70:
 1926 01a8 5F63 7674 		.string	"_cvtlen"
 1926      6C65 6E00 
 1927               	.LASF5:
 1928 01b0 6C6F 6E67 		.string	"long unsigned int"
 1928      2075 6E73 
 1928      6967 6E65 
 1928      6420 696E 
 1928      7400 
 1929               	.LASF42:
 1930 01c2 5F66 696C 		.string	"_file"
 1930      6500 
 1931               	.LASF102:
 1932 01c8 636F 6D31 		.string	"com1out"
 1932      6F75 7400 
 1933               	.LASF106:
 1934 01d0 7461 736B 		.string	"task1"
 1934      3100 
 1935               	.LASF105:
 1936 01d6 7461 736B 		.string	"task2"
 1936      3200 
 1937               	.LASF3:
 1938 01dc 7368 6F72 		.string	"short unsigned int"
 1938      7420 756E 
 1938      7369 676E 
 1938      6564 2069 
 1938      6E74 00
 1939               	.LASF90:
 1940 01ef 5F73 6967 		.string	"_signal_buf"
 1940      6E61 6C5F 
 1940      6275 6600 
 1941               	.LASF81:
 1942 01fb 5F61 7363 		.string	"_asctime_buf"
 1942      7469 6D65 
 1942      5F62 7566 
 1942      00
 1943               	.LASF66:
 1944 0208 5F72 6573 		.string	"_result"
 1944      756C 7400 
 1945               	.LASF14:
 1946 0210 5F5F 7763 		.string	"__wch"


 1946      6800 
 1947               	.LASF10:
 1948 0216 7769 6E74 		.string	"wint_t"
 1948      5F74 00
 1949               	.LASF116:
 1950 021d 6B65 795F 		.string	"key_in"
 1950      696E 00
 1951               	.LASF54:
 1952 0224 5F6C 6F63 		.string	"_lock"
 1952      6B00 
 1953               	.LASF110:
 1954 022a 5F5F 6275 		.string	"__builtin_fscanf"
 1954      696C 7469 
 1954      6E5F 6673 
 1954      6361 6E66 
 1954      00
 1955               	.LASF56:
 1956 023b 5F66 6C61 		.string	"_flags2"
 1956      6773 3200 
 1957               	.LASF46:
 1958 0243 5F77 7269 		.string	"_write"
 1958      7465 00
 1959               	.LASF33:
 1960 024a 5F5F 746D 		.string	"__tm_year"
 1960      5F79 6561 
 1960      7200 
 1961               	.LASF20:
 1962 0254 5F4C 4F43 		.string	"_LOCK_RECURSIVE_T"
 1962      4B5F 5245 
 1962      4355 5253 
 1962      4956 455F 
 1962      5400 
 1963               	.LASF109:
 1964 0266 6670 7574 		.string	"fputc"
 1964      6300 
 1965               	.LASF32:
 1966 026c 5F5F 746D 		.string	"__tm_mon"
 1966      5F6D 6F6E 
 1966      00
 1967               	.LASF11:
 1968 0275 5F6F 6666 		.string	"_off_t"
 1968      5F74 00
 1969               	.LASF101:
 1970 027c 636F 6D31 		.string	"com1in"
 1970      696E 00
 1971               	.LASF69:
 1972 0283 5F66 7265 		.string	"_freelist"
 1972      656C 6973 
 1972      7400 
 1973               	.LASF112:
 1974 028d 474E 5520 		.string	"GNU C17 11.4.0 -mcpu=68000 -msoft-float -g -O2 -fomit-frame-pointer"
 1974      4331 3720 
 1974      3131 2E34 
 1974      2E30 202D 
 1974      6D63 7075 
 1975               	.LASF1:
 1976 02d1 756E 7369 		.string	"unsigned char"


 1976      676E 6564 
 1976      2063 6861 
 1976      7200 
 1977               	.LASF72:
 1978 02df 5F6E 6577 		.string	"_new"
 1978      00
 1979               	.LASF99:
 1980 02e4 636F 6D30 		.string	"com0in"
 1980      696E 00
 1981               	.LASF97:
 1982 02eb 5F68 5F65 		.string	"_h_errno"
 1982      7272 6E6F 
 1982      00
 1983               	.LASF2:
 1984 02f4 7368 6F72 		.string	"short int"
 1984      7420 696E 
 1984      7400 
 1985               	.LASF35:
 1986 02fe 5F5F 746D 		.string	"__tm_yday"
 1986      5F79 6461 
 1986      7900 
 1987               	.LASF37:
 1988 0308 5F5F 7362 		.string	"__sbuf"
 1988      7566 00
 1989               	.LASF75:
 1990 030f 5F5F 4649 		.string	"__FILE"
 1990      4C45 00
 1991               	.LASF18:
 1992 0316 5F6D 6273 		.string	"_mbstate_t"
 1992      7461 7465 
 1992      5F74 00
 1993               	.LASF40:
 1994 0321 5F5F 7346 		.string	"__sFILE"
 1994      494C 4500 
 1995               	.LASF55:
 1996 0329 5F6D 6273 		.string	"_mbstate"
 1996      7461 7465 
 1996      00
 1997               	.LASF84:
 1998 0332 5F72 616E 		.string	"_rand_next"
 1998      645F 6E65 
 1998      7874 00
 1999               	.LASF86:
 2000 033d 5F6D 626C 		.string	"_mblen_state"
 2000      656E 5F73 
 2000      7461 7465 
 2000      00
 2001               	.LASF62:
 2002 034a 5F69 6E63 		.string	"_inc"
 2002      00
 2003               	.LASF64:
 2004 034f 5F6C 6F63 		.string	"_locale"
 2004      616C 6500 
 2005               	.LASF65:
 2006 0357 5F5F 636C 		.string	"__cleanup"
 2006      6561 6E75 
 2006      7000 


 2007               	.LASF23:
 2008 0361 5F6D 6178 		.string	"_maxwds"
 2008      7764 7300 
 2009               	.LASF57:
 2010 0369 5F72 6565 		.string	"_reent"
 2010      6E74 00
 2011               	.LASF103:
 2012 0370 6673 6361 		.string	"fscanf"
 2012      6E66 00
 2013               	.LASF77:
 2014 0377 5F73 6565 		.string	"_seed"
 2014      6400 
 2015               	.LASF16:
 2016 037d 5F5F 636F 		.string	"__count"
 2016      756E 7400 
 2017               	.LASF17:
 2018 0385 5F5F 7661 		.string	"__value"
 2018      6C75 6500 
 2019               	.LASF47:
 2020 038d 5F73 6565 		.string	"_seek"
 2020      6B00 
 2021               	.LASF12:
 2022 0393 5F66 706F 		.string	"_fpos_t"
 2022      735F 7400 
 2023               	.LASF8:
 2024 039b 6C6F 6E67 		.string	"long double"
 2024      2064 6F75 
 2024      626C 6500 
 2025               	.LASF58:
 2026 03a7 5F65 7272 		.string	"_errno"
 2026      6E6F 00
 2027               	.LASF74:
 2028 03ae 6368 6172 		.string	"char"
 2028      00
 2029               	.LASF29:
 2030 03b3 5F5F 746D 		.string	"__tm_min"
 2030      5F6D 696E 
 2030      00
 2031               	.LASF78:
 2032 03bc 5F6D 756C 		.string	"_mult"
 2032      7400 
 2033               	.LASF22:
 2034 03c2 5F6E 6578 		.string	"_next"
 2034      7400 
 2035               	.LASF80:
 2036 03c8 5F73 7472 		.string	"_strtok_last"
 2036      746F 6B5F 
 2036      6C61 7374 
 2036      00
 2037               	.LASF79:
 2038 03d5 5F61 6464 		.string	"_add"
 2038      00
 2039               	.LASF19:
 2040 03da 5F5F 554C 		.string	"__ULong"
 2040      6F6E 6700 
 2041               	.LASF91:
 2042 03e2 5F67 6574 		.string	"_getdate_err"


 2042      6461 7465 
 2042      5F65 7272 
 2042      00
 2043               	.LASF25:
 2044 03ef 5F77 6473 		.string	"_wds"
 2044      00
 2045               	.LASF34:
 2046 03f4 5F5F 746D 		.string	"__tm_wday"
 2046      5F77 6461 
 2046      7900 
 2047               	.LASF13:
 2048 03fe 5F73 7369 		.string	"_ssize_t"
 2048      7A65 5F74 
 2048      00
 2049               	.LASF89:
 2050 0407 5F6C 3634 		.string	"_l64a_buf"
 2050      615F 6275 
 2050      6600 
 2051               	.LASF114:
 2052 0411 2F68 6F6D 		.string	"/home/students/5233566329/software-exp/3-1_stream-assignment_compiled"
 2052      652F 7374 
 2052      7564 656E 
 2052      7473 2F35 
 2052      3233 3335 
 2053               	.LASF73:
 2054 0457 5F73 6967 		.string	"_sig_func"
 2054      5F66 756E 
 2054      6300 
 2055               	.LASF50:
 2056 0461 5F6E 6275 		.string	"_nbuf"
 2056      6600 
 2057               	.LASF36:
 2058 0467 5F5F 746D 		.string	"__tm_isdst"
 2058      5F69 7364 
 2058      7374 00
 2059               	.LASF82:
 2060 0472 5F6C 6F63 		.string	"_localtime_buf"
 2060      616C 7469 
 2060      6D65 5F62 
 2060      7566 00
 2061               	.LASF48:
 2062 0481 5F63 6C6F 		.string	"_close"
 2062      7365 00
 2063               	.LASF85:
 2064 0488 5F72 3438 		.string	"_r48"
 2064      00
 2065               	.LASF87:
 2066 048d 5F6D 6274 		.string	"_mbtowc_state"
 2066      6F77 635F 
 2066      7374 6174 
 2066      6500 
 2067               	.LASF68:
 2068 049b 5F70 3573 		.string	"_p5s"
 2068      00
 2069               	.LASF107:
 2070 04a0 6D61 696E 		.string	"main"
 2070      00


 2071               	.LASF31:
 2072 04a5 5F5F 746D 		.string	"__tm_mday"
 2072      5F6D 6461 
 2072      7900 
 2073               		.ident	"GCC: (GNU) 11.4.0"


